{
  "name": "Google Sheets to Backend Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 */30 * * * *"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "spreadsheet",
        "operation": "read",
        "documentId": "1qY-8pTWkR5RoEi6H93HYnl_6UNVJecEnqQysTRau4Ms",
        "sheetName": "Inventario a web",
        "options": {
          "range": "A2:Z1000"
        }
      },
      "id": "read-google-sheets",
      "name": "Read Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process Google Sheets data for backend sync\nconst items = $input.all();\nconst processedVehicles = [];\n\nconsole.log(`Processing ${items.length} rows from Google Sheets`);\n\nfor (const item of items) {\n  const row = item.json;\n  \n  // Skip empty rows or header rows\n  if (!row['#'] || row['#'] === '#' || row['#'] === '') {\n    continue;\n  }\n  \n  // Extract and clean data\n  const vehicle = {\n    external_id: `GS_${row['#'] || ''}`,\n    marca: row['Marca'] || '',\n    modelo: row['Modelo'] || '',\n    año: row['Año'] || 2000,\n    color: row['Color'] || '',\n    precio: row['Precio'] || 0,\n    kilometraje: row['km'] || '',\n    estatus: row['Estatus'] || 'DISPONIBLE',\n    ubicacion: row['Ubicacion'] || '',\n    descripcion: `${row['Marca'] || ''} ${row['Modelo'] || ''} ${row['Año'] || ''} - ${row['Color'] || ''}`.trim()\n  };\n  \n  // Clean precio (remove $ and commas)\n  if (typeof vehicle.precio === 'string') {\n    vehicle.precio = parseFloat(vehicle.precio.replace(/[$,]/g, '')) || 0;\n  }\n  \n  // Clean año (ensure it's a number)\n  if (typeof vehicle.año === 'string') {\n    vehicle.año = parseInt(vehicle.año) || 2000;\n  }\n  \n  // Clean kilometraje (remove commas)\n  if (typeof vehicle.kilometraje === 'string') {\n    vehicle.kilometraje = vehicle.kilometraje.replace(/,/g, '');\n  }\n  \n  // Normalize estatus\n  const estatusMap = {\n    'DISPONIBLE': 'DISPONIBLE',\n    'Disponible': 'DISPONIBLE',\n    'VENDIDO': 'VENDIDO',\n    'Vendido': 'VENDIDO',\n    'RESERVADO': 'RESERVADO',\n    'Reservado': 'RESERVADO'\n  };\n  vehicle.estatus = estatusMap[vehicle.estatus] || 'DISPONIBLE';\n  \n  processedVehicles.push(vehicle);\n}\n\nconsole.log(`Processed ${processedVehicles.length} vehicles for backend sync`);\n\nreturn [{ json: { vehicles: processedVehicles } }];"
      },
      "id": "process-sheets-data",
      "name": "Process Sheets Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/vehicles/sync-from-sheets",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json.vehicles }}",
        "options": {}
      },
      "id": "sync-to-backend",
      "name": "Sync to Backend",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log sync results\nconst response = $input.first().json;\n\nconsole.log('=== BACKEND SYNC COMPLETE ===');\nconsole.log('Response:', JSON.stringify(response, null, 2));\n\nreturn [{ json: response }];"
      },
      "id": "log-sync-results",
      "name": "Log Sync Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Read Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Google Sheets": {
      "main": [
        [
          {
            "node": "Process Sheets Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Sheets Data": {
      "main": [
        [
          {
            "node": "Sync to Backend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sync to Backend": {
      "main": [
        [
          {
            "node": "Log Sync Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "sheets-to-backend-sync",
  "tags": []
}
