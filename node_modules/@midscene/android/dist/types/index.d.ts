import { AbstractInterface } from '@midscene/core/device';
import { ADB } from 'appium-adb';
import { Agent } from '@midscene/core/agent';
import { AgentOpt } from '@midscene/core/agent';
import { Device } from 'appium-adb';
import { DeviceAction } from '@midscene/core';
import type { ElementInfo } from '@midscene/shared/extractor';
import { InterfaceType } from '@midscene/core';
import { overrideAIConfig } from '@midscene/shared/env';
import { Point } from '@midscene/core';
import { Size } from '@midscene/core';

export declare function agentFromAdbDevice(deviceId?: string, opts?: AndroidAgentOpt & AndroidDeviceOpt): Promise<AndroidAgent>;

export declare class AndroidAgent extends Agent<AndroidDevice> {
    constructor(interfaceInstance: AndroidDevice, opts?: AndroidAgentOpt);
    launch(uri: string): Promise<void>;
}

declare type AndroidAgentOpt = AgentOpt;

export declare class AndroidDevice implements AbstractInterface {
    private deviceId;
    private yadbPushed;
    private devicePixelRatio;
    private adb;
    private connectingAdb;
    private destroyed;
    private description;
    interfaceType: InterfaceType;
    uri: string | undefined;
    options?: AndroidDeviceOpt;
    actionSpace(): DeviceAction<any>[];
    constructor(deviceId: string, options?: AndroidDeviceOpt);
    describe(): string;
    connect(): Promise<ADB>;
    getAdb(): Promise<ADB>;
    private createAdbProxy;
    launch(uri: string): Promise<AndroidDevice>;
    execYadb(keyboardContent: string): Promise<void>;
    getElementsInfo(): Promise<ElementInfo[]>;
    getElementsNodeTree(): Promise<any>;
    getScreenSize(): Promise<{
        override: string;
        physical: string;
        orientation: number;
    }>;
    getDisplayDensity(): Promise<number>;
    getDisplayOrientation(): Promise<number>;
    size(): Promise<Size>;
    private adjustCoordinates;
    private reverseAdjustCoordinates;
    screenshotBase64(): Promise<string>;
    clearInput(element: ElementInfo): Promise<void>;
    forceScreenshot(path: string): Promise<void>;
    url(): Promise<string>;
    scrollUntilTop(startPoint?: Point): Promise<void>;
    scrollUntilBottom(startPoint?: Point): Promise<void>;
    scrollUntilLeft(startPoint?: Point): Promise<void>;
    scrollUntilRight(startPoint?: Point): Promise<void>;
    scrollUp(distance?: number, startPoint?: Point): Promise<void>;
    scrollDown(distance?: number, startPoint?: Point): Promise<void>;
    scrollLeft(distance?: number, startPoint?: Point): Promise<void>;
    scrollRight(distance?: number, startPoint?: Point): Promise<void>;
    ensureYadb(): Promise<void>;
    keyboardType(text: string, options?: AndroidDeviceInputOpt): Promise<void>;
    private normalizeKeyName;
    keyboardPress(key: string): Promise<void>;
    mouseClick(x: number, y: number): Promise<void>;
    mouseMove(x: number, y: number): Promise<void>;
    mouseDrag(from: {
        x: number;
        y: number;
    }, to: {
        x: number;
        y: number;
    }, duration?: number): Promise<void>;
    scroll(deltaX: number, deltaY: number, duration?: number): Promise<void>;
    destroy(): Promise<void>;
    back(): Promise<void>;
    home(): Promise<void>;
    recentApps(): Promise<void>;
    longPress(x: number, y: number, duration?: number): Promise<void>;
    pullDown(startPoint?: Point, distance?: number, duration?: number): Promise<void>;
    pullDrag(from: {
        x: number;
        y: number;
    }, to: {
        x: number;
        y: number;
    }, duration: number): Promise<void>;
    pullUp(startPoint?: Point, distance?: number, duration?: number): Promise<void>;
    getXpathsById(id: string): Promise<string[]>;
    getXpathsByPoint(point: Point, isOrderSensitive: boolean): Promise<string[]>;
    getElementInfoByXpath(xpath: string): Promise<ElementInfo>;
    private getDisplayArg;
    getPhysicalDisplayId(): Promise<string | null>;
    hideKeyboard(options?: AndroidDeviceInputOpt, timeoutMs?: number): Promise<boolean>;
}

declare type AndroidDeviceInputOpt = {
    autoDismissKeyboard?: boolean;
    keyboardDismissStrategy?: 'esc-first' | 'back-first';
};

declare type AndroidDeviceOpt = {
    androidAdbPath?: string;
    remoteAdbHost?: string;
    remoteAdbPort?: number;
    imeStrategy?: 'always-yadb' | 'yadb-for-non-ascii';
    displayId?: number;
    usePhysicalDisplayIdForScreenshot?: boolean;
    usePhysicalDisplayIdForDisplayLookup?: boolean;
} & AndroidDeviceInputOpt;

export declare function getConnectedDevices(): Promise<Device[]>;

export { overrideAIConfig }

export { }
