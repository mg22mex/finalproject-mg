{"version":3,"file":"yaml/player.mjs","sources":["webpack://@midscene/core/./src/yaml/player.ts"],"sourcesContent":["import { existsSync, mkdirSync, writeFileSync } from 'node:fs';\nimport { basename, dirname, join, resolve } from 'node:path';\nimport { assert, ifInBrowser, ifInWorker } from '@midscene/shared/utils';\n\nimport type { Agent } from '@/agent/agent';\nimport type {\n  DeviceAction,\n  FreeFn,\n  LocateOption,\n  MidsceneYamlFlowItemAIAction,\n  MidsceneYamlFlowItemAIAsk,\n  MidsceneYamlFlowItemAIAssert,\n  MidsceneYamlFlowItemAIBoolean,\n  MidsceneYamlFlowItemAIInput,\n  MidsceneYamlFlowItemAIKeyboardPress,\n  MidsceneYamlFlowItemAILocate,\n  MidsceneYamlFlowItemAINumber,\n  MidsceneYamlFlowItemAIQuery,\n  MidsceneYamlFlowItemAIScroll,\n  MidsceneYamlFlowItemAIString,\n  MidsceneYamlFlowItemAIWaitFor,\n  MidsceneYamlFlowItemEvaluateJavaScript,\n  MidsceneYamlFlowItemLogScreenshot,\n  MidsceneYamlFlowItemSleep,\n  MidsceneYamlScript,\n  MidsceneYamlScriptEnv,\n  ScriptPlayerStatusValue,\n  ScriptPlayerTaskStatus,\n  TUserPrompt,\n} from '@/index';\nimport { getMidsceneRunSubDir } from '@midscene/shared/common';\nimport { getDebug } from '@midscene/shared/logger';\nimport { buildDetailedLocateParamAndRestParams } from './utils';\n\nconst debug = getDebug('yaml-player');\nexport class ScriptPlayer<T extends MidsceneYamlScriptEnv> {\n  public currentTaskIndex?: number;\n  public taskStatusList: ScriptPlayerTaskStatus[] = [];\n  public status: ScriptPlayerStatusValue = 'init';\n  public reportFile?: string | null;\n  public result: Record<string, any>;\n  private unnamedResultIndex = 0;\n  public output?: string | null;\n  public unstableLogContent?: string | null;\n  public errorInSetup?: Error;\n  private interfaceAgent: Agent | null = null;\n  public agentStatusTip?: string;\n  public target?: MidsceneYamlScriptEnv;\n  private actionSpace: DeviceAction[] = [];\n  private scriptPath?: string;\n  constructor(\n    private script: MidsceneYamlScript,\n    private setupAgent: (platform: T) => Promise<{\n      agent: Agent;\n      freeFn: FreeFn[];\n    }>,\n    public onTaskStatusChange?: (taskStatus: ScriptPlayerTaskStatus) => void,\n    scriptPath?: string,\n  ) {\n    this.scriptPath = scriptPath;\n    this.result = {};\n    this.target = script.target || script.web || script.android;\n\n    if (ifInBrowser || ifInWorker) {\n      this.output = undefined;\n    } else if (this.target?.output) {\n      this.output = resolve(process.cwd(), this.target.output);\n    } else {\n      const scriptName = this.scriptPath\n        ? basename(this.scriptPath, '.yaml').replace(/\\.(ya?ml)$/i, '')\n        : 'script';\n      this.output = join(\n        getMidsceneRunSubDir('output'),\n        `${scriptName}-${Date.now()}.json`,\n      );\n    }\n\n    if (ifInBrowser || ifInWorker) {\n      this.unstableLogContent = undefined;\n    } else if (typeof this.target?.unstableLogContent === 'string') {\n      this.unstableLogContent = resolve(\n        process.cwd(),\n        this.target.unstableLogContent,\n      );\n    } else if (this.target?.unstableLogContent === true) {\n      this.unstableLogContent = join(\n        getMidsceneRunSubDir('output'),\n        'unstableLogContent.json',\n      );\n    }\n\n    this.taskStatusList = (script.tasks || []).map((task, taskIndex) => ({\n      ...task,\n      index: taskIndex,\n      status: 'init',\n      totalSteps: task.flow?.length || 0,\n    }));\n  }\n\n  private setResult(key: string | undefined, value: any) {\n    const keyToUse = key || this.unnamedResultIndex++;\n    if (this.result[keyToUse]) {\n      console.warn(`result key ${keyToUse} already exists, will overwrite`);\n    }\n    this.result[keyToUse] = value;\n\n    return this.flushResult();\n  }\n\n  private setPlayerStatus(status: ScriptPlayerStatusValue, error?: Error) {\n    this.status = status;\n    this.errorInSetup = error;\n  }\n\n  private notifyCurrentTaskStatusChange(taskIndex?: number) {\n    const taskIndexToNotify =\n      typeof taskIndex === 'number' ? taskIndex : this.currentTaskIndex;\n\n    if (typeof taskIndexToNotify !== 'number') {\n      return;\n    }\n\n    const taskStatus = this.taskStatusList[taskIndexToNotify];\n    if (this.onTaskStatusChange) {\n      this.onTaskStatusChange(taskStatus);\n    }\n  }\n\n  private async setTaskStatus(\n    index: number,\n    statusValue: ScriptPlayerStatusValue,\n    error?: Error,\n  ) {\n    this.taskStatusList[index].status = statusValue;\n    if (error) {\n      this.taskStatusList[index].error = error;\n    }\n\n    this.notifyCurrentTaskStatusChange(index);\n  }\n\n  private setTaskIndex(taskIndex: number) {\n    this.currentTaskIndex = taskIndex;\n  }\n\n  private flushResult() {\n    if (this.output) {\n      const output = resolve(process.cwd(), this.output);\n      const outputDir = dirname(output);\n      if (!existsSync(outputDir)) {\n        mkdirSync(outputDir, { recursive: true });\n      }\n      writeFileSync(output, JSON.stringify(this.result || {}, undefined, 2));\n    }\n  }\n\n  private flushUnstableLogContent() {\n    if (this.unstableLogContent) {\n      const content = this.interfaceAgent?._unstableLogContent();\n      const filePath = resolve(process.cwd(), this.unstableLogContent);\n      const outputDir = dirname(filePath);\n      if (!existsSync(outputDir)) {\n        mkdirSync(outputDir, { recursive: true });\n      }\n      writeFileSync(filePath, JSON.stringify(content, null, 2));\n    }\n  }\n\n  async playTask(taskStatus: ScriptPlayerTaskStatus, agent: Agent) {\n    const { flow } = taskStatus;\n    assert(flow, 'missing flow in task');\n\n    for (const flowItemIndex in flow) {\n      const currentStep = Number.parseInt(flowItemIndex, 10);\n      taskStatus.currentStep = currentStep;\n      const flowItem = flow[flowItemIndex];\n      debug(\n        `playing step ${flowItemIndex}, flowItem=${JSON.stringify(flowItem)}`,\n      );\n      if (\n        'aiAction' in (flowItem as MidsceneYamlFlowItemAIAction) ||\n        'ai' in (flowItem as MidsceneYamlFlowItemAIAction)\n      ) {\n        const actionTask = flowItem as MidsceneYamlFlowItemAIAction;\n        const prompt = actionTask.aiAction || actionTask.ai;\n        assert(prompt, 'missing prompt for ai (aiAction)');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiAction must be a string',\n        );\n        await agent.aiAction(prompt, {\n          cacheable: actionTask.cacheable,\n        });\n      } else if ('aiAssert' in (flowItem as MidsceneYamlFlowItemAIAssert)) {\n        const assertTask = flowItem as MidsceneYamlFlowItemAIAssert;\n        const prompt = assertTask.aiAssert;\n        const msg = assertTask.errorMessage;\n        assert(prompt, 'missing prompt for aiAssert');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiAssert must be a string',\n        );\n        const { pass, thought, message } =\n          (await agent.aiAssert(prompt, msg, {\n            keepRawResponse: true,\n          })) || {};\n\n        this.setResult(assertTask.name, {\n          pass,\n          thought,\n          message,\n        });\n\n        if (!pass) {\n          throw new Error(message);\n        }\n      } else if ('aiQuery' in (flowItem as MidsceneYamlFlowItemAIQuery)) {\n        const queryTask = flowItem as MidsceneYamlFlowItemAIQuery;\n        const prompt = queryTask.aiQuery;\n        const options = {\n          domIncluded: queryTask.domIncluded,\n          screenshotIncluded: queryTask.screenshotIncluded,\n        };\n        assert(prompt, 'missing prompt for aiQuery');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiQuery must be a string',\n        );\n        const queryResult = await agent.aiQuery(prompt, options);\n        this.setResult(queryTask.name, queryResult);\n      } else if ('aiNumber' in (flowItem as MidsceneYamlFlowItemAINumber)) {\n        const numberTask = flowItem as MidsceneYamlFlowItemAINumber;\n        const prompt = numberTask.aiNumber;\n        const options = {\n          domIncluded: numberTask.domIncluded,\n          screenshotIncluded: numberTask.screenshotIncluded,\n        };\n        assert(prompt, 'missing prompt for aiNumber');\n        assert(\n          typeof prompt === 'string',\n          'prompt for number must be a string',\n        );\n        const numberResult = await agent.aiNumber(prompt, options);\n        this.setResult(numberTask.name, numberResult);\n      } else if ('aiString' in (flowItem as MidsceneYamlFlowItemAIString)) {\n        const stringTask = flowItem as MidsceneYamlFlowItemAIString;\n        const prompt = stringTask.aiString;\n        const options = {\n          domIncluded: stringTask.domIncluded,\n          screenshotIncluded: stringTask.screenshotIncluded,\n        };\n        assert(prompt, 'missing prompt for aiString');\n        assert(\n          typeof prompt === 'string',\n          'prompt for string must be a string',\n        );\n        const stringResult = await agent.aiString(prompt, options);\n        this.setResult(stringTask.name, stringResult);\n      } else if ('aiBoolean' in (flowItem as MidsceneYamlFlowItemAIBoolean)) {\n        const booleanTask = flowItem as MidsceneYamlFlowItemAIBoolean;\n        const prompt = booleanTask.aiBoolean;\n        const options = {\n          domIncluded: booleanTask.domIncluded,\n          screenshotIncluded: booleanTask.screenshotIncluded,\n        };\n        assert(prompt, 'missing prompt for aiBoolean');\n        assert(\n          typeof prompt === 'string',\n          'prompt for boolean must be a string',\n        );\n        const booleanResult = await agent.aiBoolean(prompt, options);\n        this.setResult(booleanTask.name, booleanResult);\n      } else if ('aiAsk' in (flowItem as MidsceneYamlFlowItemAIAsk)) {\n        const askTask = flowItem as MidsceneYamlFlowItemAIAsk;\n        const prompt = askTask.aiAsk;\n        assert(prompt, 'missing prompt for aiAsk');\n        assert(typeof prompt === 'string', 'prompt for aiAsk must be a string');\n        const askResult = await agent.aiAsk(prompt);\n        this.setResult(askTask.name, askResult);\n      } else if ('aiLocate' in (flowItem as MidsceneYamlFlowItemAILocate)) {\n        const locateTask = flowItem as MidsceneYamlFlowItemAILocate;\n        const prompt = locateTask.aiLocate;\n        assert(prompt, 'missing prompt for aiLocate');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiLocate must be a string',\n        );\n        const locateResult = await agent.aiLocate(prompt, locateTask);\n        this.setResult(locateTask.name, locateResult);\n      } else if ('aiWaitFor' in (flowItem as MidsceneYamlFlowItemAIWaitFor)) {\n        const waitForTask = flowItem as MidsceneYamlFlowItemAIWaitFor;\n        const prompt = waitForTask.aiWaitFor;\n        assert(prompt, 'missing prompt for aiWaitFor');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiWaitFor must be a string',\n        );\n        const timeout = waitForTask.timeout;\n        await agent.aiWaitFor(prompt, { timeoutMs: timeout });\n      } else if ('sleep' in (flowItem as MidsceneYamlFlowItemSleep)) {\n        const sleepTask = flowItem as MidsceneYamlFlowItemSleep;\n        const ms = sleepTask.sleep;\n        let msNumber = ms;\n        if (typeof ms === 'string') {\n          msNumber = Number.parseInt(ms, 10);\n        }\n        assert(\n          msNumber && msNumber > 0,\n          `ms for sleep must be greater than 0, but got ${ms}`,\n        );\n        await new Promise((resolve) => setTimeout(resolve, msNumber));\n      } else if (\n        'javascript' in (flowItem as MidsceneYamlFlowItemEvaluateJavaScript)\n      ) {\n        const evaluateJavaScriptTask =\n          flowItem as MidsceneYamlFlowItemEvaluateJavaScript;\n\n        const result = await agent.evaluateJavaScript(\n          evaluateJavaScriptTask.javascript,\n        );\n        this.setResult(evaluateJavaScriptTask.name, result);\n      } else if (\n        'logScreenshot' in (flowItem as MidsceneYamlFlowItemLogScreenshot)\n      ) {\n        const logScreenshotTask = flowItem as MidsceneYamlFlowItemLogScreenshot;\n        await agent.logScreenshot(logScreenshotTask.logScreenshot, {\n          content: logScreenshotTask.content || '',\n        });\n      } else if ('aiInput' in (flowItem as MidsceneYamlFlowItemAIInput)) {\n        // may be input empty string ''\n        const { aiInput, ...inputTask } =\n          flowItem as MidsceneYamlFlowItemAIInput;\n\n        // Compatibility with previous version:\n        // Old format: { aiInput: string (value), locate: TUserPrompt }\n        // New format - 1: { aiInput: TUserPrompt, value: string }\n        // New format - 2: { aiInput: undefined, locate: TUserPrompt, value: string }\n        let locatePrompt: TUserPrompt | undefined;\n        let value: string | undefined;\n        if ((inputTask as any).locate) {\n          // Old format - aiInput is the value, locate is the prompt\n          value = (aiInput as string) || inputTask.value;\n          locatePrompt = (inputTask as any).locate;\n        } else {\n          // New format - aiInput is the prompt, value is the value\n          locatePrompt = aiInput || '';\n          value = inputTask.value;\n        }\n\n        await agent.callActionInActionSpace('Input', {\n          ...inputTask,\n          ...(value !== undefined ? { value } : {}),\n          ...(locatePrompt ? { locate: locatePrompt } : {}),\n        });\n      } else if (\n        'aiKeyboardPress' in (flowItem as MidsceneYamlFlowItemAIKeyboardPress)\n      ) {\n        const { aiKeyboardPress, ...keyboardPressTask } =\n          flowItem as MidsceneYamlFlowItemAIKeyboardPress;\n\n        // Compatibility with previous version:\n        // Old format: { aiKeyboardPress: string (key), locate?: TUserPrompt }\n        // New format - 1: { aiKeyboardPress: TUserPrompt, keyName: string }\n        // New format - 2: { aiKeyboardPress: , locate?: TUserPrompt, keyName: string }\n        let locatePrompt: TUserPrompt | undefined;\n        let keyName: string | undefined;\n        if ((keyboardPressTask as any).locate) {\n          // Old format - aiKeyboardPress is the key, locate is the prompt\n          keyName = aiKeyboardPress as string;\n          locatePrompt = (keyboardPressTask as any).locate;\n        } else if (keyboardPressTask.keyName) {\n          // New format - aiKeyboardPress is the prompt, key is the key\n          keyName = keyboardPressTask.keyName;\n          locatePrompt = aiKeyboardPress;\n        }\n\n        await agent.callActionInActionSpace('KeyboardPress', {\n          ...keyboardPressTask,\n          ...(keyName ? { keyName } : {}),\n          ...(locatePrompt ? { locate: locatePrompt } : {}),\n        });\n      } else if ('aiScroll' in (flowItem as MidsceneYamlFlowItemAIScroll)) {\n        const { aiScroll, ...scrollTask } =\n          flowItem as MidsceneYamlFlowItemAIScroll;\n\n        // Compatibility with previous version:\n        // Old format: { aiScroll: null, locate?: TUserPrompt, direction, scrollType, distance? }\n        // New format - 1: { aiScroll: TUserPrompt, direction, scrollType, distance? }\n        // New format - 2: { aiScroll: undefined, locate: TUserPrompt, direction, scrollType, distance? }\n        let locatePrompt: TUserPrompt | undefined;\n        if ((scrollTask as any).locate) {\n          // Old format - locate is the prompt, aiScroll is null/ignored\n          locatePrompt = (scrollTask as any).locate;\n        } else {\n          // New format - aiScroll is the prompt, or no prompt for global scroll\n          locatePrompt = aiScroll;\n        }\n\n        await agent.callActionInActionSpace('Scroll', {\n          ...scrollTask,\n          ...(locatePrompt ? { locate: locatePrompt } : {}),\n        });\n      } else {\n        // generic action, find the action in actionSpace\n\n        /* for aiTap, aiRightClick, the parameters are a flattened data for the 'locate', these are all valid data\n\n        - aiTap: 'search input box'\n        - aiTap: 'search input box'\n          deepThink: true\n          cacheable: false\n        - aiTap:\n          prompt: 'search input box'\n        - aiTap:\n          prompt: 'search input box'\n          deepThink: true\n          cacheable: false\n        */\n\n        const actionSpace = this.actionSpace;\n        let locatePromptShortcut: string | undefined;\n        const matchedAction = actionSpace.find((action) => {\n          const actionInterfaceAlias = action.interfaceAlias;\n          if (\n            actionInterfaceAlias &&\n            Object.prototype.hasOwnProperty.call(flowItem, actionInterfaceAlias)\n          ) {\n            locatePromptShortcut = flowItem[\n              actionInterfaceAlias as keyof typeof flowItem\n            ] as string;\n            return true;\n          }\n\n          const keyOfActionInActionSpace = action.name;\n          if (\n            Object.prototype.hasOwnProperty.call(\n              flowItem,\n              keyOfActionInActionSpace,\n            )\n          ) {\n            locatePromptShortcut = flowItem[\n              keyOfActionInActionSpace as keyof typeof flowItem\n            ] as string;\n            return true;\n          }\n\n          return false;\n        });\n\n        assert(\n          matchedAction,\n          `unknown flowItem in yaml: ${JSON.stringify(flowItem)}`,\n        );\n\n        assert(\n          !((flowItem as any).prompt && locatePromptShortcut),\n          `conflict locate prompt for item: ${JSON.stringify(flowItem)}`,\n        );\n\n        if (locatePromptShortcut) {\n          (flowItem as any).prompt = locatePromptShortcut;\n        }\n\n        const { locateParam, restParams } =\n          buildDetailedLocateParamAndRestParams(\n            locatePromptShortcut || '',\n            flowItem as LocateOption,\n            [\n              matchedAction.name,\n              matchedAction.interfaceAlias || '_never_mind_',\n            ],\n          );\n\n        const flowParams = {\n          ...restParams,\n          locate: locateParam,\n        };\n\n        debug(\n          `matchedAction: ${matchedAction.name}`,\n          `flowParams: ${JSON.stringify(flowParams, null, 2)}`,\n        );\n        await agent.callActionInActionSpace(matchedAction.name, flowParams);\n      }\n    }\n    this.reportFile = agent.reportFile;\n    await this.flushUnstableLogContent();\n  }\n\n  async run() {\n    const { target, web, android, tasks } = this.script;\n    const webEnv = web || target;\n    const androidEnv = android;\n    const platform = webEnv || androidEnv;\n\n    this.setPlayerStatus('running');\n\n    let agent: Agent | null = null;\n    let freeFn: FreeFn[] = [];\n    try {\n      const { agent: newAgent, freeFn: newFreeFn } = await this.setupAgent(\n        platform as T,\n      );\n      this.actionSpace = await newAgent.getActionSpace();\n      agent = newAgent;\n      const originalOnTaskStartTip = agent.onTaskStartTip;\n      agent.onTaskStartTip = (tip) => {\n        if (this.status === 'running') {\n          this.agentStatusTip = tip;\n        }\n        originalOnTaskStartTip?.(tip);\n      };\n      freeFn = [\n        ...(newFreeFn || []),\n        {\n          name: 'restore-agent-onTaskStartTip',\n          fn: () => {\n            if (agent) {\n              agent.onTaskStartTip = originalOnTaskStartTip;\n            }\n          },\n        },\n      ];\n    } catch (e) {\n      this.setPlayerStatus('error', e as Error);\n      return;\n    }\n    this.interfaceAgent = agent;\n\n    let taskIndex = 0;\n    this.setPlayerStatus('running');\n    let errorFlag = false;\n    while (taskIndex < tasks.length) {\n      const taskStatus = this.taskStatusList[taskIndex];\n      this.setTaskStatus(taskIndex, 'running' as any);\n      this.setTaskIndex(taskIndex);\n\n      try {\n        await this.playTask(taskStatus, this.interfaceAgent);\n        this.setTaskStatus(taskIndex, 'done' as any);\n      } catch (e) {\n        this.setTaskStatus(taskIndex, 'error' as any, e as Error);\n\n        if (taskStatus.continueOnError) {\n          // nothing more to do\n        } else {\n          this.reportFile = agent.reportFile;\n          errorFlag = true;\n          break;\n        }\n      }\n      this.reportFile = agent?.reportFile;\n      taskIndex++;\n    }\n\n    if (errorFlag) {\n      this.setPlayerStatus('error');\n    } else {\n      this.setPlayerStatus('done');\n    }\n    this.agentStatusTip = '';\n\n    // free the resources\n    for (const fn of freeFn) {\n      try {\n        // console.log('freeing', fn.name);\n        await fn.fn();\n        // console.log('freed', fn.name);\n      } catch (e) {\n        // console.error('error freeing', fn.name, e);\n      }\n    }\n  }\n}\n"],"names":["debug","getDebug","ScriptPlayer","key","value","keyToUse","console","status","error","taskIndex","taskIndexToNotify","taskStatus","index","statusValue","output","resolve","process","outputDir","dirname","existsSync","mkdirSync","writeFileSync","JSON","undefined","_this_interfaceAgent","content","filePath","agent","flow","assert","flowItemIndex","currentStep","Number","flowItem","actionTask","prompt","assertTask","msg","pass","thought","message","Error","queryTask","options","queryResult","numberTask","numberResult","stringTask","stringResult","booleanTask","booleanResult","askTask","askResult","locateTask","locateResult","waitForTask","timeout","sleepTask","ms","msNumber","Promise","setTimeout","evaluateJavaScriptTask","result","logScreenshotTask","aiInput","inputTask","locatePrompt","aiKeyboardPress","keyboardPressTask","keyName","aiScroll","scrollTask","actionSpace","locatePromptShortcut","matchedAction","action","actionInterfaceAlias","Object","keyOfActionInActionSpace","locateParam","restParams","buildDetailedLocateParamAndRestParams","flowParams","target","web","android","tasks","webEnv","androidEnv","platform","freeFn","newAgent","newFreeFn","originalOnTaskStartTip","tip","e","errorFlag","fn","script","setupAgent","onTaskStatusChange","scriptPath","_this_target","_this_target1","_this_target2","ifInBrowser","ifInWorker","scriptName","basename","join","getMidsceneRunSubDir","Date","task","_task_flow"],"mappings":";;;;;;;;;;;;;;;;AAkCA,MAAMA,QAAQC,SAAS;AAChB,MAAMC;IAgEH,UAAUC,GAAuB,EAAEC,KAAU,EAAE;QACrD,MAAMC,WAAWF,OAAO,IAAI,CAAC,kBAAkB;QAC/C,IAAI,IAAI,CAAC,MAAM,CAACE,SAAS,EACvBC,QAAQ,IAAI,CAAC,CAAC,WAAW,EAAED,SAAS,+BAA+B,CAAC;QAEtE,IAAI,CAAC,MAAM,CAACA,SAAS,GAAGD;QAExB,OAAO,IAAI,CAAC,WAAW;IACzB;IAEQ,gBAAgBG,MAA+B,EAAEC,KAAa,EAAE;QACtE,IAAI,CAAC,MAAM,GAAGD;QACd,IAAI,CAAC,YAAY,GAAGC;IACtB;IAEQ,8BAA8BC,SAAkB,EAAE;QACxD,MAAMC,oBACJ,AAAqB,YAArB,OAAOD,YAAyBA,YAAY,IAAI,CAAC,gBAAgB;QAEnE,IAAI,AAA6B,YAA7B,OAAOC,mBACT;QAGF,MAAMC,aAAa,IAAI,CAAC,cAAc,CAACD,kBAAkB;QACzD,IAAI,IAAI,CAAC,kBAAkB,EACzB,IAAI,CAAC,kBAAkB,CAACC;IAE5B;IAEA,MAAc,cACZC,KAAa,EACbC,WAAoC,EACpCL,KAAa,EACb;QACA,IAAI,CAAC,cAAc,CAACI,MAAM,CAAC,MAAM,GAAGC;QACpC,IAAIL,OACF,IAAI,CAAC,cAAc,CAACI,MAAM,CAAC,KAAK,GAAGJ;QAGrC,IAAI,CAAC,6BAA6B,CAACI;IACrC;IAEQ,aAAaH,SAAiB,EAAE;QACtC,IAAI,CAAC,gBAAgB,GAAGA;IAC1B;IAEQ,cAAc;QACpB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAMK,SAASC,2BAAQC,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM;YACjD,MAAMC,YAAYC,QAAQJ;YAC1B,IAAI,CAACK,WAAWF,YACdG,UAAUH,WAAW;gBAAE,WAAW;YAAK;YAEzCI,cAAcP,QAAQQ,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,GAAGC,QAAW;QACrE;IACF;IAEQ,0BAA0B;QAChC,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACXC;YAAhB,MAAMC,UAAU,QAAAD,CAAAA,uBAAAA,IAAI,CAAC,cAAc,AAAD,IAAlBA,KAAAA,IAAAA,qBAAqB,mBAAmB;YACxD,MAAME,WAAWX,2BAAQC,QAAQ,GAAG,IAAI,IAAI,CAAC,kBAAkB;YAC/D,MAAMC,YAAYC,QAAQQ;YAC1B,IAAI,CAACP,WAAWF,YACdG,UAAUH,WAAW;gBAAE,WAAW;YAAK;YAEzCI,cAAcK,UAAUJ,KAAK,SAAS,CAACG,SAAS,MAAM;QACxD;IACF;IAEA,MAAM,SAASd,UAAkC,EAAEgB,KAAY,EAAE;QAC/D,MAAM,EAAEC,IAAI,EAAE,GAAGjB;QACjBkB,OAAOD,MAAM;QAEb,IAAK,MAAME,iBAAiBF,KAAM;YAChC,MAAMG,cAAcC,OAAO,QAAQ,CAACF,eAAe;YACnDnB,WAAW,WAAW,GAAGoB;YACzB,MAAME,WAAWL,IAAI,CAACE,cAAc;YACpC9B,MACE,CAAC,aAAa,EAAE8B,cAAc,WAAW,EAAER,KAAK,SAAS,CAACW,WAAW;YAEvE,IACE,cAAeA,YACf,QAASA,UACT;gBACA,MAAMC,aAAaD;gBACnB,MAAME,SAASD,WAAW,QAAQ,IAAIA,WAAW,EAAE;gBACnDL,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMR,MAAM,QAAQ,CAACQ,QAAQ;oBAC3B,WAAWD,WAAW,SAAS;gBACjC;YACF,OAAO,IAAI,cAAeD,UAA2C;gBACnE,MAAMG,aAAaH;gBACnB,MAAME,SAASC,WAAW,QAAQ;gBAClC,MAAMC,MAAMD,WAAW,YAAY;gBACnCP,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAM,EAAEG,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAC7B,MAAMb,MAAM,QAAQ,CAACQ,QAAQE,KAAK;oBACjC,iBAAiB;gBACnB,MAAO,CAAC;gBAEV,IAAI,CAAC,SAAS,CAACD,WAAW,IAAI,EAAE;oBAC9BE;oBACAC;oBACAC;gBACF;gBAEA,IAAI,CAACF,MACH,MAAM,IAAIG,MAAMD;YAEpB,OAAO,IAAI,aAAcP,UAA0C;gBACjE,MAAMS,YAAYT;gBAClB,MAAME,SAASO,UAAU,OAAO;gBAChC,MAAMC,UAAU;oBACd,aAAaD,UAAU,WAAW;oBAClC,oBAAoBA,UAAU,kBAAkB;gBAClD;gBACAb,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMS,cAAc,MAAMjB,MAAM,OAAO,CAACQ,QAAQQ;gBAChD,IAAI,CAAC,SAAS,CAACD,UAAU,IAAI,EAAEE;YACjC,OAAO,IAAI,cAAeX,UAA2C;gBACnE,MAAMY,aAAaZ;gBACnB,MAAME,SAASU,WAAW,QAAQ;gBAClC,MAAMF,UAAU;oBACd,aAAaE,WAAW,WAAW;oBACnC,oBAAoBA,WAAW,kBAAkB;gBACnD;gBACAhB,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMW,eAAe,MAAMnB,MAAM,QAAQ,CAACQ,QAAQQ;gBAClD,IAAI,CAAC,SAAS,CAACE,WAAW,IAAI,EAAEC;YAClC,OAAO,IAAI,cAAeb,UAA2C;gBACnE,MAAMc,aAAad;gBACnB,MAAME,SAASY,WAAW,QAAQ;gBAClC,MAAMJ,UAAU;oBACd,aAAaI,WAAW,WAAW;oBACnC,oBAAoBA,WAAW,kBAAkB;gBACnD;gBACAlB,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMa,eAAe,MAAMrB,MAAM,QAAQ,CAACQ,QAAQQ;gBAClD,IAAI,CAAC,SAAS,CAACI,WAAW,IAAI,EAAEC;YAClC,OAAO,IAAI,eAAgBf,UAA4C;gBACrE,MAAMgB,cAAchB;gBACpB,MAAME,SAASc,YAAY,SAAS;gBACpC,MAAMN,UAAU;oBACd,aAAaM,YAAY,WAAW;oBACpC,oBAAoBA,YAAY,kBAAkB;gBACpD;gBACApB,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMe,gBAAgB,MAAMvB,MAAM,SAAS,CAACQ,QAAQQ;gBACpD,IAAI,CAAC,SAAS,CAACM,YAAY,IAAI,EAAEC;YACnC,OAAO,IAAI,WAAYjB,UAAwC;gBAC7D,MAAMkB,UAAUlB;gBAChB,MAAME,SAASgB,QAAQ,KAAK;gBAC5BtB,OAAOM,QAAQ;gBACfN,OAAO,AAAkB,YAAlB,OAAOM,QAAqB;gBACnC,MAAMiB,YAAY,MAAMzB,MAAM,KAAK,CAACQ;gBACpC,IAAI,CAAC,SAAS,CAACgB,QAAQ,IAAI,EAAEC;YAC/B,OAAO,IAAI,cAAenB,UAA2C;gBACnE,MAAMoB,aAAapB;gBACnB,MAAME,SAASkB,WAAW,QAAQ;gBAClCxB,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMmB,eAAe,MAAM3B,MAAM,QAAQ,CAACQ,QAAQkB;gBAClD,IAAI,CAAC,SAAS,CAACA,WAAW,IAAI,EAAEC;YAClC,OAAO,IAAI,eAAgBrB,UAA4C;gBACrE,MAAMsB,cAActB;gBACpB,MAAME,SAASoB,YAAY,SAAS;gBACpC1B,OAAOM,QAAQ;gBACfN,OACE,AAAkB,YAAlB,OAAOM,QACP;gBAEF,MAAMqB,UAAUD,YAAY,OAAO;gBACnC,MAAM5B,MAAM,SAAS,CAACQ,QAAQ;oBAAE,WAAWqB;gBAAQ;YACrD,OAAO,IAAI,WAAYvB,UAAwC;gBAC7D,MAAMwB,YAAYxB;gBAClB,MAAMyB,KAAKD,UAAU,KAAK;gBAC1B,IAAIE,WAAWD;gBACf,IAAI,AAAc,YAAd,OAAOA,IACTC,WAAW3B,OAAO,QAAQ,CAAC0B,IAAI;gBAEjC7B,OACE8B,YAAYA,WAAW,GACvB,CAAC,6CAA6C,EAAED,IAAI;gBAEtD,MAAM,IAAIE,QAAQ,CAAC7C,UAAY8C,WAAW9C,SAAS4C;YACrD,OAAO,IACL,gBAAiB1B,UACjB;gBACA,MAAM6B,yBACJ7B;gBAEF,MAAM8B,SAAS,MAAMpC,MAAM,kBAAkB,CAC3CmC,uBAAuB,UAAU;gBAEnC,IAAI,CAAC,SAAS,CAACA,uBAAuB,IAAI,EAAEC;YAC9C,OAAO,IACL,mBAAoB9B,UACpB;gBACA,MAAM+B,oBAAoB/B;gBAC1B,MAAMN,MAAM,aAAa,CAACqC,kBAAkB,aAAa,EAAE;oBACzD,SAASA,kBAAkB,OAAO,IAAI;gBACxC;YACF,OAAO,IAAI,aAAc/B,UAA0C;gBAEjE,MAAM,EAAEgC,OAAO,EAAE,GAAGC,WAAW,GAC7BjC;gBAMF,IAAIkC;gBACJ,IAAI/D;gBACJ,IAAK8D,UAAkB,MAAM,EAAE;oBAE7B9D,QAAS6D,WAAsBC,UAAU,KAAK;oBAC9CC,eAAgBD,UAAkB,MAAM;gBAC1C,OAAO;oBAELC,eAAeF,WAAW;oBAC1B7D,QAAQ8D,UAAU,KAAK;gBACzB;gBAEA,MAAMvC,MAAM,uBAAuB,CAAC,SAAS;oBAC3C,GAAGuC,SAAS;oBACZ,GAAI9D,AAAUmB,WAAVnB,QAAsB;wBAAEA;oBAAM,IAAI,CAAC,CAAC;oBACxC,GAAI+D,eAAe;wBAAE,QAAQA;oBAAa,IAAI,CAAC,CAAC;gBAClD;YACF,OAAO,IACL,qBAAsBlC,UACtB;gBACA,MAAM,EAAEmC,eAAe,EAAE,GAAGC,mBAAmB,GAC7CpC;gBAMF,IAAIkC;gBACJ,IAAIG;gBACJ,IAAKD,kBAA0B,MAAM,EAAE;oBAErCC,UAAUF;oBACVD,eAAgBE,kBAA0B,MAAM;gBAClD,OAAO,IAAIA,kBAAkB,OAAO,EAAE;oBAEpCC,UAAUD,kBAAkB,OAAO;oBACnCF,eAAeC;gBACjB;gBAEA,MAAMzC,MAAM,uBAAuB,CAAC,iBAAiB;oBACnD,GAAG0C,iBAAiB;oBACpB,GAAIC,UAAU;wBAAEA;oBAAQ,IAAI,CAAC,CAAC;oBAC9B,GAAIH,eAAe;wBAAE,QAAQA;oBAAa,IAAI,CAAC,CAAC;gBAClD;YACF,OAAO,IAAI,cAAelC,UAA2C;gBACnE,MAAM,EAAEsC,QAAQ,EAAE,GAAGC,YAAY,GAC/BvC;gBAMF,IAAIkC;gBAGFA,eAFGK,WAAmB,MAAM,GAEZA,WAAmB,MAAM,GAG1BD;gBAGjB,MAAM5C,MAAM,uBAAuB,CAAC,UAAU;oBAC5C,GAAG6C,UAAU;oBACb,GAAIL,eAAe;wBAAE,QAAQA;oBAAa,IAAI,CAAC,CAAC;gBAClD;YACF,OAAO;gBAiBL,MAAMM,cAAc,IAAI,CAAC,WAAW;gBACpC,IAAIC;gBACJ,MAAMC,gBAAgBF,YAAY,IAAI,CAAC,CAACG;oBACtC,MAAMC,uBAAuBD,OAAO,cAAc;oBAClD,IACEC,wBACAC,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC7C,UAAU4C,uBAC/C;wBACAH,uBAAuBzC,QAAQ,CAC7B4C,qBACD;wBACD,OAAO;oBACT;oBAEA,MAAME,2BAA2BH,OAAO,IAAI;oBAC5C,IACEE,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAClC7C,UACA8C,2BAEF;wBACAL,uBAAuBzC,QAAQ,CAC7B8C,yBACD;wBACD,OAAO;oBACT;oBAEA,OAAO;gBACT;gBAEAlD,OACE8C,eACA,CAAC,0BAA0B,EAAErD,KAAK,SAAS,CAACW,WAAW;gBAGzDJ,OACE,CAAGI,CAAAA,SAAiB,MAAM,IAAIyC,oBAAmB,GACjD,CAAC,iCAAiC,EAAEpD,KAAK,SAAS,CAACW,WAAW;gBAGhE,IAAIyC,sBACDzC,SAAiB,MAAM,GAAGyC;gBAG7B,MAAM,EAAEM,WAAW,EAAEC,UAAU,EAAE,GAC/BC,sCACER,wBAAwB,IACxBzC,UACA;oBACE0C,cAAc,IAAI;oBAClBA,cAAc,cAAc,IAAI;iBACjC;gBAGL,MAAMQ,aAAa;oBACjB,GAAGF,UAAU;oBACb,QAAQD;gBACV;gBAEAhF,MACE,CAAC,eAAe,EAAE2E,cAAc,IAAI,EAAE,EACtC,CAAC,YAAY,EAAErD,KAAK,SAAS,CAAC6D,YAAY,MAAM,IAAI;gBAEtD,MAAMxD,MAAM,uBAAuB,CAACgD,cAAc,IAAI,EAAEQ;YAC1D;QACF;QACA,IAAI,CAAC,UAAU,GAAGxD,MAAM,UAAU;QAClC,MAAM,IAAI,CAAC,uBAAuB;IACpC;IAEA,MAAM,MAAM;QACV,MAAM,EAAEyD,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEC,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM;QACnD,MAAMC,SAASH,OAAOD;QACtB,MAAMK,aAAaH;QACnB,MAAMI,WAAWF,UAAUC;QAE3B,IAAI,CAAC,eAAe,CAAC;QAErB,IAAI9D,QAAsB;QAC1B,IAAIgE,SAAmB,EAAE;QACzB,IAAI;YACF,MAAM,EAAE,OAAOC,QAAQ,EAAE,QAAQC,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU,CAClEH;YAEF,IAAI,CAAC,WAAW,GAAG,MAAME,SAAS,cAAc;YAChDjE,QAAQiE;YACR,MAAME,yBAAyBnE,MAAM,cAAc;YACnDA,MAAM,cAAc,GAAG,CAACoE;gBACtB,IAAI,AAAgB,cAAhB,IAAI,CAAC,MAAM,EACb,IAAI,CAAC,cAAc,GAAGA;gBAExBD,QAAAA,0BAAAA,uBAAyBC;YAC3B;YACAJ,SAAS;mBACHE,aAAa,EAAE;gBACnB;oBACE,MAAM;oBACN,IAAI;wBACF,IAAIlE,OACFA,MAAM,cAAc,GAAGmE;oBAE3B;gBACF;aACD;QACH,EAAE,OAAOE,GAAG;YACV,IAAI,CAAC,eAAe,CAAC,SAASA;YAC9B;QACF;QACA,IAAI,CAAC,cAAc,GAAGrE;QAEtB,IAAIlB,YAAY;QAChB,IAAI,CAAC,eAAe,CAAC;QACrB,IAAIwF,YAAY;QAChB,MAAOxF,YAAY8E,MAAM,MAAM,CAAE;YAC/B,MAAM5E,aAAa,IAAI,CAAC,cAAc,CAACF,UAAU;YACjD,IAAI,CAAC,aAAa,CAACA,WAAW;YAC9B,IAAI,CAAC,YAAY,CAACA;YAElB,IAAI;gBACF,MAAM,IAAI,CAAC,QAAQ,CAACE,YAAY,IAAI,CAAC,cAAc;gBACnD,IAAI,CAAC,aAAa,CAACF,WAAW;YAChC,EAAE,OAAOuF,GAAG;gBACV,IAAI,CAAC,aAAa,CAACvF,WAAW,SAAgBuF;gBAE9C,IAAIrF,WAAW,eAAe;qBAEvB;oBACL,IAAI,CAAC,UAAU,GAAGgB,MAAM,UAAU;oBAClCsE,YAAY;oBACZ;gBACF;YACF;YACA,IAAI,CAAC,UAAU,GAAGtE,QAAAA,QAAAA,KAAAA,IAAAA,MAAO,UAAU;YACnClB;QACF;QAEA,IAAIwF,WACF,IAAI,CAAC,eAAe,CAAC;aAErB,IAAI,CAAC,eAAe,CAAC;QAEvB,IAAI,CAAC,cAAc,GAAG;QAGtB,KAAK,MAAMC,MAAMP,OACf,IAAI;YAEF,MAAMO,GAAG,EAAE;QAEb,EAAE,OAAOF,GAAG,CAEZ;IAEJ;IA1gBA,YACUG,MAA0B,EAC1BC,UAGN,EACKC,kBAAiE,EACxEC,UAAmB,CACnB;YAOWC,cAcOC,eAKPC;;;;QAhDb,uBAAO,oBAAP;QACA,uBAAO,kBAAP;QACA,uBAAO,UAAP;QACA,uBAAO,cAAP;QACA,uBAAO,UAAP;QACA,uBAAQ,sBAAR;QACA,uBAAO,UAAP;QACA,uBAAO,sBAAP;QACA,uBAAO,gBAAP;QACA,uBAAQ,kBAAR;QACA,uBAAO,kBAAP;QACA,uBAAO,UAAP;QACA,uBAAQ,eAAR;QACA,uBAAQ,cAAR;aAEUN,MAAM,GAANA;aACAC,UAAU,GAAVA;aAIDC,kBAAkB,GAAlBA;aAnBF,cAAc,GAA6B,EAAE;aAC7C,MAAM,GAA4B;aAGjC,kBAAkB,GAAG;aAIrB,cAAc,GAAiB;aAG/B,WAAW,GAAmB,EAAE;QAWtC,IAAI,CAAC,UAAU,GAAGC;QAClB,IAAI,CAAC,MAAM,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAGH,OAAO,MAAM,IAAIA,OAAO,GAAG,IAAIA,OAAO,OAAO;QAE3D,IAAIO,eAAeC,YACjB,IAAI,CAAC,MAAM,GAAGpF;aACT,IAAI,QAAAgF,CAAAA,eAAAA,IAAI,CAAC,MAAM,AAAD,IAAVA,KAAAA,IAAAA,aAAa,MAAM,EAC5B,IAAI,CAAC,MAAM,GAAGxF,2BAAQC,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM;aAClD;YACL,MAAM4F,aAAa,IAAI,CAAC,UAAU,GAC9BC,SAAS,IAAI,CAAC,UAAU,EAAE,SAAS,OAAO,CAAC,eAAe,MAC1D;YACJ,IAAI,CAAC,MAAM,GAAGC,KACZC,qBAAqB,WACrB,GAAGH,WAAW,CAAC,EAAEI,KAAK,GAAG,GAAG,KAAK,CAAC;QAEtC;QAEA,IAAIN,eAAeC,YACjB,IAAI,CAAC,kBAAkB,GAAGpF;aACrB,IAAI,AAA2C,YAA3C,gBAAOiF,CAAAA,gBAAAA,IAAI,CAAC,MAAM,AAAD,IAAVA,KAAAA,IAAAA,cAAa,kBAAkB,AAAD,GAC9C,IAAI,CAAC,kBAAkB,GAAGzF,2BACxBC,QAAQ,GAAG,IACX,IAAI,CAAC,MAAM,CAAC,kBAAkB;aAE3B,IAAIyF,AAAAA,SAAAA,CAAAA,gBAAAA,IAAI,CAAC,MAAM,AAAD,IAAVA,KAAAA,IAAAA,cAAa,kBAAkB,AAAD,MAAM,MAC7C,IAAI,CAAC,kBAAkB,GAAGK,KACxBC,qBAAqB,WACrB;QAIJ,IAAI,CAAC,cAAc,GAAIZ,AAAAA,CAAAA,OAAO,KAAK,IAAI,EAAC,EAAG,GAAG,CAAC,CAACc,MAAMxG;gBAIxCyG;mBAJuD;gBACnE,GAAGD,IAAI;gBACP,OAAOxG;gBACP,QAAQ;gBACR,YAAYyG,AAAAA,SAAAA,CAAAA,aAAAA,KAAK,IAAI,AAAD,IAARA,KAAAA,IAAAA,WAAW,MAAM,AAAD,KAAK;YACnC;;IACF;AA4dF"}