{"version":3,"file":"ai-model/prompt/util.mjs","sources":["webpack://@midscene/core/./src/ai-model/prompt/util.ts"],"sourcesContent":["import { imageInfoOfBase64 } from '@/image/index';\nimport type { BaseElement, ElementTreeNode, Size, UIContext } from '@/types';\nimport { NodeType } from '@midscene/shared/constants';\nimport { type IModelPreferences, vlLocateMode } from '@midscene/shared/env';\nimport {\n  descriptionOfTree,\n  generateElementByPosition,\n  treeToList,\n} from '@midscene/shared/extractor';\nimport { assert } from '@midscene/shared/utils';\n\nexport function describeSize(size: Size) {\n  return `${size.width} x ${size.height}`;\n}\n\nexport function describeElement(\n  elements: (Pick<BaseElement, 'rect' | 'content'> & { id: string })[],\n) {\n  const sliceLength = 80;\n  return elements\n    .map((item) =>\n      [\n        item.id,\n        item.rect.left,\n        item.rect.top,\n        item.rect.left + item.rect.width,\n        item.rect.top + item.rect.height,\n        item.content.length > sliceLength\n          ? `${item.content.slice(0, sliceLength)}...`\n          : item.content,\n      ].join(', '),\n    )\n    .join('\\n');\n}\nexport const distanceThreshold = 16;\n\nexport function elementByPositionWithElementInfo(\n  treeRoot: ElementTreeNode<BaseElement>,\n  position: {\n    x: number;\n    y: number;\n  },\n  options?: {\n    requireStrictDistance?: boolean;\n    filterPositionElements?: boolean;\n  },\n) {\n  const requireStrictDistance = options?.requireStrictDistance ?? true;\n  const filterPositionElements = options?.filterPositionElements ?? false;\n\n  assert(typeof position !== 'undefined', 'position is required for query');\n\n  const matchingElements: BaseElement[] = [];\n\n  function dfs(node: ElementTreeNode<BaseElement>) {\n    if (node?.node) {\n      const item = node.node;\n      if (\n        item.rect.left <= position.x &&\n        position.x <= item.rect.left + item.rect.width &&\n        item.rect.top <= position.y &&\n        position.y <= item.rect.top + item.rect.height\n      ) {\n        if (\n          !(\n            filterPositionElements &&\n            item.attributes?.nodeType === NodeType.POSITION\n          ) &&\n          item.isVisible\n        ) {\n          matchingElements.push(item);\n        }\n      }\n    }\n\n    for (const child of node.children) {\n      dfs(child);\n    }\n  }\n\n  dfs(treeRoot);\n\n  if (matchingElements.length === 0) {\n    return undefined;\n  }\n\n  // Find the smallest element by area\n  const element = matchingElements.reduce((smallest, current) => {\n    const smallestArea = smallest.rect.width * smallest.rect.height;\n    const currentArea = current.rect.width * current.rect.height;\n    return currentArea < smallestArea ? current : smallest;\n  });\n\n  const distanceToCenter = distance(\n    { x: element.center[0], y: element.center[1] },\n    position,\n  );\n\n  if (requireStrictDistance) {\n    return distanceToCenter <= distanceThreshold ? element : undefined;\n  }\n\n  return element;\n}\n\nexport function distance(\n  point1: { x: number; y: number },\n  point2: { x: number; y: number },\n) {\n  return Math.sqrt((point1.x - point2.x) ** 2 + (point1.y - point2.y) ** 2);\n}\n\nexport const samplePageDescription = `\nAnd the page is described as follows:\n====================\nThe size of the page: 1280 x 720\nSome of the elements are marked with a rectangle in the screenshot corresponding to the markerId, some are not.\n\nDescription of all the elements in screenshot:\n<div id=\"969f1637\" markerId=\"1\" left=\"100\" top=\"100\" width=\"100\" height=\"100\"> // The markerId indicated by the rectangle label in the screenshot\n  <h4 id=\"b211ecb2\" markerId=\"5\" left=\"150\" top=\"150\" width=\"90\" height=\"60\">\n    The username is accepted\n  </h4>\n  ...many more\n</div>\n====================\n`;\n\nexport async function describeUserPage<\n  ElementType extends BaseElement = BaseElement,\n>(\n  context: Omit<UIContext<ElementType>, 'describer'>,\n  modelPreferences: IModelPreferences,\n  opt?: {\n    truncateTextLength?: number;\n    filterNonTextContent?: boolean;\n    domIncluded?: boolean | 'visible-only';\n    visibleOnly?: boolean;\n  },\n) {\n  const { screenshotBase64 } = context;\n  let width: number;\n  let height: number;\n\n  if (context.size) {\n    ({ width, height } = context.size);\n  } else {\n    const imgSize = await imageInfoOfBase64(screenshotBase64);\n    ({ width, height } = imgSize);\n  }\n\n  const treeRoot = context.tree;\n  // dfs tree, save the id and element info\n  const idElementMap: Record<string, ElementType> = {};\n  const flatElements: ElementType[] = treeToList(treeRoot);\n\n  if (opt?.domIncluded === true && flatElements.length >= 5000) {\n    console.warn(\n      'The number of elements is too large, it may cause the prompt to be too long, please use domIncluded: \"visible-only\" to reduce the number of elements',\n    );\n  }\n\n  flatElements.forEach((element) => {\n    idElementMap[element.id] = element;\n    if (typeof element.indexId !== 'undefined') {\n      idElementMap[`${element.indexId}`] = element;\n    }\n  });\n\n  let pageDescription = '';\n\n  const visibleOnly =\n    opt?.domIncluded === 'visible-only' ? true : (opt?.visibleOnly ?? false);\n  const shouldIncludeDOM = opt?.domIncluded || !vlLocateMode(modelPreferences);\n\n  if (shouldIncludeDOM) {\n    // non-vl mode must provide the page description\n    const contentTree = await descriptionOfTree(\n      treeRoot,\n      opt?.truncateTextLength,\n      opt?.filterNonTextContent,\n      visibleOnly,\n    );\n\n    // if match by position, don't need to provide the page description\n    const sizeDescription = describeSize({ width, height });\n    pageDescription = `The size of the page: ${sizeDescription} \\n The page elements tree:\\n${contentTree}`;\n  }\n\n  return {\n    description: pageDescription,\n    elementById(idOrIndexId: string) {\n      assert(typeof idOrIndexId !== 'undefined', 'id is required for query');\n      const item = idElementMap[`${idOrIndexId}`];\n      return item;\n    },\n    elementByPosition(\n      position: { x: number; y: number },\n      size: { width: number; height: number },\n    ) {\n      return elementByPositionWithElementInfo(treeRoot, position);\n    },\n    insertElementByPosition(position: { x: number; y: number }) {\n      const element = generateElementByPosition(position) as ElementType;\n\n      treeRoot.children.push({\n        node: element,\n        children: [],\n      });\n      flatElements.push(element);\n      idElementMap[element.id] = element;\n      return element;\n    },\n    size: { width, height },\n  };\n}\n"],"names":["describeSize","size","describeElement","elements","sliceLength","item","distanceThreshold","elementByPositionWithElementInfo","treeRoot","position","options","requireStrictDistance","filterPositionElements","assert","matchingElements","dfs","node","_item_attributes","NodeType","child","element","smallest","current","smallestArea","currentArea","distanceToCenter","distance","undefined","point1","point2","Math","samplePageDescription","describeUserPage","context","modelPreferences","opt","screenshotBase64","width","height","imgSize","imageInfoOfBase64","idElementMap","flatElements","treeToList","console","pageDescription","visibleOnly","shouldIncludeDOM","vlLocateMode","contentTree","descriptionOfTree","sizeDescription","idOrIndexId","generateElementByPosition"],"mappings":";;;;;AAWO,SAASA,aAAaC,IAAU;IACrC,OAAO,GAAGA,KAAK,KAAK,CAAC,GAAG,EAAEA,KAAK,MAAM,EAAE;AACzC;AAEO,SAASC,gBACdC,QAAoE;IAEpE,MAAMC,cAAc;IACpB,OAAOD,SACJ,GAAG,CAAC,CAACE,OACJ;YACEA,KAAK,EAAE;YACPA,KAAK,IAAI,CAAC,IAAI;YACdA,KAAK,IAAI,CAAC,GAAG;YACbA,KAAK,IAAI,CAAC,IAAI,GAAGA,KAAK,IAAI,CAAC,KAAK;YAChCA,KAAK,IAAI,CAAC,GAAG,GAAGA,KAAK,IAAI,CAAC,MAAM;YAChCA,KAAK,OAAO,CAAC,MAAM,GAAGD,cAClB,GAAGC,KAAK,OAAO,CAAC,KAAK,CAAC,GAAGD,aAAa,GAAG,CAAC,GAC1CC,KAAK,OAAO;SACjB,CAAC,IAAI,CAAC,OAER,IAAI,CAAC;AACV;AACO,MAAMC,oBAAoB;AAE1B,SAASC,iCACdC,QAAsC,EACtCC,QAGC,EACDC,OAGC;IAED,MAAMC,wBAAwBD,AAAAA,CAAAA,QAAAA,UAAAA,KAAAA,IAAAA,QAAS,qBAAqB,AAAD,KAAK;IAChE,MAAME,yBAAyBF,AAAAA,CAAAA,QAAAA,UAAAA,KAAAA,IAAAA,QAAS,sBAAsB,AAAD,KAAK;IAElEG,OAAO,AAAoB,WAAbJ,UAA0B;IAExC,MAAMK,mBAAkC,EAAE;IAE1C,SAASC,IAAIC,IAAkC;QAC7C,IAAIA,QAAAA,OAAAA,KAAAA,IAAAA,KAAM,IAAI,EAAE;YACd,MAAMX,OAAOW,KAAK,IAAI;YACtB,IACEX,KAAK,IAAI,CAAC,IAAI,IAAII,SAAS,CAAC,IAC5BA,SAAS,CAAC,IAAIJ,KAAK,IAAI,CAAC,IAAI,GAAGA,KAAK,IAAI,CAAC,KAAK,IAC9CA,KAAK,IAAI,CAAC,GAAG,IAAII,SAAS,CAAC,IAC3BA,SAAS,CAAC,IAAIJ,KAAK,IAAI,CAAC,GAAG,GAAGA,KAAK,IAAI,CAAC,MAAM,EAC9C;oBAIIY;gBAHJ,IACE,CACEL,CAAAA,0BACAK,AAAAA,SAAAA,CAAAA,mBAAAA,KAAK,UAAU,AAAD,IAAdA,KAAAA,IAAAA,iBAAiB,QAAQ,AAAD,MAAMC,SAAS,QAAO,KAEhDb,KAAK,SAAS,EAEdS,iBAAiB,IAAI,CAACT;YAE1B;QACF;QAEA,KAAK,MAAMc,SAASH,KAAK,QAAQ,CAC/BD,IAAII;IAER;IAEAJ,IAAIP;IAEJ,IAAIM,AAA4B,MAA5BA,iBAAiB,MAAM,EACzB;IAIF,MAAMM,UAAUN,iBAAiB,MAAM,CAAC,CAACO,UAAUC;QACjD,MAAMC,eAAeF,SAAS,IAAI,CAAC,KAAK,GAAGA,SAAS,IAAI,CAAC,MAAM;QAC/D,MAAMG,cAAcF,QAAQ,IAAI,CAAC,KAAK,GAAGA,QAAQ,IAAI,CAAC,MAAM;QAC5D,OAAOE,cAAcD,eAAeD,UAAUD;IAChD;IAEA,MAAMI,mBAAmBC,SACvB;QAAE,GAAGN,QAAQ,MAAM,CAAC,EAAE;QAAE,GAAGA,QAAQ,MAAM,CAAC,EAAE;IAAC,GAC7CX;IAGF,IAAIE,uBACF,OAAOc,oBAAoBnB,oBAAoBc,UAAUO;IAG3D,OAAOP;AACT;AAEO,SAASM,SACdE,MAAgC,EAChCC,MAAgC;IAEhC,OAAOC,KAAK,IAAI,CAAEF,AAAAA,CAAAA,OAAO,CAAC,GAAGC,OAAO,CAAC,AAAD,KAAM,IAAKD,AAAAA,CAAAA,OAAO,CAAC,GAAGC,OAAO,CAAC,AAAD,KAAM;AACzE;AAEO,MAAME,wBAAwB,CAAC;;;;;;;;;;;;;;AActC,CAAC;AAEM,eAAeC,iBAGpBC,OAAkD,EAClDC,gBAAmC,EACnCC,GAKC;IAED,MAAM,EAAEC,gBAAgB,EAAE,GAAGH;IAC7B,IAAII;IACJ,IAAIC;IAEJ,IAAIL,QAAQ,IAAI,EACb,GAAEI,KAAK,EAAEC,MAAM,EAAE,GAAGL,QAAQ,IAAG;SAC3B;QACL,MAAMM,UAAU,MAAMC,kBAAkBJ;QACvC,GAAEC,KAAK,EAAEC,MAAM,EAAE,GAAGC,OAAM;IAC7B;IAEA,MAAM/B,WAAWyB,QAAQ,IAAI;IAE7B,MAAMQ,eAA4C,CAAC;IACnD,MAAMC,eAA8BC,WAAWnC;IAE/C,IAAI2B,AAAAA,CAAAA,QAAAA,MAAAA,KAAAA,IAAAA,IAAK,WAAW,AAAD,MAAM,QAAQO,aAAa,MAAM,IAAI,MACtDE,QAAQ,IAAI,CACV;IAIJF,aAAa,OAAO,CAAC,CAACtB;QACpBqB,YAAY,CAACrB,QAAQ,EAAE,CAAC,GAAGA;QAC3B,IAAI,AAA2B,WAApBA,QAAQ,OAAO,EACxBqB,YAAY,CAAC,GAAGrB,QAAQ,OAAO,EAAE,CAAC,GAAGA;IAEzC;IAEA,IAAIyB,kBAAkB;IAEtB,MAAMC,cACJX,AAAAA,CAAAA,QAAAA,MAAAA,KAAAA,IAAAA,IAAK,WAAW,AAAD,MAAM,iBAAiB,OAAQA,AAAAA,CAAAA,QAAAA,MAAAA,KAAAA,IAAAA,IAAK,WAAW,AAAD,KAAK;IACpE,MAAMY,mBAAmBZ,AAAAA,CAAAA,QAAAA,MAAAA,KAAAA,IAAAA,IAAK,WAAW,AAAD,KAAK,CAACa,aAAad;IAE3D,IAAIa,kBAAkB;QAEpB,MAAME,cAAc,MAAMC,kBACxB1C,UACA2B,QAAAA,MAAAA,KAAAA,IAAAA,IAAK,kBAAkB,EACvBA,QAAAA,MAAAA,KAAAA,IAAAA,IAAK,oBAAoB,EACzBW;QAIF,MAAMK,kBAAkBnD,aAAa;YAAEqC;YAAOC;QAAO;QACrDO,kBAAkB,CAAC,sBAAsB,EAAEM,gBAAgB,6BAA6B,EAAEF,aAAa;IACzG;IAEA,OAAO;QACL,aAAaJ;QACb,aAAYO,WAAmB;YAC7BvC,OAAO,AAAuB,WAAhBuC,aAA6B;YAC3C,MAAM/C,OAAOoC,YAAY,CAAC,GAAGW,aAAa,CAAC;YAC3C,OAAO/C;QACT;QACA,mBACEI,QAAkC,EAClCR,IAAuC;YAEvC,OAAOM,iCAAiCC,UAAUC;QACpD;QACA,yBAAwBA,QAAkC;YACxD,MAAMW,UAAUiC,0BAA0B5C;YAE1CD,SAAS,QAAQ,CAAC,IAAI,CAAC;gBACrB,MAAMY;gBACN,UAAU,EAAE;YACd;YACAsB,aAAa,IAAI,CAACtB;YAClBqB,YAAY,CAACrB,QAAQ,EAAE,CAAC,GAAGA;YAC3B,OAAOA;QACT;QACA,MAAM;YAAEiB;YAAOC;QAAO;IACxB;AACF"}