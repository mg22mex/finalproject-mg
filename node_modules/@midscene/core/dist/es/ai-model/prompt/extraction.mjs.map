{"version":3,"file":"ai-model/prompt/extraction.mjs","sources":["webpack://@midscene/core/./src/ai-model/prompt/extraction.ts"],"sourcesContent":["import { PromptTemplate } from '@langchain/core/prompts';\nimport type { ResponseFormatJSONSchema } from 'openai/resources/index';\n\nexport function systemPromptToExtract() {\n  return `\nYou are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.\n\nThe user will give you a screenshot, the contents of it (optional), and some data requirements in <DATA_DEMAND>. You need to extract the data according to the <DATA_DEMAND>.\n\nIf a key specifies a JSON data type (such as Number, String, Boolean, Object, Array), ensure the returned value strictly matches that data type.\n\nIf the user provides multiple reference images, please carefully review the reference images with the screenshot and provide the correct answer for <DATA_DEMAND>.\n\nIf the user requests reasons to be provided, please provide the thought field in response, less then 100 words.\n\nReturn in the following JSON format:\n{\n  thought: string, // the thought process of the extraction, less then 100 words, not required by default.\n  data: any, // the extracted data. Make sure both the value and scheme meet the DATA_DEMAND. If you want to write some description in this field, use the same language as the DATA_DEMAND.\n  errors: [], // string[], error message if any\n}\n\n# Example 1\nFor example, if the DATA_DEMAND is:\n\n<DATA_DEMAND>\n{\n  \"name\": \"name shows on the left panel, string\",\n  \"age\": \"age shows on the right panel, number\",\n  \"isAdmin\": \"if the user is admin, boolean\"\n}\n</DATA_DEMAND>\n\nBy viewing the screenshot and page contents, you can extract the following data:\n\n{\n  data: {\n    name: \"John\",\n    age: 30,\n    isAdmin: true\n  },\n}\n\n# Example 2\nIf the DATA_DEMAND is:\n\n<DATA_DEMAND>\nthe todo items list, string[]\n</DATA_DEMAND>\n\nBy viewing the screenshot and page contents, you can extract the following data:\n\n{\n  data: [\"todo 1\", \"todo 2\", \"todo 3\"],\n}\n\n# Example 3\nIf the DATA_DEMAND is:\n\n<DATA_DEMAND>\nthe page title, string\n</DATA_DEMAND>\n\nBy viewing the screenshot and page contents, you can extract the following data:\n\n{\n  data: \"todo list\",\n}\n\n# Example 4\nIf the DATA_DEMAND is:\n\n<DATA_DEMAND>\n{\n  \"result\": \"Boolean, is it currently the SMS page?\"\n}\n</DATA_DEMAND>\n\nBy viewing the screenshot and page contents, you can extract the following data:\n\n{\n  data: { result: true },\n}\n`;\n}\n\nexport const extractDataQueryPrompt = async (\n  pageDescription: string,\n  dataQuery: string | Record<string, string>,\n) => {\n  let dataQueryText = '';\n  if (typeof dataQuery === 'string') {\n    dataQueryText = dataQuery;\n  } else {\n    dataQueryText = JSON.stringify(dataQuery, null, 2);\n  }\n  const extractDataPrompt = new PromptTemplate({\n    template: `\n<PageDescription>\n{pageDescription}\n</PageDescription>\n\n<DATA_DEMAND>\n{dataQuery}\n</DATA_DEMAND>\n  `,\n    inputVariables: ['pageDescription', 'dataQuery'],\n  });\n\n  return await extractDataPrompt.format({\n    pageDescription,\n    dataQuery: dataQueryText,\n  });\n};\n\nexport const extractDataSchema: ResponseFormatJSONSchema = {\n  type: 'json_schema',\n  json_schema: {\n    name: 'extract_data',\n    strict: true,\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'object',\n          description: 'The extracted data',\n        },\n        errors: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n          description: 'Error messages, if any',\n        },\n      },\n      required: ['data', 'errors'],\n      additionalProperties: false,\n    },\n  },\n};\n"],"names":["systemPromptToExtract","extractDataQueryPrompt","pageDescription","dataQuery","dataQueryText","JSON","extractDataPrompt","PromptTemplate","extractDataSchema"],"mappings":";AAGO,SAASA;IACd,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EV,CAAC;AACD;AAEO,MAAMC,yBAAyB,OACpCC,iBACAC;IAEA,IAAIC,gBAAgB;IAElBA,gBADE,AAAqB,YAArB,OAAOD,YACOA,YAEAE,KAAK,SAAS,CAACF,WAAW,MAAM;IAElD,MAAMG,oBAAoB,IAAIC,eAAe;QAC3C,UAAU,CAAC;;;;;;;;EAQb,CAAC;QACC,gBAAgB;YAAC;YAAmB;SAAY;IAClD;IAEA,OAAO,MAAMD,kBAAkB,MAAM,CAAC;QACpCJ;QACA,WAAWE;IACb;AACF;AAEO,MAAMI,oBAA8C;IACzD,MAAM;IACN,aAAa;QACX,MAAM;QACN,QAAQ;QACR,QAAQ;YACN,MAAM;YACN,YAAY;gBACV,MAAM;oBACJ,MAAM;oBACN,aAAa;gBACf;gBACA,QAAQ;oBACN,MAAM;oBACN,OAAO;wBACL,MAAM;oBACR;oBACA,aAAa;gBACf;YACF;YACA,UAAU;gBAAC;gBAAQ;aAAS;YAC5B,sBAAsB;QACxB;IACF;AACF"}