import type { DeviceAction } from '../index';
import { z } from '../index';
import type { ElementNode } from '@midscene/shared/extractor';
import type { Size, UIContext } from '../types';
export declare abstract class AbstractInterface {
    abstract interfaceType: string;
    abstract describe?(): string;
    abstract getElementsNodeTree(): Promise<ElementNode>;
    abstract url(): string | Promise<string>;
    abstract screenshotBase64(): Promise<string>;
    abstract size(): Promise<Size>;
    abstract actionSpace(): DeviceAction[] | Promise<DeviceAction[]>;
    abstract destroy(): Promise<void>;
    abstract evaluateJavaScript?<T = any>(script: string): Promise<T>;
    abstract beforeAction?(): Promise<void>;
    abstract getContext?(): Promise<UIContext>;
}
export declare const defineAction: <TSchema extends z.ZodType>(config: {
    name: string;
    description: string;
    interfaceAlias?: string;
    paramSchema: TSchema;
    call: (param: z.infer<TSchema>) => Promise<void>;
} & Partial<Omit<DeviceAction<z.infer<TSchema>>, "name" | "description" | "interfaceAlias" | "paramSchema" | "call">>) => DeviceAction<z.infer<TSchema>>;
export declare const actionTapParamSchema: z.ZodObject<{
    locate: z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}>;
export type ActionTapParam = z.infer<typeof actionTapParamSchema>;
export declare const defineActionTap: (call: (param: ActionTapParam) => Promise<void>) => DeviceAction<ActionTapParam>;
export declare const actionRightClickParamSchema: z.ZodObject<{
    locate: z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}>;
export type ActionRightClickParam = z.infer<typeof actionRightClickParamSchema>;
export declare const defineActionRightClick: (call: (param: ActionRightClickParam) => Promise<void>) => DeviceAction<ActionRightClickParam>;
export declare const actionHoverParamSchema: z.ZodObject<{
    locate: z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}>;
export type ActionHoverParam = z.infer<typeof actionHoverParamSchema>;
export declare const defineActionHover: (call: (param: ActionHoverParam) => Promise<void>) => DeviceAction<ActionHoverParam>;
export declare const actionInputParamSchema: z.ZodObject<{
    value: z.ZodString;
    locate: z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
    value: string;
}, {
    locate: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
    value: string;
}>;
export type ActionInputParam = z.infer<typeof actionInputParamSchema>;
export declare const defineActionInput: (call: (param: ActionInputParam) => Promise<void>) => DeviceAction<ActionInputParam>;
export declare const actionKeyboardPressParamSchema: z.ZodObject<{
    locate: z.ZodOptional<z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>>;
    keyName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    keyName: string;
    locate?: z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    keyName: string;
    locate?: z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>;
export type ActionKeyboardPressParam = z.infer<typeof actionKeyboardPressParamSchema>;
export declare const defineActionKeyboardPress: (call: (param: ActionKeyboardPressParam) => Promise<void>) => DeviceAction<ActionKeyboardPressParam>;
export declare const actionScrollParamSchema: z.ZodObject<{
    direction: z.ZodDefault<z.ZodEnum<["down", "up", "right", "left"]>>;
    scrollType: z.ZodDefault<z.ZodEnum<["once", "untilBottom", "untilTop", "untilRight", "untilLeft"]>>;
    distance: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    locate: z.ZodOptional<z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "strip", z.ZodTypeAny, {
    direction: "left" | "right" | "down" | "up";
    scrollType: "once" | "untilBottom" | "untilTop" | "untilRight" | "untilLeft";
    locate?: z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    distance?: number | null | undefined;
}, {
    locate?: z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    direction?: "left" | "right" | "down" | "up" | undefined;
    scrollType?: "once" | "untilBottom" | "untilTop" | "untilRight" | "untilLeft" | undefined;
    distance?: number | null | undefined;
}>;
export type ActionScrollParam = z.infer<typeof actionScrollParamSchema>;
export declare const defineActionScroll: (call: (param: ActionScrollParam) => Promise<void>) => DeviceAction<ActionScrollParam>;
export declare const actionDragAndDropParamSchema: z.ZodObject<{
    from: z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>;
    to: z.ZodObject<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        midscene_location_field_flag: z.ZodLiteral<true>;
        prompt: z.ZodUnion<[z.ZodString, z.ZodIntersection<z.ZodObject<{
            prompt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            prompt: string;
        }, {
            prompt: string;
        }>, z.ZodObject<{
            images: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                url: string;
            }, {
                name: string;
                url: string;
            }>, "many">>>;
            convertHttpImage2Base64: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }, {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        }>>]>;
        deepThink: z.ZodOptional<z.ZodBoolean>;
        cacheable: z.ZodOptional<z.ZodBoolean>;
        xpath: z.ZodOptional<z.ZodBoolean>;
        center: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        rect: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
            left: z.ZodNumber;
            top: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            left: number;
            top: number;
        }, {
            left: number;
            top: number;
        }>, z.ZodObject<{
            width: z.ZodNumber;
            height: z.ZodNumber;
            dpr: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }, {
            width: number;
            height: number;
            dpr?: number | undefined;
        }>>, z.ZodObject<{
            zoom: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            zoom?: number | undefined;
        }, {
            zoom?: number | undefined;
        }>>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    from: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
    to: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    from: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
    to: {
        prompt: string | ({
            prompt: string;
        } & {
            images?: {
                name: string;
                url: string;
            }[] | undefined;
            convertHttpImage2Base64?: boolean | undefined;
        });
        midscene_location_field_flag: true;
        center: [number, number];
        rect: {
            left: number;
            top: number;
        } & {
            width: number;
            height: number;
            dpr?: number | undefined;
        } & {
            zoom?: number | undefined;
        };
        cacheable?: boolean | undefined;
        deepThink?: boolean | undefined;
        xpath?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}>;
export type ActionDragAndDropParam = z.infer<typeof actionDragAndDropParamSchema>;
export declare const defineActionDragAndDrop: (call: (param: ActionDragAndDropParam) => Promise<void>) => DeviceAction<ActionDragAndDropParam>;
export type { DeviceAction } from '../types';
