import { type ChatCompletionMessageParam } from '../ai-model';
import type { AbstractInterface } from '../device';
import { type DetailedLocateParam, type ExecutionTaskApply, type ExecutionTaskProgressOptions, Executor, type Insight, type InsightExtractOption, type InsightExtractParam, type MidsceneYamlFlowItem, type PlanningAction, type PlanningActionParamWaitFor, type PlanningLocateParam, type TMultimodalPrompt, type TUserPrompt } from '../index';
import type { TaskCache } from './task-cache';
interface ExecutionResult<OutputType = any> {
    output: OutputType;
    thought?: string;
    executor: Executor;
}
export declare function locatePlanForLocate(param: string | DetailedLocateParam): PlanningAction<PlanningLocateParam>;
export declare class TaskExecutor {
    interface: AbstractInterface;
    insight: Insight;
    taskCache?: TaskCache;
    conversationHistory: ChatCompletionMessageParam[];
    onTaskStartCallback?: ExecutionTaskProgressOptions['onTaskStart'];
    get page(): AbstractInterface;
    constructor(interfaceInstance: AbstractInterface, insight: Insight, opts: {
        taskCache?: TaskCache;
        onTaskStart?: ExecutionTaskProgressOptions['onTaskStart'];
    });
    private recordScreenshot;
    private getElementXpath;
    private prependExecutorWithScreenshot;
    convertPlanToExecutable(plans: PlanningAction[]): Promise<{
        tasks: ExecutionTaskApply<any, any, any, any>[];
    }>;
    private setupPlanningContext;
    loadYamlFlowAsPlanning(userInstruction: string, yamlString: string): Promise<{
        executor: Executor;
    }>;
    private planningTaskFromPrompt;
    private planningTaskToGoal;
    runPlans(title: string, plans: PlanningAction[]): Promise<ExecutionResult>;
    action(userPrompt: string, actionContext?: string): Promise<ExecutionResult<{
        yamlFlow?: MidsceneYamlFlowItem[];
    } | undefined>>;
    actionToGoal(userPrompt: string): Promise<ExecutionResult<{
        yamlFlow?: MidsceneYamlFlowItem[];
    } | undefined>>;
    private createTypeQueryTask;
    createTypeQueryExecution<T>(type: 'Query' | 'Boolean' | 'Number' | 'String' | 'Assert', demand: InsightExtractParam, opt?: InsightExtractOption, multimodalPrompt?: TMultimodalPrompt): Promise<ExecutionResult<T>>;
    assert(assertion: TUserPrompt, opt?: InsightExtractOption): Promise<ExecutionResult<boolean>>;
    /**
     * Append a message to the conversation history
     * For user messages with images:
     * - Keep max 4 user image messages in history
     * - Remove oldest user image message when limit reached
     * For assistant messages:
     * - Simply append to history
     * @param conversationHistory Message to append
     */
    private appendConversationHistory;
    private appendErrorPlan;
    waitFor(assertion: TUserPrompt, opt: PlanningActionParamWaitFor): Promise<ExecutionResult<void>>;
}
export {};
