import type { StreamingAIResponse, StreamingCodeGenerationOptions } from '../../types';
export interface EventCounts {
    navigation: number;
    click: number;
    input: number;
    scroll: number;
    total: number;
}
export interface InputDescription {
    description: string;
    value: string;
}
export interface ProcessedEvent {
    type: string;
    timestamp: number;
    url?: string;
    title?: string;
    elementDescription?: string;
    value?: string;
    pageInfo?: any;
    elementRect?: any;
}
export interface EventSummary {
    testName: string;
    startUrl: string;
    eventCounts: EventCounts;
    urls: string[];
    clickDescriptions: string[];
    inputDescriptions: InputDescription[];
    events: ProcessedEvent[];
}
export interface ChromeRecordedEvent {
    type: string;
    timestamp: number;
    url?: string;
    title?: string;
    elementDescription?: string;
    value?: string;
    pageInfo?: any;
    elementRect?: any;
    screenshotBefore?: string;
    screenshotAfter?: string;
    screenshotWithBox?: string;
}
export interface YamlGenerationOptions {
    testName?: string;
    includeTimestamps?: boolean;
    maxScreenshots?: number;
    description?: string;
}
export interface FilteredEvents {
    navigationEvents: ChromeRecordedEvent[];
    clickEvents: ChromeRecordedEvent[];
    inputEvents: ChromeRecordedEvent[];
    scrollEvents: ChromeRecordedEvent[];
}
/**
 * Get screenshots from events for LLM context
 */
export declare const getScreenshotsForLLM: (events: ChromeRecordedEvent[], maxScreenshots?: number) => string[];
/**
 * Filter events by type for easier processing
 */
export declare const filterEventsByType: (events: ChromeRecordedEvent[]) => FilteredEvents;
/**
 * Create event counts summary
 */
export declare const createEventCounts: (filteredEvents: FilteredEvents, totalEvents: number) => EventCounts;
/**
 * Extract input descriptions from input events
 */
export declare const extractInputDescriptions: (inputEvents: ChromeRecordedEvent[]) => InputDescription[];
/**
 * Process events for LLM consumption
 */
export declare const processEventsForLLM: (events: ChromeRecordedEvent[]) => ProcessedEvent[];
/**
 * Prepare comprehensive event summary for LLM
 */
export declare const prepareEventSummary: (events: ChromeRecordedEvent[], options?: {
    testName?: string;
    maxScreenshots?: number;
}) => EventSummary;
/**
 * Create message content for LLM with optional screenshots
 */
export declare const createMessageContent: (promptText: string, screenshots?: string[], includeScreenshots?: boolean) => any[];
/**
 * Validate events before processing
 */
export declare const validateEvents: (events: ChromeRecordedEvent[]) => void;
/**
 * Generates YAML test configuration from recorded events using AI
 */
export declare const generateYamlTest: (events: ChromeRecordedEvent[], options?: YamlGenerationOptions) => Promise<string>;
/**
 * Generates YAML test configuration from recorded events using AI with streaming support
 */
export declare const generateYamlTestStream: (events: ChromeRecordedEvent[], options?: YamlGenerationOptions & StreamingCodeGenerationOptions) => Promise<StreamingAIResponse>;
