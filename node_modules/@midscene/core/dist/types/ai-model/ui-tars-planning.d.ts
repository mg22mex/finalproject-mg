import type { AIUsageInfo, MidsceneYamlFlowItem, PlanningAction, Size } from '../types';
import { type IModelPreferences } from '@midscene/shared/env';
import { actionParser } from '@ui-tars/action-parser';
import type { ChatCompletionMessageParam } from 'openai/resources/index';
type ActionType = 'click' | 'drag' | 'type' | 'hotkey' | 'finished' | 'scroll' | 'wait';
export declare function vlmPlanning(options: {
    userInstruction: string;
    conversationHistory: ChatCompletionMessageParam[];
    size: {
        width: number;
        height: number;
    };
    modelPreferences: IModelPreferences;
}): Promise<{
    actions: PlanningAction<any>[];
    actionsFromModel: ReturnType<typeof actionParser>['parsed'];
    action_summary: string;
    yamlFlow?: MidsceneYamlFlowItem[];
    usage?: AIUsageInfo;
    rawResponse?: string;
}>;
interface BaseAction {
    action_type: ActionType;
    action_inputs: Record<string, any>;
    reflection: string | null;
    thought: string | null;
}
interface ClickAction extends BaseAction {
    action_type: 'click';
    action_inputs: {
        start_box: string;
    };
}
interface DragAction extends BaseAction {
    action_type: 'drag';
    action_inputs: {
        start_box: string;
        end_box: string;
    };
}
interface WaitAction extends BaseAction {
    action_type: 'wait';
    action_inputs: {
        time: string;
    };
}
interface TypeAction extends BaseAction {
    action_type: 'type';
    action_inputs: {
        content: string;
    };
}
interface HotkeyAction extends BaseAction {
    action_type: 'hotkey';
    action_inputs: {
        key: string;
    };
}
interface ScrollAction extends BaseAction {
    action_type: 'scroll';
    action_inputs: {
        direction: 'up' | 'down';
    };
}
interface FinishedAction extends BaseAction {
    action_type: 'finished';
    action_inputs: Record<string, never>;
}
export type Action = ClickAction | DragAction | TypeAction | HotkeyAction | ScrollAction | FinishedAction | WaitAction;
export declare function resizeImageForUiTars(imageBase64: string, size: Size, modelPreferences: IModelPreferences): Promise<string>;
export {};
