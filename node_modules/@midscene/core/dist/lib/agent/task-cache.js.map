{"version":3,"file":"agent/task-cache.js","sources":["webpack://@midscene/core/webpack/runtime/compat_get_default_export","webpack://@midscene/core/webpack/runtime/define_property_getters","webpack://@midscene/core/webpack/runtime/has_own_property","webpack://@midscene/core/webpack/runtime/make_namespace_object","webpack://@midscene/core/./src/agent/task-cache.ts"],"sourcesContent":["// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import assert from 'node:assert';\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport { isDeepStrictEqual } from 'node:util';\nimport type { TUserPrompt } from '@/index';\nimport { getMidsceneRunSubDir } from '@midscene/shared/common';\nimport {\n  MIDSCENE_CACHE_MAX_FILENAME_LENGTH,\n  globalConfigManager,\n} from '@midscene/shared/env';\nimport { getDebug } from '@midscene/shared/logger';\nimport { ifInBrowser, ifInWorker } from '@midscene/shared/utils';\nimport { generateHashId } from '@midscene/shared/utils';\nimport { replaceIllegalPathCharsAndSpace } from '@midscene/shared/utils';\nimport yaml from 'js-yaml';\nimport semver from 'semver';\nimport { getMidsceneVersion } from './utils';\n\nconst DEFAULT_CACHE_MAX_FILENAME_LENGTH = 200;\n\nexport const debug = getDebug('cache');\n\nexport interface PlanningCache {\n  type: 'plan';\n  prompt: string;\n  yamlWorkflow: string;\n}\n\nexport interface LocateCache {\n  type: 'locate';\n  prompt: TUserPrompt;\n  xpaths: string[];\n}\n\nexport interface MatchCacheResult<T extends PlanningCache | LocateCache> {\n  cacheContent: T;\n  updateFn: (cb: (cache: T) => void) => void;\n}\n\nexport type CacheFileContent = {\n  midsceneVersion: string;\n  cacheId: string;\n  caches: Array<PlanningCache | LocateCache>;\n};\n\nconst lowestSupportedMidsceneVersion = '0.16.10';\nexport const cacheFileExt = '.cache.yaml';\n\nexport class TaskCache {\n  cacheId: string;\n\n  cacheFilePath?: string;\n\n  cache: CacheFileContent;\n\n  isCacheResultUsed: boolean; // a flag to indicate if the cache result should be used\n  cacheOriginalLength: number;\n\n  private matchedCacheIndices: Set<string> = new Set(); // Track matched records\n\n  constructor(\n    cacheId: string,\n    isCacheResultUsed: boolean,\n    cacheFilePath?: string,\n  ) {\n    assert(cacheId, 'cacheId is required');\n    let safeCacheId = replaceIllegalPathCharsAndSpace(cacheId);\n    const cacheMaxFilenameLength =\n      globalConfigManager.getEnvConfigInNumber(\n        MIDSCENE_CACHE_MAX_FILENAME_LENGTH,\n      ) || DEFAULT_CACHE_MAX_FILENAME_LENGTH;\n    if (Buffer.byteLength(safeCacheId, 'utf8') > cacheMaxFilenameLength) {\n      const prefix = safeCacheId.slice(0, 32);\n      const hash = generateHashId(undefined, safeCacheId);\n      safeCacheId = `${prefix}-${hash}`;\n    }\n    this.cacheId = safeCacheId;\n\n    this.cacheFilePath =\n      ifInBrowser || ifInWorker\n        ? undefined\n        : cacheFilePath ||\n          join(getMidsceneRunSubDir('cache'), `${this.cacheId}${cacheFileExt}`);\n    this.isCacheResultUsed = isCacheResultUsed;\n\n    let cacheContent;\n    if (this.cacheFilePath) {\n      cacheContent = this.loadCacheFromFile();\n    }\n    if (!cacheContent) {\n      cacheContent = {\n        midsceneVersion: getMidsceneVersion(),\n        cacheId: this.cacheId,\n        caches: [],\n      };\n    }\n    this.cache = cacheContent;\n    this.cacheOriginalLength = this.cache.caches.length;\n  }\n\n  matchCache(\n    prompt: TUserPrompt,\n    type: 'plan' | 'locate',\n  ): MatchCacheResult<PlanningCache | LocateCache> | undefined {\n    // Find the first unused matching cache\n    for (let i = 0; i < this.cacheOriginalLength; i++) {\n      const item = this.cache.caches[i];\n      const promptStr =\n        typeof prompt === 'string' ? prompt : JSON.stringify(prompt);\n      const key = `${type}:${promptStr}:${i}`;\n      if (\n        item.type === type &&\n        isDeepStrictEqual(item.prompt, prompt) &&\n        !this.matchedCacheIndices.has(key)\n      ) {\n        this.matchedCacheIndices.add(key);\n        debug(\n          'cache found and marked as used, type: %s, prompt: %s, index: %d',\n          type,\n          prompt,\n          i,\n        );\n        return {\n          cacheContent: item,\n          updateFn: (cb: (cache: PlanningCache | LocateCache) => void) => {\n            debug(\n              'will call updateFn to update cache, type: %s, prompt: %s, index: %d',\n              type,\n              prompt,\n              i,\n            );\n            cb(item);\n            debug(\n              'cache updated, will flush to file, type: %s, prompt: %s, index: %d',\n              type,\n              prompt,\n              i,\n            );\n            this.flushCacheToFile();\n          },\n        };\n      }\n    }\n    debug('no unused cache found, type: %s, prompt: %s', type, prompt);\n    return undefined;\n  }\n\n  matchPlanCache(prompt: string): MatchCacheResult<PlanningCache> | undefined {\n    return this.matchCache(prompt, 'plan') as\n      | MatchCacheResult<PlanningCache>\n      | undefined;\n  }\n\n  matchLocateCache(\n    prompt: TUserPrompt,\n  ): MatchCacheResult<LocateCache> | undefined {\n    return this.matchCache(prompt, 'locate') as\n      | MatchCacheResult<LocateCache>\n      | undefined;\n  }\n\n  appendCache(cache: PlanningCache | LocateCache) {\n    debug('will append cache', cache);\n    this.cache.caches.push(cache);\n    this.flushCacheToFile();\n  }\n\n  loadCacheFromFile() {\n    const cacheFile = this.cacheFilePath;\n    assert(cacheFile, 'cache file path is required');\n\n    if (!existsSync(cacheFile)) {\n      debug('no cache file found, path: %s', cacheFile);\n      return undefined;\n    }\n\n    // detect old cache file\n    const jsonTypeCacheFile = cacheFile.replace(cacheFileExt, '.json');\n    if (existsSync(jsonTypeCacheFile) && this.isCacheResultUsed) {\n      console.warn(\n        `An outdated cache file from an earlier version of Midscene has been detected. Since version 0.17, we have implemented an improved caching strategy. Please delete the old file located at: ${jsonTypeCacheFile}.`,\n      );\n      return undefined;\n    }\n\n    try {\n      const data = readFileSync(cacheFile, 'utf8');\n      const jsonData = yaml.load(data) as CacheFileContent;\n\n      const version = getMidsceneVersion();\n      if (!version) {\n        debug('no midscene version info, will not read cache from file');\n        return undefined;\n      }\n\n      if (\n        semver.lt(jsonData.midsceneVersion, lowestSupportedMidsceneVersion) &&\n        !jsonData.midsceneVersion.includes('beta') // for internal test\n      ) {\n        console.warn(\n          `You are using an old version of Midscene cache file, and we cannot match any info from it. Starting from Midscene v0.17, we changed our strategy to use xpath for cache info, providing better performance.\\nPlease delete the existing cache and rebuild it. Sorry for the inconvenience.\\ncache file: ${cacheFile}`,\n        );\n        return undefined;\n      }\n\n      debug(\n        'cache loaded from file, path: %s, cache version: %s, record length: %s',\n        cacheFile,\n        jsonData.midsceneVersion,\n        jsonData.caches.length,\n      );\n      jsonData.midsceneVersion = getMidsceneVersion(); // update the version\n      return jsonData;\n    } catch (err) {\n      debug(\n        'cache file exists but load failed, path: %s, error: %s',\n        cacheFile,\n        err,\n      );\n      return undefined;\n    }\n  }\n\n  flushCacheToFile() {\n    const version = getMidsceneVersion();\n    if (!version) {\n      debug('no midscene version info, will not write cache to file');\n      return;\n    }\n\n    if (!this.cacheFilePath) {\n      debug('no cache file path, will not write cache to file');\n      return;\n    }\n\n    try {\n      const dir = dirname(this.cacheFilePath);\n      if (!existsSync(dir)) {\n        mkdirSync(dir, { recursive: true });\n        debug('created cache directory: %s', dir);\n      }\n\n      // Sort caches to ensure plan entries come before locate entries for better readability\n      const sortedCaches = [...this.cache.caches].sort((a, b) => {\n        if (a.type === 'plan' && b.type === 'locate') return -1;\n        if (a.type === 'locate' && b.type === 'plan') return 1;\n        return 0;\n      });\n\n      const cacheToWrite = {\n        ...this.cache,\n        caches: sortedCaches,\n      };\n\n      const yamlData = yaml.dump(cacheToWrite);\n      writeFileSync(this.cacheFilePath, yamlData);\n      debug('cache flushed to file: %s', this.cacheFilePath);\n    } catch (err) {\n      debug(\n        'write cache to file failed, path: %s, error: %s',\n        this.cacheFilePath,\n        err,\n      );\n    }\n  }\n\n  updateOrAppendCacheRecord(\n    newRecord: PlanningCache | LocateCache,\n    cachedRecord?: MatchCacheResult<PlanningCache | LocateCache>,\n  ) {\n    if (cachedRecord) {\n      // update existing record\n      if (newRecord.type === 'plan') {\n        cachedRecord.updateFn((cache) => {\n          (cache as PlanningCache).yamlWorkflow = newRecord.yamlWorkflow;\n        });\n      } else {\n        cachedRecord.updateFn((cache) => {\n          (cache as LocateCache).xpaths = newRecord.xpaths;\n        });\n      }\n    } else {\n      this.appendCache(newRecord);\n    }\n  }\n}\n"],"names":["__webpack_require__","module","getter","definition","key","Object","obj","prop","Symbol","DEFAULT_CACHE_MAX_FILENAME_LENGTH","debug","getDebug","lowestSupportedMidsceneVersion","cacheFileExt","TaskCache","prompt","type","i","item","promptStr","JSON","isDeepStrictEqual","cb","cache","cacheFile","assert","existsSync","jsonTypeCacheFile","console","data","readFileSync","jsonData","yaml","version","getMidsceneVersion","semver","err","dir","dirname","mkdirSync","sortedCaches","a","b","cacheToWrite","yamlData","writeFileSync","newRecord","cachedRecord","cacheId","isCacheResultUsed","cacheFilePath","Set","safeCacheId","replaceIllegalPathCharsAndSpace","cacheMaxFilenameLength","globalConfigManager","MIDSCENE_CACHE_MAX_FILENAME_LENGTH","Buffer","prefix","hash","generateHashId","undefined","ifInBrowser","ifInWorker","join","getMidsceneRunSubDir","cacheContent"],"mappings":"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"}