{"version":3,"file":"utils.js","sources":["webpack://@midscene/core/webpack/runtime/define_property_getters","webpack://@midscene/core/webpack/runtime/has_own_property","webpack://@midscene/core/webpack/runtime/make_namespace_object","webpack://@midscene/core/./src/utils.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { execSync } from 'node:child_process';\nimport * as fs from 'node:fs';\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';\nimport { tmpdir } from 'node:os';\nimport * as path from 'node:path';\nimport {\n  defaultRunDirName,\n  getMidsceneRunSubDir,\n} from '@midscene/shared/common';\nimport {\n  MIDSCENE_DEBUG_MODE,\n  getUploadTestServerUrl,\n} from '@midscene/shared/env';\nimport { getRunningPkgInfo } from '@midscene/shared/node';\nimport { assert, logMsg } from '@midscene/shared/utils';\nimport {\n  escapeScriptTag,\n  ifInBrowser,\n  ifInWorker,\n  uuid,\n} from '@midscene/shared/utils';\nimport type { Rect, ReportDumpWithAttributes } from './types';\n\nlet logEnvReady = false;\n\nexport const groupedActionDumpFileExt = 'web-dump.json';\n\nconst reportInitializedMap = new Map<string, boolean>();\n\ndeclare const __DEV_REPORT_PATH__: string;\n\nfunction getReportTpl() {\n  if (typeof __DEV_REPORT_PATH__ === 'string' && __DEV_REPORT_PATH__) {\n    return fs.readFileSync(__DEV_REPORT_PATH__, 'utf-8');\n  }\n  const reportTpl = 'REPLACE_ME_WITH_REPORT_HTML';\n\n  return reportTpl;\n}\n\n/**\n * high performance, insert script before </html> in HTML file\n * only truncate and append, no temporary file\n */\nexport function insertScriptBeforeClosingHtml(\n  filePath: string,\n  scriptContent: string,\n): void {\n  const htmlEndTag = '</html>';\n  const stat = fs.statSync(filePath);\n\n  const readSize = Math.min(stat.size, 4096);\n  const start = Math.max(0, stat.size - readSize);\n  const buffer = Buffer.alloc(stat.size - start);\n  const fd = fs.openSync(filePath, 'r');\n  fs.readSync(fd, buffer, 0, buffer.length, start);\n  fs.closeSync(fd);\n\n  const tailStr = buffer.toString('utf8');\n  const htmlEndIdx = tailStr.lastIndexOf(htmlEndTag);\n  if (htmlEndIdx === -1) {\n    throw new Error(`No </html> found in fileï¼š${filePath}`);\n  }\n\n  // calculate the correct byte position: char position to byte position\n  const beforeHtmlInTail = tailStr.slice(0, htmlEndIdx);\n  const htmlEndPos = start + Buffer.byteLength(beforeHtmlInTail, 'utf8');\n\n  // truncate to </html> before\n  fs.truncateSync(filePath, htmlEndPos);\n  // append script and </html>\n  fs.appendFileSync(filePath, `${scriptContent}\\n${htmlEndTag}\\n`);\n}\n\nexport function reportHTMLContent(\n  dumpData: string | ReportDumpWithAttributes,\n  reportPath?: string,\n  appendReport?: boolean,\n): string {\n  const tpl = getReportTpl();\n\n  if (!tpl) {\n    console.warn('reportTpl is not set, will not write report');\n    return '';\n  }\n\n  // if reportPath is set, it means we are in write to file mode\n  const writeToFile = reportPath && !ifInBrowser;\n  let dumpContent = '';\n\n  if (typeof dumpData === 'string') {\n    // do not use template string here, will cause bundle error\n    dumpContent =\n      // biome-ignore lint/style/useTemplate: <explanation>\n      '<script type=\"midscene_web_dump\" type=\"application/json\">\\n' +\n      escapeScriptTag(dumpData) +\n      '\\n</script>';\n  } else {\n    const { dumpString, attributes } = dumpData;\n    const attributesArr = Object.keys(attributes || {}).map((key) => {\n      return `${key}=\"${encodeURIComponent(attributes![key])}\"`;\n    });\n\n    dumpContent =\n      // do not use template string here, will cause bundle error\n      // biome-ignore lint/style/useTemplate: <explanation>\n      '<script type=\"midscene_web_dump\" type=\"application/json\" ' +\n      attributesArr.join(' ') +\n      '>\\n' +\n      escapeScriptTag(dumpString) +\n      '\\n</script>';\n  }\n\n  if (writeToFile) {\n    if (!appendReport) {\n      writeFileSync(reportPath!, tpl + dumpContent, { flag: 'w' });\n      return reportPath!;\n    }\n\n    if (!reportInitializedMap.get(reportPath!)) {\n      writeFileSync(reportPath!, tpl, { flag: 'w' });\n      reportInitializedMap.set(reportPath!, true);\n    }\n\n    insertScriptBeforeClosingHtml(reportPath!, dumpContent);\n    return reportPath!;\n  }\n\n  return tpl + dumpContent;\n}\n\nexport function writeDumpReport(\n  fileName: string,\n  dumpData: string | ReportDumpWithAttributes,\n  appendReport?: boolean,\n): string | null {\n  if (ifInBrowser || ifInWorker) {\n    console.log('will not write report in browser');\n    return null;\n  }\n\n  const reportPath = path.join(\n    getMidsceneRunSubDir('report'),\n    `${fileName}.html`,\n  );\n\n  reportHTMLContent(dumpData, reportPath, appendReport);\n\n  if (process.env.MIDSCENE_DEBUG_LOG_JSON) {\n    const jsonPath = `${reportPath}.json`;\n    let data;\n\n    if (typeof dumpData === 'string') {\n      data = JSON.parse(dumpData) as ReportDumpWithAttributes;\n    } else {\n      data = dumpData;\n    }\n\n    writeFileSync(jsonPath, JSON.stringify(data, null, 2), {\n      flag: appendReport ? 'a' : 'w',\n    });\n\n    logMsg(`Midscene - dump file written: ${jsonPath}`);\n  }\n\n  return reportPath;\n}\n\nexport function writeLogFile(opts: {\n  fileName: string;\n  fileExt: string;\n  fileContent: string;\n  type: 'dump' | 'cache' | 'report' | 'tmp';\n  generateReport?: boolean;\n  appendReport?: boolean;\n}) {\n  if (ifInBrowser || ifInWorker) {\n    return '/mock/report.html';\n  }\n  const { fileName, fileExt, fileContent, type = 'dump' } = opts;\n  const targetDir = getMidsceneRunSubDir(type);\n  // Ensure directory exists\n  if (!logEnvReady) {\n    assert(targetDir, 'logDir should be set before writing dump file');\n\n    // gitIgnore in the parent directory\n    const gitIgnorePath = path.join(targetDir, '../../.gitignore');\n    const gitPath = path.join(targetDir, '../../.git');\n    let gitIgnoreContent = '';\n\n    if (existsSync(gitPath)) {\n      // if the git path exists, we need to add the log folder to the git ignore file\n      if (existsSync(gitIgnorePath)) {\n        gitIgnoreContent = readFileSync(gitIgnorePath, 'utf-8');\n      }\n\n      // ignore the log folder\n      if (!gitIgnoreContent.includes(`${defaultRunDirName}/`)) {\n        writeFileSync(\n          gitIgnorePath,\n          `${gitIgnoreContent}\\n# Midscene.js dump files\\n${defaultRunDirName}/dump\\n${defaultRunDirName}/report\\n${defaultRunDirName}/tmp\\n${defaultRunDirName}/log\\n`,\n          'utf-8',\n        );\n      }\n    }\n\n    logEnvReady = true;\n  }\n\n  const filePath = path.join(targetDir, `${fileName}.${fileExt}`);\n\n  if (type !== 'dump') {\n    // do not write dump file any more\n    writeFileSync(filePath, fileContent);\n  }\n\n  if (opts?.generateReport) {\n    return writeDumpReport(fileName, fileContent, opts.appendReport);\n  }\n\n  return filePath;\n}\n\nexport function getTmpDir(): string | null {\n  try {\n    const runningPkgInfo = getRunningPkgInfo();\n    if (!runningPkgInfo) {\n      return null;\n    }\n    const { name } = runningPkgInfo;\n    const tmpPath = path.join(tmpdir(), name);\n    mkdirSync(tmpPath, { recursive: true });\n    return tmpPath;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function getTmpFile(fileExtWithoutDot: string): string | null {\n  if (ifInBrowser || ifInWorker) {\n    return null;\n  }\n  const tmpDir = getTmpDir();\n  const filename = `${uuid()}.${fileExtWithoutDot}`;\n  return path.join(tmpDir!, filename);\n}\n\nexport function overlapped(container: Rect, target: Rect) {\n  // container and the target have some part overlapped\n  return (\n    container.left < target.left + target.width &&\n    container.left + container.width > target.left &&\n    container.top < target.top + target.height &&\n    container.top + container.height > target.top\n  );\n}\n\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function replacerForPageObject(key: string, value: any) {\n  if (value && value.constructor?.name === 'Page') {\n    return '[Page object]';\n  }\n  if (value && value.constructor?.name === 'Browser') {\n    return '[Browser object]';\n  }\n  return value;\n}\n\nexport function stringifyDumpData(data: any, indents?: number) {\n  return JSON.stringify(data, replacerForPageObject, indents);\n}\n\ndeclare const __VERSION__: string;\n\nexport function getVersion() {\n  return __VERSION__;\n}\n\nfunction debugLog(...message: any[]) {\n  // always read from process.env, and cannot be override by modelConfig, overrideAIConfig, etc.\n  // also avoid circular dependency\n  const debugMode = process.env[MIDSCENE_DEBUG_MODE];\n  if (debugMode) {\n    console.log('[Midscene]', ...message);\n  }\n}\n\nlet lastReportedRepoUrl = '';\nexport function uploadTestInfoToServer({ testUrl }: { testUrl: string }) {\n  let repoUrl = '';\n  let userEmail = '';\n\n  const serverUrl = getUploadTestServerUrl();\n\n  try {\n    repoUrl = execSync('git config --get remote.origin.url').toString().trim();\n    userEmail = execSync('git config --get user.email').toString().trim();\n  } catch (error) {\n    debugLog('Failed to get git info:', error);\n  }\n\n  // Only upload test info if:\n  // 1. Server URL is configured AND\n  // 2. Either:\n  //    - We have a repo URL that's different from last reported one (to avoid duplicate reports)\n  //    - OR we don't have a repo URL but have a test URL (for non-git environments)\n  if (\n    serverUrl &&\n    ((repoUrl && repoUrl !== lastReportedRepoUrl) || (!repoUrl && testUrl))\n  ) {\n    debugLog('Uploading test info to server', {\n      serverUrl,\n      repoUrl,\n      testUrl,\n      userEmail,\n    });\n\n    fetch(serverUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        repo_url: repoUrl,\n        test_url: testUrl,\n        user_email: userEmail,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        debugLog('Successfully uploaded test info to server:', data);\n      })\n      .catch((error) =>\n        debugLog('Failed to upload test info to server:', error),\n      );\n    lastReportedRepoUrl = repoUrl;\n  }\n}\n"],"names":["__webpack_require__","definition","key","Object","obj","prop","Symbol","logEnvReady","groupedActionDumpFileExt","reportInitializedMap","Map","getReportTpl","reportTpl","insertScriptBeforeClosingHtml","filePath","scriptContent","htmlEndTag","stat","fs","readSize","Math","start","buffer","Buffer","fd","tailStr","htmlEndIdx","Error","beforeHtmlInTail","htmlEndPos","reportHTMLContent","dumpData","reportPath","appendReport","tpl","console","writeToFile","ifInBrowser","dumpContent","escapeScriptTag","dumpString","attributes","attributesArr","encodeURIComponent","writeFileSync","writeDumpReport","fileName","ifInWorker","path","getMidsceneRunSubDir","process","jsonPath","data","JSON","logMsg","writeLogFile","opts","fileExt","fileContent","type","targetDir","assert","gitIgnorePath","gitPath","gitIgnoreContent","existsSync","readFileSync","defaultRunDirName","getTmpDir","runningPkgInfo","getRunningPkgInfo","name","tmpPath","tmpdir","mkdirSync","e","getTmpFile","fileExtWithoutDot","tmpDir","filename","uuid","overlapped","container","target","sleep","ms","Promise","resolve","setTimeout","replacerForPageObject","value","_value_constructor","_value_constructor1","stringifyDumpData","indents","getVersion","__VERSION__","debugLog","message","debugMode","MIDSCENE_DEBUG_MODE","lastReportedRepoUrl","uploadTestInfoToServer","testUrl","repoUrl","userEmail","serverUrl","getUploadTestServerUrl","execSync","error","fetch","response"],"mappings":"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"}