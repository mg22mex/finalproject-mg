{"version":3,"file":"ai-model/prompt/llm-planning.js","sources":["webpack://@midscene/core/webpack/runtime/compat_get_default_export","webpack://@midscene/core/webpack/runtime/define_property_getters","webpack://@midscene/core/webpack/runtime/has_own_property","webpack://@midscene/core/webpack/runtime/make_namespace_object","webpack://@midscene/core/./src/ai-model/prompt/llm-planning.ts"],"sourcesContent":["// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import assert from 'node:assert';\nimport type { DeviceAction } from '@/types';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport type { vlLocateMode } from '@midscene/shared/env';\nimport type { ResponseFormatJSONSchema } from 'openai/resources/index';\nimport { z } from 'zod';\nimport { ifMidsceneLocatorField } from '../common';\nimport { bboxDescription } from './common';\n\n// Note: put the log field first to trigger the CoT\nconst vlCoTLog = `\"what_the_user_wants_to_do_next_by_instruction\": string, // What the user wants to do according to the instruction and previous logs. `;\nconst vlCurrentLog = `\"log\": string, // Log what the next one action (ONLY ONE!) you can do according to the screenshot and the instruction. The typical log looks like \"Now i want to use action '{ action-type }' to do .. first\". If no action should be done, log the reason. \". Use the same language as the user's instruction.`;\nconst llmCurrentLog = `\"log\": string, // Log what the next actions you can do according to the screenshot and the instruction. The typical log looks like \"Now i want to use action '{ action-type }' to do ..\". If no action should be done, log the reason. \". Use the same language as the user's instruction.`;\n\nconst commonOutputFields = `\"error\"?: string, // Error messages about unexpected situations, if any. Only think it is an error when the situation is not foreseeable according to the instruction. Use the same language as the user's instruction.\n  \"more_actions_needed_by_instruction\": boolean, // Consider if there is still more action(s) to do after the action in \"Log\" is done, according to the instruction. If so, set this field to true. Otherwise, set it to false.`;\nconst vlLocateParam = () =>\n  '{bbox: [number, number, number, number], prompt: string }';\nconst llmLocateParam = () => '{\"id\": string, \"prompt\": string}';\n\nexport const descriptionForAction = (\n  action: DeviceAction<any>,\n  locatorSchemaTypeDescription: string,\n) => {\n  const tab = '  ';\n  const fields: string[] = [];\n\n  // Add the action type field\n  fields.push(`- type: \"${action.name}\"`);\n\n  // Handle paramSchema if it exists\n  if (action.paramSchema) {\n    assert(\n      action.paramSchema instanceof z.ZodObject,\n      'paramSchema must be a zod object',\n    );\n    // Try to extract parameter information from the zod schema\n    // For zod object schemas, extract type information and descriptions\n    const shape = action.paramSchema.shape;\n    const paramLines: string[] = [];\n\n    // Helper function to get type name from zod schema\n    const getTypeName = (field: any): string => {\n      // Recursively unwrap optional, nullable, and other wrapper types to get the actual inner type\n      const unwrapField = (f: any): any => {\n        if (!f._def) return f;\n\n        const typeName = f._def.typeName;\n\n        // Handle wrapper types that have innerType\n        if (\n          typeName === 'ZodOptional' ||\n          typeName === 'ZodNullable' ||\n          typeName === 'ZodDefault'\n        ) {\n          return unwrapField(f._def.innerType);\n        }\n\n        return f;\n      };\n\n      const actualField = unwrapField(field);\n      const fieldTypeName = actualField._def?.typeName;\n\n      if (fieldTypeName === 'ZodString') return 'string';\n      if (fieldTypeName === 'ZodNumber') return 'number';\n      if (fieldTypeName === 'ZodBoolean') return 'boolean';\n      if (fieldTypeName === 'ZodArray') return 'array';\n      if (fieldTypeName === 'ZodObject') {\n        // Check if this is a passthrough object (like MidsceneLocation)\n        if (ifMidsceneLocatorField(actualField)) {\n          return locatorSchemaTypeDescription;\n        }\n        return 'object';\n      }\n      if (fieldTypeName === 'ZodEnum') {\n        const values =\n          (actualField._def?.values as unknown[] | undefined)\n            ?.map((option: unknown) => String(`'${option}'`))\n            .join(', ') ?? 'enum';\n\n        return `enum(${values})`;\n      }\n\n      console.warn(\n        'failed to parse Zod type. This may lead to wrong params from the LLM.\\n',\n        actualField._def,\n      );\n      return actualField.toString();\n    };\n\n    // Helper function to get description from zod schema\n    const getDescription = (field: z.ZodTypeAny): string | null => {\n      // Recursively unwrap optional, nullable, and other wrapper types to get the actual inner type\n      const unwrapField = (f: any): any => {\n        if (!f._def) return f;\n\n        const typeName = f._def.typeName;\n\n        // Handle wrapper types that have innerType\n        if (\n          typeName === 'ZodOptional' ||\n          typeName === 'ZodNullable' ||\n          typeName === 'ZodDefault'\n        ) {\n          return unwrapField(f._def.innerType);\n        }\n\n        return f;\n      };\n\n      // Check for direct description on the original field (wrapper may have description)\n      if ('description' in field) {\n        return field.description || null;\n      }\n\n      const actualField = unwrapField(field);\n\n      // Check for description on the unwrapped field\n      if ('description' in actualField) {\n        return actualField.description || null;\n      }\n\n      // Check for MidsceneLocation fields and add description\n      if (actualField._def?.typeName === 'ZodObject') {\n        if ('midscene_location_field_flag' in actualField._def.shape()) {\n          return 'Location information for the target element';\n        }\n      }\n\n      return null;\n    };\n\n    for (const [key, field] of Object.entries(shape)) {\n      if (field && typeof field === 'object') {\n        // Check if field is optional\n        const isOptional =\n          typeof (field as any).isOptional === 'function' &&\n          (field as any).isOptional();\n        const keyWithOptional = isOptional ? `${key}?` : key;\n\n        // Get the type name\n        const typeName = getTypeName(field);\n\n        // Get description\n        const description = getDescription(field as z.ZodTypeAny);\n\n        // Build param line for this field\n        let paramLine = `${keyWithOptional}: ${typeName}`;\n        if (description) {\n          paramLine += ` // ${description}`;\n        }\n\n        paramLines.push(paramLine);\n      }\n    }\n\n    if (paramLines.length > 0) {\n      fields.push('- param:');\n      for (const paramLine of paramLines) {\n        fields.push(`  - ${paramLine}`);\n      }\n    }\n  }\n\n  return `- ${action.name}, ${action.description || 'No description provided'}\n${tab}${fields.join(`\\n${tab}`)}\n`.trim();\n};\n\nconst systemTemplateOfVLPlanning = ({\n  actionSpace,\n  vlMode,\n}: {\n  actionSpace: DeviceAction<any>[];\n  vlMode: ReturnType<typeof vlLocateMode>;\n}) => {\n  const actionNameList = actionSpace.map((action) => action.name).join(', ');\n  const actionDescriptionList = actionSpace.map((action) => {\n    return descriptionForAction(action, vlLocateParam());\n  });\n  const actionList = actionDescriptionList.join('\\n');\n\n  return `\nTarget: User will give you a screenshot, an instruction and some previous logs indicating what have been done. Please tell what the next one action is (or null if no action should be done) to do the tasks the instruction requires. \n\nRestriction:\n- Don't give extra actions or plans beyond the instruction. ONLY plan for what the instruction requires. For example, don't try to submit the form if the instruction is only to fill something.\n- Always give ONLY ONE action in \\`log\\` field (or null if no action should be done), instead of multiple actions. Supported actions are ${actionNameList}.\n- Don't repeat actions in the previous logs.\n- Bbox is the bounding box of the element to be located. It's an array of 4 numbers, representing ${bboxDescription(vlMode)}.\n\nSupporting actions:\n${actionList}\n\nField description:\n* The \\`prompt\\` field inside the \\`locate\\` field is a short description that could be used to locate the element.\n\nReturn in JSON format:\n{\n  ${vlCoTLog}\n  ${vlCurrentLog}\n  ${commonOutputFields}\n  \"action\": \n    {\n      // one of the supporting actions\n    } | null,\n  ,\n  \"sleep\"?: number, // The sleep time after the action, in milliseconds.\n}\n\nFor example, when the instruction is \"click 'Confirm' button, and click 'Yes' in popup\" and the log is \"I will use action Tap to click 'Confirm' button\", by viewing the screenshot and previous logs, you should consider: We have already clicked the 'Confirm' button, so next we should find and click 'Yes' in popup.\n\nthis and output the JSON:\n\n{\n  \"what_the_user_wants_to_do_next_by_instruction\": \"We have already clicked the 'Confirm' button, so next we should find and click 'Yes' in popup\",\n  \"log\": \"I will use action Tap to click 'Yes' in popup\",\n  \"more_actions_needed_by_instruction\": false,\n  \"action\": {\n    \"type\": \"Tap\",\n    \"param\": {\n      \"locate\": {\n        \"bbox\": [100, 100, 200, 200],\n        \"prompt\": \"The 'Yes' button in popup\"\n      }\n    }\n  }\n}\n`;\n};\n\nconst systemTemplateOfLLM = ({\n  actionSpace,\n}: { actionSpace: DeviceAction<any>[] }) => {\n  const actionNameList = actionSpace.map((action) => action.name).join(' / ');\n  const actionDescriptionList = actionSpace.map((action) => {\n    return descriptionForAction(action, llmLocateParam());\n  });\n  const actionList = actionDescriptionList.join('\\n');\n\n  return `\n## Role\n\nYou are a versatile professional in software UI automation. Your outstanding contributions will impact the user experience of billions of users.\n\n## Objective\n\n- Decompose the instruction user asked into a series of actions\n- Locate the target element if possible\n- If the instruction cannot be accomplished, give a further plan.\n\n## Workflow\n\n1. Receive the screenshot, element description of screenshot(if any), user's instruction and previous logs.\n2. Decompose the user's task into a sequence of feasible actions, and place it in the \\`actions\\` field. There are different types of actions (${actionNameList}). The \"About the action\" section below will give you more details.\n3. Consider whether the user's instruction will be accomplished after the actions you composed.\n- If the instruction is accomplished, set \\`more_actions_needed_by_instruction\\` to false.\n- If more actions are needed, set \\`more_actions_needed_by_instruction\\` to true. Get ready to hand over to the next talent people like you. Carefully log what have been done in the \\`log\\` field, he or she will continue the task according to your logs.\n4. If the task is not feasible on this page, set \\`error\\` field to the reason.\n\n## Constraints\n\n- All the actions you composed MUST be feasible, which means all the action fields can be filled with the page context information you get. If not, don't plan this action.\n- Trust the \"What have been done\" field about the task (if any), don't repeat actions in it.\n- Respond only with valid JSON. Do not write an introduction or summary or markdown prefix like \\`\\`\\`json\\`\\`\\`.\n- If the screenshot and the instruction are totally irrelevant, set reason in the \\`error\\` field.\n\n## About the \\`actions\\` field\n\nThe \\`locate\\` param is commonly used in the \\`param\\` field of the action, means to locate the target element to perform the action, it conforms to the following scheme:\n\ntype LocateParam = {\n  \"id\": string, // the id of the element found. It should either be the id marked with a rectangle in the screenshot or the id described in the description.\n  \"prompt\"?: string // the description of the element to find. It can only be omitted when locate is null.\n} | null // If it's not on the page, the LocateParam should be null\n\n## Supported actions\n\nEach action has a \\`type\\` and corresponding \\`param\\`. To be detailed:\n${actionList}\n\n`.trim();\n};\n\nconst outputTemplate = `\n## Output JSON Format:\n\nThe JSON format is as follows:\n\n{\n  \"actions\": [\n    // ... some actions\n  ],\n  ${llmCurrentLog}\n  ${commonOutputFields}\n}\n\n## Examples\n\n### Example: Decompose a task\n\nWhen you received the following information:\n\n* Instruction: 'Click the language switch button, wait 1s, click \"English\"'\n* Logs: null\n* Page Context (screenshot and description) shows: There is a language switch button, and the \"English\" option is not shown in the screenshot now.\n\nBy viewing the page screenshot and description, you should consider this and output the JSON:\n\n* The user intent is: tap the switch button, sleep, and tap the 'English' option\n* The language switch button is shown in the screenshot, and can be located by the page description or the id marked with a rectangle. So we can plan a Tap action to do this.\n* Plan a Sleep action to wait for 1 second to ensure the language options are displayed.\n* The \"English\" option button is not shown in the screenshot now, it means it may only show after the previous actions are finished. So don't plan any action to do this.\n* Log what these action do: Click the language switch button to open the language options. Wait for 1 second.\n* The task cannot be accomplished (because the last tapping action is not finished yet), so the \\`more_actions_needed_by_instruction\\` field is true. The \\`error\\` field is null.\n\n{\n  \"actions\":[\n    {\n      \"thought\": \"Click the language switch button to open the language options.\",\n      \"type\": \"Tap\", \n      \"param\": {\n        \"locate\": { id: \"c81c4e9a33\", prompt: \"The language switch button\" }\n      }\n    },\n    {\n      \"thought\": \"Wait for 1 second to ensure the language options are displayed.\",\n      \"type\": \"Sleep\",\n      \"param\": { \"timeMs\": 1000 },\n    }\n  ],\n  \"error\": null,\n  \"more_actions_needed_by_instruction\": true,\n  \"log\": \"Click the language switch button to open the language options. Wait for 1 second\",\n}\n\n### Example: What NOT to do\nWrong output:\n{\n  \"actions\":[\n    {\n      \"thought\": \"Click the language switch button to open the language options.\",\n      \"type\": \"Tap\",\n      \"param\": {\n        \"locate\": { \"id\": \"c81c4e9a33\" } // WRONG: prompt is missing, this is not a valid LocateParam\n      }\n    },\n    {\n      \"thought\": \"Click the English option\",\n      \"type\": \"Tap\", \n      \"param\": {\n        \"locate\": null // WRONG: if the element is not on the page, you should not plan this action\n      }\n    }\n  ],\n  \"more_actions_needed_by_instruction\": false, // WRONG: should be true\n  \"log\": \"Click the language switch button to open the language options\",\n}\n`;\n\nexport async function systemPromptToTaskPlanning({\n  actionSpace,\n  vlMode,\n}: {\n  actionSpace: DeviceAction<any>[];\n  vlMode: ReturnType<typeof vlLocateMode>;\n}) {\n  if (vlMode) {\n    return systemTemplateOfVLPlanning({ actionSpace, vlMode });\n  }\n\n  return `${systemTemplateOfLLM({ actionSpace })}\\n\\n${outputTemplate}`;\n}\n\nexport const planSchema: ResponseFormatJSONSchema = {\n  type: 'json_schema',\n  json_schema: {\n    name: 'action_items',\n    strict: false,\n    schema: {\n      type: 'object',\n      strict: false,\n      properties: {\n        actions: {\n          type: 'array',\n          items: {\n            type: 'object',\n            strict: false,\n            properties: {\n              thought: {\n                type: 'string',\n                description:\n                  'Reasons for generating this task, and why this task is feasible on this page',\n              },\n              type: {\n                type: 'string',\n                description: 'Type of action',\n              },\n              param: {\n                anyOf: [\n                  { type: 'null' },\n                  {\n                    type: 'object',\n                    additionalProperties: true,\n                  },\n                ],\n                description: 'Parameter of the action',\n              },\n              locate: {\n                type: ['object', 'null'],\n                properties: {\n                  id: { type: 'string' },\n                  prompt: { type: 'string' },\n                },\n                required: ['id', 'prompt'],\n                additionalProperties: false,\n                description: 'Location information for the target element',\n              },\n            },\n            required: ['thought', 'type', 'param', 'locate'],\n            additionalProperties: false,\n          },\n          description: 'List of actions to be performed',\n        },\n        more_actions_needed_by_instruction: {\n          type: 'boolean',\n          description:\n            'If all the actions described in the instruction have been covered by this action and logs, set this field to false.',\n        },\n        log: {\n          type: 'string',\n          description:\n            'Log what these planned actions do. Do not include further actions that have not been planned.',\n        },\n        error: {\n          type: ['string', 'null'],\n          description: 'Error messages about unexpected situations',\n        },\n      },\n      required: [\n        'actions',\n        'more_actions_needed_by_instruction',\n        'log',\n        'error',\n      ],\n      additionalProperties: false,\n    },\n  },\n};\n\nexport const generateTaskBackgroundContext = (\n  userInstruction: string,\n  log?: string,\n  userActionContext?: string,\n) => {\n  if (log) {\n    return `\nHere is the user's instruction:\n\n<instruction>\n  <high_priority_knowledge>\n    ${userActionContext}\n  </high_priority_knowledge>\n\n  ${userInstruction}\n</instruction>\n\nThese are the logs from previous executions, which indicate what was done in the previous actions.\nDo NOT repeat these actions.\n<previous_logs>\n${log}\n</previous_logs>\n`;\n  }\n\n  return `\nHere is the user's instruction:\n<instruction>\n  <high_priority_knowledge>\n    ${userActionContext}\n  </high_priority_knowledge>\n\n  ${userInstruction}\n</instruction>\n`;\n};\n\nexport const automationUserPrompt = (\n  vlMode: ReturnType<typeof vlLocateMode>,\n) => {\n  if (vlMode) {\n    return new PromptTemplate({\n      template: '{taskBackgroundContext}',\n      inputVariables: ['taskBackgroundContext'],\n    });\n  }\n\n  return new PromptTemplate({\n    template: `\npageDescription:\n=====================================\n{pageDescription}\n=====================================\n\n{taskBackgroundContext}`,\n    inputVariables: ['pageDescription', 'taskBackgroundContext'],\n  });\n};\n"],"names":["__webpack_require__","module","getter","definition","key","Object","obj","prop","Symbol","vlCoTLog","vlCurrentLog","llmCurrentLog","commonOutputFields","vlLocateParam","llmLocateParam","descriptionForAction","action","locatorSchemaTypeDescription","tab","fields","assert","z","shape","paramLines","getTypeName","field","_actualField__def","unwrapField","f","typeName","actualField","fieldTypeName","ifMidsceneLocatorField","_actualField__def_values","values","option","String","console","getDescription","isOptional","keyWithOptional","description","paramLine","systemTemplateOfVLPlanning","actionSpace","vlMode","actionNameList","actionDescriptionList","actionList","bboxDescription","systemTemplateOfLLM","outputTemplate","systemPromptToTaskPlanning","planSchema","generateTaskBackgroundContext","userInstruction","log","userActionContext","automationUserPrompt","PromptTemplate"],"mappings":"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"}