/*! For license information please see index.js.LICENSE.txt */
var __webpack_modules__ = {
    "../../node_modules/.pnpm/ansi-regex@5.0.1/node_modules/ansi-regex/index.js": function(module) {
        "use strict";
        module.exports = ({ onlyFirst = false } = {})=>{
            const pattern = "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))";
            return new RegExp(pattern, onlyFirst ? void 0 : 'g');
        };
    },
    "../../node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        module = __webpack_require__.nmd(module);
        const wrapAnsi16 = (fn, offset)=>(...args)=>{
                const code = fn(...args);
                return `\u001B[${code + offset}m`;
            };
        const wrapAnsi256 = (fn, offset)=>(...args)=>{
                const code = fn(...args);
                return `\u001B[${38 + offset};5;${code}m`;
            };
        const wrapAnsi16m = (fn, offset)=>(...args)=>{
                const rgb = fn(...args);
                return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
            };
        const ansi2ansi = (n)=>n;
        const rgb2rgb = (r, g, b)=>[
                r,
                g,
                b
            ];
        const setLazyProperty = (object, property, get)=>{
            Object.defineProperty(object, property, {
                get: ()=>{
                    const value = get();
                    Object.defineProperty(object, property, {
                        value,
                        enumerable: true,
                        configurable: true
                    });
                    return value;
                },
                enumerable: true,
                configurable: true
            });
        };
        let colorConvert;
        const makeDynamicStyles = (wrap, targetSpace, identity, isBackground)=>{
            if (void 0 === colorConvert) colorConvert = __webpack_require__("../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js");
            const offset = isBackground ? 10 : 0;
            const styles = {};
            for (const [sourceSpace, suite] of Object.entries(colorConvert)){
                const name = 'ansi16' === sourceSpace ? 'ansi' : sourceSpace;
                if (sourceSpace === targetSpace) styles[name] = wrap(identity, offset);
                else if ('object' == typeof suite) styles[name] = wrap(suite[targetSpace], offset);
            }
            return styles;
        };
        function assembleStyles() {
            const codes = new Map();
            const styles = {
                modifier: {
                    reset: [
                        0,
                        0
                    ],
                    bold: [
                        1,
                        22
                    ],
                    dim: [
                        2,
                        22
                    ],
                    italic: [
                        3,
                        23
                    ],
                    underline: [
                        4,
                        24
                    ],
                    inverse: [
                        7,
                        27
                    ],
                    hidden: [
                        8,
                        28
                    ],
                    strikethrough: [
                        9,
                        29
                    ]
                },
                color: {
                    black: [
                        30,
                        39
                    ],
                    red: [
                        31,
                        39
                    ],
                    green: [
                        32,
                        39
                    ],
                    yellow: [
                        33,
                        39
                    ],
                    blue: [
                        34,
                        39
                    ],
                    magenta: [
                        35,
                        39
                    ],
                    cyan: [
                        36,
                        39
                    ],
                    white: [
                        37,
                        39
                    ],
                    blackBright: [
                        90,
                        39
                    ],
                    redBright: [
                        91,
                        39
                    ],
                    greenBright: [
                        92,
                        39
                    ],
                    yellowBright: [
                        93,
                        39
                    ],
                    blueBright: [
                        94,
                        39
                    ],
                    magentaBright: [
                        95,
                        39
                    ],
                    cyanBright: [
                        96,
                        39
                    ],
                    whiteBright: [
                        97,
                        39
                    ]
                },
                bgColor: {
                    bgBlack: [
                        40,
                        49
                    ],
                    bgRed: [
                        41,
                        49
                    ],
                    bgGreen: [
                        42,
                        49
                    ],
                    bgYellow: [
                        43,
                        49
                    ],
                    bgBlue: [
                        44,
                        49
                    ],
                    bgMagenta: [
                        45,
                        49
                    ],
                    bgCyan: [
                        46,
                        49
                    ],
                    bgWhite: [
                        47,
                        49
                    ],
                    bgBlackBright: [
                        100,
                        49
                    ],
                    bgRedBright: [
                        101,
                        49
                    ],
                    bgGreenBright: [
                        102,
                        49
                    ],
                    bgYellowBright: [
                        103,
                        49
                    ],
                    bgBlueBright: [
                        104,
                        49
                    ],
                    bgMagentaBright: [
                        105,
                        49
                    ],
                    bgCyanBright: [
                        106,
                        49
                    ],
                    bgWhiteBright: [
                        107,
                        49
                    ]
                }
            };
            styles.color.gray = styles.color.blackBright;
            styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
            styles.color.grey = styles.color.blackBright;
            styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
            for (const [groupName, group] of Object.entries(styles)){
                for (const [styleName, style] of Object.entries(group)){
                    styles[styleName] = {
                        open: `\u001B[${style[0]}m`,
                        close: `\u001B[${style[1]}m`
                    };
                    group[styleName] = styles[styleName];
                    codes.set(style[0], style[1]);
                }
                Object.defineProperty(styles, groupName, {
                    value: group,
                    enumerable: false
                });
            }
            Object.defineProperty(styles, 'codes', {
                value: codes,
                enumerable: false
            });
            styles.color.close = '\u001B[39m';
            styles.bgColor.close = '\u001B[49m';
            setLazyProperty(styles.color, 'ansi', ()=>makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
            setLazyProperty(styles.color, 'ansi256', ()=>makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
            setLazyProperty(styles.color, 'ansi16m', ()=>makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
            setLazyProperty(styles.bgColor, 'ansi', ()=>makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
            setLazyProperty(styles.bgColor, 'ansi256', ()=>makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
            setLazyProperty(styles.bgColor, 'ansi16m', ()=>makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));
            return styles;
        }
        Object.defineProperty(module, 'exports', {
            enumerable: true,
            get: assembleStyles
        });
    },
    "../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js": function(module) {
        "use strict";
        module.exports = balanced;
        function balanced(a, b, str) {
            if (a instanceof RegExp) a = maybeMatch(a, str);
            if (b instanceof RegExp) b = maybeMatch(b, str);
            var r = range(a, b, str);
            return r && {
                start: r[0],
                end: r[1],
                pre: str.slice(0, r[0]),
                body: str.slice(r[0] + a.length, r[1]),
                post: str.slice(r[1] + b.length)
            };
        }
        function maybeMatch(reg, str) {
            var m = str.match(reg);
            return m ? m[0] : null;
        }
        balanced.range = range;
        function range(a, b, str) {
            var begs, beg, left, right, result;
            var ai = str.indexOf(a);
            var bi = str.indexOf(b, ai + 1);
            var i = ai;
            if (ai >= 0 && bi > 0) {
                if (a === b) return [
                    ai,
                    bi
                ];
                begs = [];
                left = str.length;
                while(i >= 0 && !result){
                    if (i == ai) {
                        begs.push(i);
                        ai = str.indexOf(a, i + 1);
                    } else if (1 == begs.length) result = [
                        begs.pop(),
                        bi
                    ];
                    else {
                        beg = begs.pop();
                        if (beg < left) {
                            left = beg;
                            right = bi;
                        }
                        bi = str.indexOf(b, i + 1);
                    }
                    i = ai < bi && ai >= 0 ? ai : bi;
                }
                if (begs.length) result = [
                    left,
                    right
                ];
            }
            return result;
        }
    },
    "../../node_modules/.pnpm/brace-expansion@2.0.1/node_modules/brace-expansion/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        var balanced = __webpack_require__("../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js");
        module.exports = expandTop;
        var escSlash = '\0SLASH' + Math.random() + '\0';
        var escOpen = '\0OPEN' + Math.random() + '\0';
        var escClose = '\0CLOSE' + Math.random() + '\0';
        var escComma = '\0COMMA' + Math.random() + '\0';
        var escPeriod = '\0PERIOD' + Math.random() + '\0';
        function numeric(str) {
            return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
        }
        function escapeBraces(str) {
            return str.split('\\\\').join(escSlash).split('\\{').join(escOpen).split('\\}').join(escClose).split('\\,').join(escComma).split('\\.').join(escPeriod);
        }
        function unescapeBraces(str) {
            return str.split(escSlash).join('\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');
        }
        function parseCommaParts(str) {
            if (!str) return [
                ''
            ];
            var parts = [];
            var m = balanced('{', '}', str);
            if (!m) return str.split(',');
            var pre = m.pre;
            var body = m.body;
            var post = m.post;
            var p = pre.split(',');
            p[p.length - 1] += '{' + body + '}';
            var postParts = parseCommaParts(post);
            if (post.length) {
                p[p.length - 1] += postParts.shift();
                p.push.apply(p, postParts);
            }
            parts.push.apply(parts, p);
            return parts;
        }
        function expandTop(str) {
            if (!str) return [];
            if ('{}' === str.substr(0, 2)) str = '\\{\\}' + str.substr(2);
            return expand(escapeBraces(str), true).map(unescapeBraces);
        }
        function embrace(str) {
            return '{' + str + '}';
        }
        function isPadded(el) {
            return /^-?0\d/.test(el);
        }
        function lte(i, y) {
            return i <= y;
        }
        function gte(i, y) {
            return i >= y;
        }
        function expand(str, isTop) {
            var expansions = [];
            var m = balanced('{', '}', str);
            if (!m) return [
                str
            ];
            var pre = m.pre;
            var post = m.post.length ? expand(m.post, false) : [
                ''
            ];
            if (/\$$/.test(m.pre)) for(var k = 0; k < post.length; k++){
                var expansion = pre + '{' + m.body + '}' + post[k];
                expansions.push(expansion);
            }
            else {
                var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
                var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
                var isSequence = isNumericSequence || isAlphaSequence;
                var isOptions = m.body.indexOf(',') >= 0;
                if (!isSequence && !isOptions) {
                    if (m.post.match(/,.*\}/)) {
                        str = m.pre + '{' + m.body + escClose + m.post;
                        return expand(str);
                    }
                    return [
                        str
                    ];
                }
                var n;
                if (isSequence) n = m.body.split(/\.\./);
                else {
                    n = parseCommaParts(m.body);
                    if (1 === n.length) {
                        n = expand(n[0], false).map(embrace);
                        if (1 === n.length) return post.map(function(p) {
                            return m.pre + n[0] + p;
                        });
                    }
                }
                var N;
                if (isSequence) {
                    var x = numeric(n[0]);
                    var y = numeric(n[1]);
                    var width = Math.max(n[0].length, n[1].length);
                    var incr = 3 == n.length ? Math.abs(numeric(n[2])) : 1;
                    var test = lte;
                    var reverse = y < x;
                    if (reverse) {
                        incr *= -1;
                        test = gte;
                    }
                    var pad = n.some(isPadded);
                    N = [];
                    for(var i = x; test(i, y); i += incr){
                        var c;
                        if (isAlphaSequence) {
                            c = String.fromCharCode(i);
                            if ('\\' === c) c = '';
                        } else {
                            c = String(i);
                            if (pad) {
                                var need = width - c.length;
                                if (need > 0) {
                                    var z = new Array(need + 1).join('0');
                                    c = i < 0 ? '-' + z + c.slice(1) : z + c;
                                }
                            }
                        }
                        N.push(c);
                    }
                } else {
                    N = [];
                    for(var j = 0; j < n.length; j++)N.push.apply(N, expand(n[j], false));
                }
                for(var j = 0; j < N.length; j++)for(var k = 0; k < post.length; k++){
                    var expansion = pre + N[j] + post[k];
                    if (!isTop || isSequence || expansion) expansions.push(expansion);
                }
            }
            return expansions;
        }
    },
    "../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        const ansiStyles = __webpack_require__("../../node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js");
        const { stdout: stdoutColor, stderr: stderrColor } = __webpack_require__("../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
        const { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = __webpack_require__("../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js");
        const { isArray } = Array;
        const levelMapping = [
            'ansi',
            'ansi',
            'ansi256',
            'ansi16m'
        ];
        const styles = Object.create(null);
        const applyOptions = (object, options = {})=>{
            if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) throw new Error('The `level` option should be an integer from 0 to 3');
            const colorLevel = stdoutColor ? stdoutColor.level : 0;
            object.level = void 0 === options.level ? colorLevel : options.level;
        };
        class ChalkClass {
            constructor(options){
                return chalkFactory(options);
            }
        }
        const chalkFactory = (options)=>{
            const chalk = {};
            applyOptions(chalk, options);
            chalk.template = (...arguments_)=>chalkTag(chalk.template, ...arguments_);
            Object.setPrototypeOf(chalk, Chalk.prototype);
            Object.setPrototypeOf(chalk.template, chalk);
            chalk.template.constructor = ()=>{
                throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
            };
            chalk.template.Instance = ChalkClass;
            return chalk.template;
        };
        function Chalk(options) {
            return chalkFactory(options);
        }
        for (const [styleName, style] of Object.entries(ansiStyles))styles[styleName] = {
            get () {
                const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
                Object.defineProperty(this, styleName, {
                    value: builder
                });
                return builder;
            }
        };
        styles.visible = {
            get () {
                const builder = createBuilder(this, this._styler, true);
                Object.defineProperty(this, 'visible', {
                    value: builder
                });
                return builder;
            }
        };
        const usedModels = [
            'rgb',
            'hex',
            'keyword',
            'hsl',
            'hsv',
            'hwb',
            'ansi',
            'ansi256'
        ];
        for (const model of usedModels)styles[model] = {
            get () {
                const { level } = this;
                return function(...arguments_) {
                    const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
                    return createBuilder(this, styler, this._isEmpty);
                };
            }
        };
        for (const model of usedModels){
            const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
            styles[bgModel] = {
                get () {
                    const { level } = this;
                    return function(...arguments_) {
                        const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
                        return createBuilder(this, styler, this._isEmpty);
                    };
                }
            };
        }
        const proto = Object.defineProperties(()=>{}, {
            ...styles,
            level: {
                enumerable: true,
                get () {
                    return this._generator.level;
                },
                set (level) {
                    this._generator.level = level;
                }
            }
        });
        const createStyler = (open, close, parent)=>{
            let openAll;
            let closeAll;
            if (void 0 === parent) {
                openAll = open;
                closeAll = close;
            } else {
                openAll = parent.openAll + open;
                closeAll = close + parent.closeAll;
            }
            return {
                open,
                close,
                openAll,
                closeAll,
                parent
            };
        };
        const createBuilder = (self, _styler, _isEmpty)=>{
            const builder = (...arguments_)=>{
                if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) return applyStyle(builder, chalkTag(builder, ...arguments_));
                return applyStyle(builder, 1 === arguments_.length ? '' + arguments_[0] : arguments_.join(' '));
            };
            Object.setPrototypeOf(builder, proto);
            builder._generator = self;
            builder._styler = _styler;
            builder._isEmpty = _isEmpty;
            return builder;
        };
        const applyStyle = (self, string)=>{
            if (self.level <= 0 || !string) return self._isEmpty ? '' : string;
            let styler = self._styler;
            if (void 0 === styler) return string;
            const { openAll, closeAll } = styler;
            if (-1 !== string.indexOf('\u001B')) while(void 0 !== styler){
                string = stringReplaceAll(string, styler.close, styler.open);
                styler = styler.parent;
            }
            const lfIndex = string.indexOf('\n');
            if (-1 !== lfIndex) string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
            return openAll + string + closeAll;
        };
        let template;
        const chalkTag = (chalk, ...strings)=>{
            const [firstString] = strings;
            if (!isArray(firstString) || !isArray(firstString.raw)) return strings.join(' ');
            const arguments_ = strings.slice(1);
            const parts = [
                firstString.raw[0]
            ];
            for(let i = 1; i < firstString.length; i++)parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'), String(firstString.raw[i]));
            if (void 0 === template) template = __webpack_require__("../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js");
            return template(chalk, parts.join(''));
        };
        Object.defineProperties(Chalk.prototype, styles);
        const chalk = Chalk();
        chalk.supportsColor = stdoutColor;
        chalk.stderr = Chalk({
            level: stderrColor ? stderrColor.level : 0
        });
        chalk.stderr.supportsColor = stderrColor;
        module.exports = chalk;
    },
    "../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js": function(module) {
        "use strict";
        const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
        const ESCAPES = new Map([
            [
                'n',
                '\n'
            ],
            [
                'r',
                '\r'
            ],
            [
                't',
                '\t'
            ],
            [
                'b',
                '\b'
            ],
            [
                'f',
                '\f'
            ],
            [
                'v',
                '\v'
            ],
            [
                '0',
                '\0'
            ],
            [
                '\\',
                '\\'
            ],
            [
                'e',
                '\u001B'
            ],
            [
                'a',
                '\u0007'
            ]
        ]);
        function unescape(c) {
            const u = 'u' === c[0];
            const bracket = '{' === c[1];
            if (u && !bracket && 5 === c.length || 'x' === c[0] && 3 === c.length) return String.fromCharCode(parseInt(c.slice(1), 16));
            if (u && bracket) return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
            return ESCAPES.get(c) || c;
        }
        function parseArguments(name, arguments_) {
            const results = [];
            const chunks = arguments_.trim().split(/\s*,\s*/g);
            let matches;
            for (const chunk of chunks){
                const number = Number(chunk);
                if (Number.isNaN(number)) if (matches = chunk.match(STRING_REGEX)) results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character)=>escape ? unescape(escape) : character));
                else throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
                else results.push(number);
            }
            return results;
        }
        function parseStyle(style) {
            STYLE_REGEX.lastIndex = 0;
            const results = [];
            let matches;
            while(null !== (matches = STYLE_REGEX.exec(style))){
                const name = matches[1];
                if (matches[2]) {
                    const args = parseArguments(name, matches[2]);
                    results.push([
                        name
                    ].concat(args));
                } else results.push([
                    name
                ]);
            }
            return results;
        }
        function buildStyle(chalk, styles) {
            const enabled = {};
            for (const layer of styles)for (const style of layer.styles)enabled[style[0]] = layer.inverse ? null : style.slice(1);
            let current = chalk;
            for (const [styleName, styles] of Object.entries(enabled))if (Array.isArray(styles)) {
                if (!(styleName in current)) throw new Error(`Unknown Chalk style: ${styleName}`);
                current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
            }
            return current;
        }
        module.exports = (chalk, temporary)=>{
            const styles = [];
            const chunks = [];
            let chunk = [];
            temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character)=>{
                if (escapeCharacter) chunk.push(unescape(escapeCharacter));
                else if (style) {
                    const string = chunk.join('');
                    chunk = [];
                    chunks.push(0 === styles.length ? string : buildStyle(chalk, styles)(string));
                    styles.push({
                        inverse,
                        styles: parseStyle(style)
                    });
                } else if (close) {
                    if (0 === styles.length) throw new Error('Found extraneous } in Chalk template literal');
                    chunks.push(buildStyle(chalk, styles)(chunk.join('')));
                    chunk = [];
                    styles.pop();
                } else chunk.push(character);
            });
            chunks.push(chunk.join(''));
            if (styles.length > 0) {
                const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${1 === styles.length ? '' : 's'} (\`}\`)`;
                throw new Error(errMessage);
            }
            return chunks.join('');
        };
    },
    "../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js": function(module) {
        "use strict";
        const stringReplaceAll = (string, substring, replacer)=>{
            let index = string.indexOf(substring);
            if (-1 === index) return string;
            const substringLength = substring.length;
            let endIndex = 0;
            let returnValue = '';
            do {
                returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
                endIndex = index + substringLength;
                index = string.indexOf(substring, endIndex);
            }while (-1 !== index);
            returnValue += string.substr(endIndex);
            return returnValue;
        };
        const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index)=>{
            let endIndex = 0;
            let returnValue = '';
            do {
                const gotCR = '\r' === string[index - 1];
                returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
                endIndex = index + 1;
                index = string.indexOf('\n', endIndex);
            }while (-1 !== index);
            returnValue += string.substr(endIndex);
            return returnValue;
        };
        module.exports = {
            stringReplaceAll,
            stringEncaseCRLFWithFirstIndex
        };
    },
    "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const cssKeywords = __webpack_require__("../../node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js");
        const reverseKeywords = {};
        for (const key of Object.keys(cssKeywords))reverseKeywords[cssKeywords[key]] = key;
        const convert = {
            rgb: {
                channels: 3,
                labels: 'rgb'
            },
            hsl: {
                channels: 3,
                labels: 'hsl'
            },
            hsv: {
                channels: 3,
                labels: 'hsv'
            },
            hwb: {
                channels: 3,
                labels: 'hwb'
            },
            cmyk: {
                channels: 4,
                labels: 'cmyk'
            },
            xyz: {
                channels: 3,
                labels: 'xyz'
            },
            lab: {
                channels: 3,
                labels: 'lab'
            },
            lch: {
                channels: 3,
                labels: 'lch'
            },
            hex: {
                channels: 1,
                labels: [
                    'hex'
                ]
            },
            keyword: {
                channels: 1,
                labels: [
                    'keyword'
                ]
            },
            ansi16: {
                channels: 1,
                labels: [
                    'ansi16'
                ]
            },
            ansi256: {
                channels: 1,
                labels: [
                    'ansi256'
                ]
            },
            hcg: {
                channels: 3,
                labels: [
                    'h',
                    'c',
                    'g'
                ]
            },
            apple: {
                channels: 3,
                labels: [
                    'r16',
                    'g16',
                    'b16'
                ]
            },
            gray: {
                channels: 1,
                labels: [
                    'gray'
                ]
            }
        };
        module.exports = convert;
        for (const model of Object.keys(convert)){
            if (!('channels' in convert[model])) throw new Error('missing channels property: ' + model);
            if (!('labels' in convert[model])) throw new Error('missing channel labels property: ' + model);
            if (convert[model].labels.length !== convert[model].channels) throw new Error('channel and label counts mismatch: ' + model);
            const { channels, labels } = convert[model];
            delete convert[model].channels;
            delete convert[model].labels;
            Object.defineProperty(convert[model], 'channels', {
                value: channels
            });
            Object.defineProperty(convert[model], 'labels', {
                value: labels
            });
        }
        convert.rgb.hsl = function(rgb) {
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const min = Math.min(r, g, b);
            const max = Math.max(r, g, b);
            const delta = max - min;
            let h;
            let s;
            if (max === min) h = 0;
            else if (r === max) h = (g - b) / delta;
            else if (g === max) h = 2 + (b - r) / delta;
            else if (b === max) h = 4 + (r - g) / delta;
            h = Math.min(60 * h, 360);
            if (h < 0) h += 360;
            const l = (min + max) / 2;
            s = max === min ? 0 : l <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            return [
                h,
                100 * s,
                100 * l
            ];
        };
        convert.rgb.hsv = function(rgb) {
            let rdif;
            let gdif;
            let bdif;
            let h;
            let s;
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const v = Math.max(r, g, b);
            const diff = v - Math.min(r, g, b);
            const diffc = function(c) {
                return (v - c) / 6 / diff + 0.5;
            };
            if (0 === diff) {
                h = 0;
                s = 0;
            } else {
                s = diff / v;
                rdif = diffc(r);
                gdif = diffc(g);
                bdif = diffc(b);
                if (r === v) h = bdif - gdif;
                else if (g === v) h = 1 / 3 + rdif - bdif;
                else if (b === v) h = 2 / 3 + gdif - rdif;
                if (h < 0) h += 1;
                else if (h > 1) h -= 1;
            }
            return [
                360 * h,
                100 * s,
                100 * v
            ];
        };
        convert.rgb.hwb = function(rgb) {
            const r = rgb[0];
            const g = rgb[1];
            let b = rgb[2];
            const h = convert.rgb.hsl(rgb)[0];
            const w = 1 / 255 * Math.min(r, Math.min(g, b));
            b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
            return [
                h,
                100 * w,
                100 * b
            ];
        };
        convert.rgb.cmyk = function(rgb) {
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const k = Math.min(1 - r, 1 - g, 1 - b);
            const c = (1 - r - k) / (1 - k) || 0;
            const m = (1 - g - k) / (1 - k) || 0;
            const y = (1 - b - k) / (1 - k) || 0;
            return [
                100 * c,
                100 * m,
                100 * y,
                100 * k
            ];
        };
        function comparativeDistance(x, y) {
            return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
        }
        convert.rgb.keyword = function(rgb) {
            const reversed = reverseKeywords[rgb];
            if (reversed) return reversed;
            let currentClosestDistance = 1 / 0;
            let currentClosestKeyword;
            for (const keyword of Object.keys(cssKeywords)){
                const value = cssKeywords[keyword];
                const distance = comparativeDistance(rgb, value);
                if (distance < currentClosestDistance) {
                    currentClosestDistance = distance;
                    currentClosestKeyword = keyword;
                }
            }
            return currentClosestKeyword;
        };
        convert.keyword.rgb = function(keyword) {
            return cssKeywords[keyword];
        };
        convert.rgb.xyz = function(rgb) {
            let r = rgb[0] / 255;
            let g = rgb[1] / 255;
            let b = rgb[2] / 255;
            r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
            g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
            b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
            const x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
            const y = 0.2126 * r + 0.7152 * g + 0.0722 * b;
            const z = 0.0193 * r + 0.1192 * g + 0.9505 * b;
            return [
                100 * x,
                100 * y,
                100 * z
            ];
        };
        convert.rgb.lab = function(rgb) {
            const xyz = convert.rgb.xyz(rgb);
            let x = xyz[0];
            let y = xyz[1];
            let z = xyz[2];
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
            const l = 116 * y - 16;
            const a = 500 * (x - y);
            const b = 200 * (y - z);
            return [
                l,
                a,
                b
            ];
        };
        convert.hsl.rgb = function(hsl) {
            const h = hsl[0] / 360;
            const s = hsl[1] / 100;
            const l = hsl[2] / 100;
            let t2;
            let t3;
            let val;
            if (0 === s) {
                val = 255 * l;
                return [
                    val,
                    val,
                    val
                ];
            }
            t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const t1 = 2 * l - t2;
            const rgb = [
                0,
                0,
                0
            ];
            for(let i = 0; i < 3; i++){
                t3 = h + 1 / 3 * -(i - 1);
                if (t3 < 0) t3++;
                if (t3 > 1) t3--;
                val = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? t2 : 3 * t3 < 2 ? t1 + (t2 - t1) * (2 / 3 - t3) * 6 : t1;
                rgb[i] = 255 * val;
            }
            return rgb;
        };
        convert.hsl.hsv = function(hsl) {
            const h = hsl[0];
            let s = hsl[1] / 100;
            let l = hsl[2] / 100;
            let smin = s;
            const lmin = Math.max(l, 0.01);
            l *= 2;
            s *= l <= 1 ? l : 2 - l;
            smin *= lmin <= 1 ? lmin : 2 - lmin;
            const v = (l + s) / 2;
            const sv = 0 === l ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
            return [
                h,
                100 * sv,
                100 * v
            ];
        };
        convert.hsv.rgb = function(hsv) {
            const h = hsv[0] / 60;
            const s = hsv[1] / 100;
            let v = hsv[2] / 100;
            const hi = Math.floor(h) % 6;
            const f = h - Math.floor(h);
            const p = 255 * v * (1 - s);
            const q = 255 * v * (1 - s * f);
            const t1 = 255 * v * (1 - s * (1 - f));
            v *= 255;
            switch(hi){
                case 0:
                    return [
                        v,
                        t1,
                        p
                    ];
                case 1:
                    return [
                        q,
                        v,
                        p
                    ];
                case 2:
                    return [
                        p,
                        v,
                        t1
                    ];
                case 3:
                    return [
                        p,
                        q,
                        v
                    ];
                case 4:
                    return [
                        t1,
                        p,
                        v
                    ];
                case 5:
                    return [
                        v,
                        p,
                        q
                    ];
            }
        };
        convert.hsv.hsl = function(hsv) {
            const h = hsv[0];
            const s = hsv[1] / 100;
            const v = hsv[2] / 100;
            const vmin = Math.max(v, 0.01);
            let sl;
            let l;
            l = (2 - s) * v;
            const lmin = (2 - s) * vmin;
            sl = s * vmin;
            sl /= lmin <= 1 ? lmin : 2 - lmin;
            sl = sl || 0;
            l /= 2;
            return [
                h,
                100 * sl,
                100 * l
            ];
        };
        convert.hwb.rgb = function(hwb) {
            const h = hwb[0] / 360;
            let wh = hwb[1] / 100;
            let bl = hwb[2] / 100;
            const ratio = wh + bl;
            let f;
            if (ratio > 1) {
                wh /= ratio;
                bl /= ratio;
            }
            const i = Math.floor(6 * h);
            const v = 1 - bl;
            f = 6 * h - i;
            if ((0x01 & i) !== 0) f = 1 - f;
            const n = wh + f * (v - wh);
            let r;
            let g;
            let b;
            switch(i){
                default:
                case 6:
                case 0:
                    r = v;
                    g = n;
                    b = wh;
                    break;
                case 1:
                    r = n;
                    g = v;
                    b = wh;
                    break;
                case 2:
                    r = wh;
                    g = v;
                    b = n;
                    break;
                case 3:
                    r = wh;
                    g = n;
                    b = v;
                    break;
                case 4:
                    r = n;
                    g = wh;
                    b = v;
                    break;
                case 5:
                    r = v;
                    g = wh;
                    b = n;
                    break;
            }
            return [
                255 * r,
                255 * g,
                255 * b
            ];
        };
        convert.cmyk.rgb = function(cmyk) {
            const c = cmyk[0] / 100;
            const m = cmyk[1] / 100;
            const y = cmyk[2] / 100;
            const k = cmyk[3] / 100;
            const r = 1 - Math.min(1, c * (1 - k) + k);
            const g = 1 - Math.min(1, m * (1 - k) + k);
            const b = 1 - Math.min(1, y * (1 - k) + k);
            return [
                255 * r,
                255 * g,
                255 * b
            ];
        };
        convert.xyz.rgb = function(xyz) {
            const x = xyz[0] / 100;
            const y = xyz[1] / 100;
            const z = xyz[2] / 100;
            let r;
            let g;
            let b;
            r = 3.2406 * x + -1.5372 * y + -0.4986 * z;
            g = -0.9689 * x + 1.8758 * y + 0.0415 * z;
            b = 0.0557 * x + -0.204 * y + 1.0570 * z;
            r = r > 0.0031308 ? 1.055 * r ** (1.0 / 2.4) - 0.055 : 12.92 * r;
            g = g > 0.0031308 ? 1.055 * g ** (1.0 / 2.4) - 0.055 : 12.92 * g;
            b = b > 0.0031308 ? 1.055 * b ** (1.0 / 2.4) - 0.055 : 12.92 * b;
            r = Math.min(Math.max(0, r), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);
            return [
                255 * r,
                255 * g,
                255 * b
            ];
        };
        convert.xyz.lab = function(xyz) {
            let x = xyz[0];
            let y = xyz[1];
            let z = xyz[2];
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
            const l = 116 * y - 16;
            const a = 500 * (x - y);
            const b = 200 * (y - z);
            return [
                l,
                a,
                b
            ];
        };
        convert.lab.xyz = function(lab) {
            const l = lab[0];
            const a = lab[1];
            const b = lab[2];
            let x;
            let y;
            let z;
            y = (l + 16) / 116;
            x = a / 500 + y;
            z = y - b / 200;
            const y2 = y ** 3;
            const x2 = x ** 3;
            const z2 = z ** 3;
            y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
            x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
            z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
            x *= 95.047;
            y *= 100;
            z *= 108.883;
            return [
                x,
                y,
                z
            ];
        };
        convert.lab.lch = function(lab) {
            const l = lab[0];
            const a = lab[1];
            const b = lab[2];
            let h;
            const hr = Math.atan2(b, a);
            h = 360 * hr / 2 / Math.PI;
            if (h < 0) h += 360;
            const c = Math.sqrt(a * a + b * b);
            return [
                l,
                c,
                h
            ];
        };
        convert.lch.lab = function(lch) {
            const l = lch[0];
            const c = lch[1];
            const h = lch[2];
            const hr = h / 360 * 2 * Math.PI;
            const a = c * Math.cos(hr);
            const b = c * Math.sin(hr);
            return [
                l,
                a,
                b
            ];
        };
        convert.rgb.ansi16 = function(args, saturation = null) {
            const [r, g, b] = args;
            let value = null === saturation ? convert.rgb.hsv(args)[2] : saturation;
            value = Math.round(value / 50);
            if (0 === value) return 30;
            let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
            if (2 === value) ansi += 60;
            return ansi;
        };
        convert.hsv.ansi16 = function(args) {
            return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };
        convert.rgb.ansi256 = function(args) {
            const r = args[0];
            const g = args[1];
            const b = args[2];
            if (r === g && g === b) {
                if (r < 8) return 16;
                if (r > 248) return 231;
                return Math.round((r - 8) / 247 * 24) + 232;
            }
            const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
            return ansi;
        };
        convert.ansi16.rgb = function(args) {
            let color = args % 10;
            if (0 === color || 7 === color) {
                if (args > 50) color += 3.5;
                color = color / 10.5 * 255;
                return [
                    color,
                    color,
                    color
                ];
            }
            const mult = (~~(args > 50) + 1) * 0.5;
            const r = (1 & color) * mult * 255;
            const g = (color >> 1 & 1) * mult * 255;
            const b = (color >> 2 & 1) * mult * 255;
            return [
                r,
                g,
                b
            ];
        };
        convert.ansi256.rgb = function(args) {
            if (args >= 232) {
                const c = (args - 232) * 10 + 8;
                return [
                    c,
                    c,
                    c
                ];
            }
            args -= 16;
            let rem;
            const r = Math.floor(args / 36) / 5 * 255;
            const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
            const b = rem % 6 / 5 * 255;
            return [
                r,
                g,
                b
            ];
        };
        convert.rgb.hex = function(args) {
            const integer = ((0xFF & Math.round(args[0])) << 16) + ((0xFF & Math.round(args[1])) << 8) + (0xFF & Math.round(args[2]));
            const string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
        };
        convert.hex.rgb = function(args) {
            const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
            if (!match) return [
                0,
                0,
                0
            ];
            let colorString = match[0];
            if (3 === match[0].length) colorString = colorString.split('').map((char)=>char + char).join('');
            const integer = parseInt(colorString, 16);
            const r = integer >> 16 & 0xFF;
            const g = integer >> 8 & 0xFF;
            const b = 0xFF & integer;
            return [
                r,
                g,
                b
            ];
        };
        convert.rgb.hcg = function(rgb) {
            const r = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const max = Math.max(Math.max(r, g), b);
            const min = Math.min(Math.min(r, g), b);
            const chroma = max - min;
            let grayscale;
            let hue;
            grayscale = chroma < 1 ? min / (1 - chroma) : 0;
            hue = chroma <= 0 ? 0 : max === r ? (g - b) / chroma % 6 : max === g ? 2 + (b - r) / chroma : 4 + (r - g) / chroma;
            hue /= 6;
            hue %= 1;
            return [
                360 * hue,
                100 * chroma,
                100 * grayscale
            ];
        };
        convert.hsl.hcg = function(hsl) {
            const s = hsl[1] / 100;
            const l = hsl[2] / 100;
            const c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l);
            let f = 0;
            if (c < 1.0) f = (l - 0.5 * c) / (1.0 - c);
            return [
                hsl[0],
                100 * c,
                100 * f
            ];
        };
        convert.hsv.hcg = function(hsv) {
            const s = hsv[1] / 100;
            const v = hsv[2] / 100;
            const c = s * v;
            let f = 0;
            if (c < 1.0) f = (v - c) / (1 - c);
            return [
                hsv[0],
                100 * c,
                100 * f
            ];
        };
        convert.hcg.rgb = function(hcg) {
            const h = hcg[0] / 360;
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            if (0.0 === c) return [
                255 * g,
                255 * g,
                255 * g
            ];
            const pure = [
                0,
                0,
                0
            ];
            const hi = h % 1 * 6;
            const v = hi % 1;
            const w = 1 - v;
            let mg = 0;
            switch(Math.floor(hi)){
                case 0:
                    pure[0] = 1;
                    pure[1] = v;
                    pure[2] = 0;
                    break;
                case 1:
                    pure[0] = w;
                    pure[1] = 1;
                    pure[2] = 0;
                    break;
                case 2:
                    pure[0] = 0;
                    pure[1] = 1;
                    pure[2] = v;
                    break;
                case 3:
                    pure[0] = 0;
                    pure[1] = w;
                    pure[2] = 1;
                    break;
                case 4:
                    pure[0] = v;
                    pure[1] = 0;
                    pure[2] = 1;
                    break;
                default:
                    pure[0] = 1;
                    pure[1] = 0;
                    pure[2] = w;
            }
            mg = (1.0 - c) * g;
            return [
                (c * pure[0] + mg) * 255,
                (c * pure[1] + mg) * 255,
                (c * pure[2] + mg) * 255
            ];
        };
        convert.hcg.hsv = function(hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const v = c + g * (1.0 - c);
            let f = 0;
            if (v > 0.0) f = c / v;
            return [
                hcg[0],
                100 * f,
                100 * v
            ];
        };
        convert.hcg.hsl = function(hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const l = g * (1.0 - c) + 0.5 * c;
            let s = 0;
            if (l > 0.0 && l < 0.5) s = c / (2 * l);
            else if (l >= 0.5 && l < 1.0) s = c / (2 * (1 - l));
            return [
                hcg[0],
                100 * s,
                100 * l
            ];
        };
        convert.hcg.hwb = function(hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const v = c + g * (1.0 - c);
            return [
                hcg[0],
                (v - c) * 100,
                (1 - v) * 100
            ];
        };
        convert.hwb.hcg = function(hwb) {
            const w = hwb[1] / 100;
            const b = hwb[2] / 100;
            const v = 1 - b;
            const c = v - w;
            let g = 0;
            if (c < 1) g = (v - c) / (1 - c);
            return [
                hwb[0],
                100 * c,
                100 * g
            ];
        };
        convert.apple.rgb = function(apple) {
            return [
                apple[0] / 65535 * 255,
                apple[1] / 65535 * 255,
                apple[2] / 65535 * 255
            ];
        };
        convert.rgb.apple = function(rgb) {
            return [
                rgb[0] / 255 * 65535,
                rgb[1] / 255 * 65535,
                rgb[2] / 255 * 65535
            ];
        };
        convert.gray.rgb = function(args) {
            return [
                args[0] / 100 * 255,
                args[0] / 100 * 255,
                args[0] / 100 * 255
            ];
        };
        convert.gray.hsl = function(args) {
            return [
                0,
                0,
                args[0]
            ];
        };
        convert.gray.hsv = convert.gray.hsl;
        convert.gray.hwb = function(gray) {
            return [
                0,
                100,
                gray[0]
            ];
        };
        convert.gray.cmyk = function(gray) {
            return [
                0,
                0,
                0,
                gray[0]
            ];
        };
        convert.gray.lab = function(gray) {
            return [
                gray[0],
                0,
                0
            ];
        };
        convert.gray.hex = function(gray) {
            const val = 0xFF & Math.round(gray[0] / 100 * 255);
            const integer = (val << 16) + (val << 8) + val;
            const string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
        };
        convert.rgb.gray = function(rgb) {
            const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
            return [
                val / 255 * 100
            ];
        };
    },
    "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const conversions = __webpack_require__("../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js");
        const route = __webpack_require__("../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js");
        const convert = {};
        const models = Object.keys(conversions);
        function wrapRaw(fn) {
            const wrappedFn = function(...args) {
                const arg0 = args[0];
                if (null == arg0) return arg0;
                if (arg0.length > 1) args = arg0;
                return fn(args);
            };
            if ('conversion' in fn) wrappedFn.conversion = fn.conversion;
            return wrappedFn;
        }
        function wrapRounded(fn) {
            const wrappedFn = function(...args) {
                const arg0 = args[0];
                if (null == arg0) return arg0;
                if (arg0.length > 1) args = arg0;
                const result = fn(args);
                if ('object' == typeof result) for(let len = result.length, i = 0; i < len; i++)result[i] = Math.round(result[i]);
                return result;
            };
            if ('conversion' in fn) wrappedFn.conversion = fn.conversion;
            return wrappedFn;
        }
        models.forEach((fromModel)=>{
            convert[fromModel] = {};
            Object.defineProperty(convert[fromModel], 'channels', {
                value: conversions[fromModel].channels
            });
            Object.defineProperty(convert[fromModel], 'labels', {
                value: conversions[fromModel].labels
            });
            const routes = route(fromModel);
            const routeModels = Object.keys(routes);
            routeModels.forEach((toModel)=>{
                const fn = routes[toModel];
                convert[fromModel][toModel] = wrapRounded(fn);
                convert[fromModel][toModel].raw = wrapRaw(fn);
            });
        });
        module.exports = convert;
    },
    "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const conversions = __webpack_require__("../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js");
        function buildGraph() {
            const graph = {};
            const models = Object.keys(conversions);
            for(let len = models.length, i = 0; i < len; i++)graph[models[i]] = {
                distance: -1,
                parent: null
            };
            return graph;
        }
        function deriveBFS(fromModel) {
            const graph = buildGraph();
            const queue = [
                fromModel
            ];
            graph[fromModel].distance = 0;
            while(queue.length){
                const current = queue.pop();
                const adjacents = Object.keys(conversions[current]);
                for(let len = adjacents.length, i = 0; i < len; i++){
                    const adjacent = adjacents[i];
                    const node = graph[adjacent];
                    if (-1 === node.distance) {
                        node.distance = graph[current].distance + 1;
                        node.parent = current;
                        queue.unshift(adjacent);
                    }
                }
            }
            return graph;
        }
        function link(from, to) {
            return function(args) {
                return to(from(args));
            };
        }
        function wrapConversion(toModel, graph) {
            const path = [
                graph[toModel].parent,
                toModel
            ];
            let fn = conversions[graph[toModel].parent][toModel];
            let cur = graph[toModel].parent;
            while(graph[cur].parent){
                path.unshift(graph[cur].parent);
                fn = link(conversions[graph[cur].parent][cur], fn);
                cur = graph[cur].parent;
            }
            fn.conversion = path;
            return fn;
        }
        module.exports = function(fromModel) {
            const graph = deriveBFS(fromModel);
            const conversion = {};
            const models = Object.keys(graph);
            for(let len = models.length, i = 0; i < len; i++){
                const toModel = models[i];
                const node = graph[toModel];
                if (null !== node.parent) conversion[toModel] = wrapConversion(toModel, graph);
            }
            return conversion;
        };
    },
    "../../node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js": function(module) {
        "use strict";
        module.exports = {
            aliceblue: [
                240,
                248,
                255
            ],
            antiquewhite: [
                250,
                235,
                215
            ],
            aqua: [
                0,
                255,
                255
            ],
            aquamarine: [
                127,
                255,
                212
            ],
            azure: [
                240,
                255,
                255
            ],
            beige: [
                245,
                245,
                220
            ],
            bisque: [
                255,
                228,
                196
            ],
            black: [
                0,
                0,
                0
            ],
            blanchedalmond: [
                255,
                235,
                205
            ],
            blue: [
                0,
                0,
                255
            ],
            blueviolet: [
                138,
                43,
                226
            ],
            brown: [
                165,
                42,
                42
            ],
            burlywood: [
                222,
                184,
                135
            ],
            cadetblue: [
                95,
                158,
                160
            ],
            chartreuse: [
                127,
                255,
                0
            ],
            chocolate: [
                210,
                105,
                30
            ],
            coral: [
                255,
                127,
                80
            ],
            cornflowerblue: [
                100,
                149,
                237
            ],
            cornsilk: [
                255,
                248,
                220
            ],
            crimson: [
                220,
                20,
                60
            ],
            cyan: [
                0,
                255,
                255
            ],
            darkblue: [
                0,
                0,
                139
            ],
            darkcyan: [
                0,
                139,
                139
            ],
            darkgoldenrod: [
                184,
                134,
                11
            ],
            darkgray: [
                169,
                169,
                169
            ],
            darkgreen: [
                0,
                100,
                0
            ],
            darkgrey: [
                169,
                169,
                169
            ],
            darkkhaki: [
                189,
                183,
                107
            ],
            darkmagenta: [
                139,
                0,
                139
            ],
            darkolivegreen: [
                85,
                107,
                47
            ],
            darkorange: [
                255,
                140,
                0
            ],
            darkorchid: [
                153,
                50,
                204
            ],
            darkred: [
                139,
                0,
                0
            ],
            darksalmon: [
                233,
                150,
                122
            ],
            darkseagreen: [
                143,
                188,
                143
            ],
            darkslateblue: [
                72,
                61,
                139
            ],
            darkslategray: [
                47,
                79,
                79
            ],
            darkslategrey: [
                47,
                79,
                79
            ],
            darkturquoise: [
                0,
                206,
                209
            ],
            darkviolet: [
                148,
                0,
                211
            ],
            deeppink: [
                255,
                20,
                147
            ],
            deepskyblue: [
                0,
                191,
                255
            ],
            dimgray: [
                105,
                105,
                105
            ],
            dimgrey: [
                105,
                105,
                105
            ],
            dodgerblue: [
                30,
                144,
                255
            ],
            firebrick: [
                178,
                34,
                34
            ],
            floralwhite: [
                255,
                250,
                240
            ],
            forestgreen: [
                34,
                139,
                34
            ],
            fuchsia: [
                255,
                0,
                255
            ],
            gainsboro: [
                220,
                220,
                220
            ],
            ghostwhite: [
                248,
                248,
                255
            ],
            gold: [
                255,
                215,
                0
            ],
            goldenrod: [
                218,
                165,
                32
            ],
            gray: [
                128,
                128,
                128
            ],
            green: [
                0,
                128,
                0
            ],
            greenyellow: [
                173,
                255,
                47
            ],
            grey: [
                128,
                128,
                128
            ],
            honeydew: [
                240,
                255,
                240
            ],
            hotpink: [
                255,
                105,
                180
            ],
            indianred: [
                205,
                92,
                92
            ],
            indigo: [
                75,
                0,
                130
            ],
            ivory: [
                255,
                255,
                240
            ],
            khaki: [
                240,
                230,
                140
            ],
            lavender: [
                230,
                230,
                250
            ],
            lavenderblush: [
                255,
                240,
                245
            ],
            lawngreen: [
                124,
                252,
                0
            ],
            lemonchiffon: [
                255,
                250,
                205
            ],
            lightblue: [
                173,
                216,
                230
            ],
            lightcoral: [
                240,
                128,
                128
            ],
            lightcyan: [
                224,
                255,
                255
            ],
            lightgoldenrodyellow: [
                250,
                250,
                210
            ],
            lightgray: [
                211,
                211,
                211
            ],
            lightgreen: [
                144,
                238,
                144
            ],
            lightgrey: [
                211,
                211,
                211
            ],
            lightpink: [
                255,
                182,
                193
            ],
            lightsalmon: [
                255,
                160,
                122
            ],
            lightseagreen: [
                32,
                178,
                170
            ],
            lightskyblue: [
                135,
                206,
                250
            ],
            lightslategray: [
                119,
                136,
                153
            ],
            lightslategrey: [
                119,
                136,
                153
            ],
            lightsteelblue: [
                176,
                196,
                222
            ],
            lightyellow: [
                255,
                255,
                224
            ],
            lime: [
                0,
                255,
                0
            ],
            limegreen: [
                50,
                205,
                50
            ],
            linen: [
                250,
                240,
                230
            ],
            magenta: [
                255,
                0,
                255
            ],
            maroon: [
                128,
                0,
                0
            ],
            mediumaquamarine: [
                102,
                205,
                170
            ],
            mediumblue: [
                0,
                0,
                205
            ],
            mediumorchid: [
                186,
                85,
                211
            ],
            mediumpurple: [
                147,
                112,
                219
            ],
            mediumseagreen: [
                60,
                179,
                113
            ],
            mediumslateblue: [
                123,
                104,
                238
            ],
            mediumspringgreen: [
                0,
                250,
                154
            ],
            mediumturquoise: [
                72,
                209,
                204
            ],
            mediumvioletred: [
                199,
                21,
                133
            ],
            midnightblue: [
                25,
                25,
                112
            ],
            mintcream: [
                245,
                255,
                250
            ],
            mistyrose: [
                255,
                228,
                225
            ],
            moccasin: [
                255,
                228,
                181
            ],
            navajowhite: [
                255,
                222,
                173
            ],
            navy: [
                0,
                0,
                128
            ],
            oldlace: [
                253,
                245,
                230
            ],
            olive: [
                128,
                128,
                0
            ],
            olivedrab: [
                107,
                142,
                35
            ],
            orange: [
                255,
                165,
                0
            ],
            orangered: [
                255,
                69,
                0
            ],
            orchid: [
                218,
                112,
                214
            ],
            palegoldenrod: [
                238,
                232,
                170
            ],
            palegreen: [
                152,
                251,
                152
            ],
            paleturquoise: [
                175,
                238,
                238
            ],
            palevioletred: [
                219,
                112,
                147
            ],
            papayawhip: [
                255,
                239,
                213
            ],
            peachpuff: [
                255,
                218,
                185
            ],
            peru: [
                205,
                133,
                63
            ],
            pink: [
                255,
                192,
                203
            ],
            plum: [
                221,
                160,
                221
            ],
            powderblue: [
                176,
                224,
                230
            ],
            purple: [
                128,
                0,
                128
            ],
            rebeccapurple: [
                102,
                51,
                153
            ],
            red: [
                255,
                0,
                0
            ],
            rosybrown: [
                188,
                143,
                143
            ],
            royalblue: [
                65,
                105,
                225
            ],
            saddlebrown: [
                139,
                69,
                19
            ],
            salmon: [
                250,
                128,
                114
            ],
            sandybrown: [
                244,
                164,
                96
            ],
            seagreen: [
                46,
                139,
                87
            ],
            seashell: [
                255,
                245,
                238
            ],
            sienna: [
                160,
                82,
                45
            ],
            silver: [
                192,
                192,
                192
            ],
            skyblue: [
                135,
                206,
                235
            ],
            slateblue: [
                106,
                90,
                205
            ],
            slategray: [
                112,
                128,
                144
            ],
            slategrey: [
                112,
                128,
                144
            ],
            snow: [
                255,
                250,
                250
            ],
            springgreen: [
                0,
                255,
                127
            ],
            steelblue: [
                70,
                130,
                180
            ],
            tan: [
                210,
                180,
                140
            ],
            teal: [
                0,
                128,
                128
            ],
            thistle: [
                216,
                191,
                216
            ],
            tomato: [
                255,
                99,
                71
            ],
            turquoise: [
                64,
                224,
                208
            ],
            violet: [
                238,
                130,
                238
            ],
            wheat: [
                245,
                222,
                179
            ],
            white: [
                255,
                255,
                255
            ],
            whitesmoke: [
                245,
                245,
                245
            ],
            yellow: [
                255,
                255,
                0
            ],
            yellowgreen: [
                154,
                205,
                50
            ]
        };
    },
    "../../node_modules/.pnpm/dotenv@16.4.5/node_modules/dotenv/lib/main.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const fs = __webpack_require__("fs");
        const path = __webpack_require__("path");
        const os = __webpack_require__("os");
        const crypto = __webpack_require__("crypto");
        const packageJson = __webpack_require__("../../node_modules/.pnpm/dotenv@16.4.5/node_modules/dotenv/package.json");
        const version = packageJson.version;
        const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
        function parse(src) {
            const obj = {};
            let lines = src.toString();
            lines = lines.replace(/\r\n?/mg, '\n');
            let match;
            while(null != (match = LINE.exec(lines))){
                const key = match[1];
                let value = match[2] || '';
                value = value.trim();
                const maybeQuote = value[0];
                value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2');
                if ('"' === maybeQuote) {
                    value = value.replace(/\\n/g, '\n');
                    value = value.replace(/\\r/g, '\r');
                }
                obj[key] = value;
            }
            return obj;
        }
        function _parseVault(options) {
            const vaultPath = _vaultPath(options);
            const result = DotenvModule.configDotenv({
                path: vaultPath
            });
            if (!result.parsed) {
                const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
                err.code = 'MISSING_DATA';
                throw err;
            }
            const keys = _dotenvKey(options).split(',');
            const length = keys.length;
            let decrypted;
            for(let i = 0; i < length; i++)try {
                const key = keys[i].trim();
                const attrs = _instructions(result, key);
                decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
                break;
            } catch (error) {
                if (i + 1 >= length) throw error;
            }
            return DotenvModule.parse(decrypted);
        }
        function _log(message) {
            console.log(`[dotenv@${version}][INFO] ${message}`);
        }
        function _warn(message) {
            console.log(`[dotenv@${version}][WARN] ${message}`);
        }
        function _debug(message) {
            console.log(`[dotenv@${version}][DEBUG] ${message}`);
        }
        function _dotenvKey(options) {
            if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) return options.DOTENV_KEY;
            if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) return process.env.DOTENV_KEY;
            return '';
        }
        function _instructions(result, dotenvKey) {
            let uri;
            try {
                uri = new URL(dotenvKey);
            } catch (error) {
                if ('ERR_INVALID_URL' === error.code) {
                    const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development');
                    err.code = 'INVALID_DOTENV_KEY';
                    throw err;
                }
                throw error;
            }
            const key = uri.password;
            if (!key) {
                const err = new Error('INVALID_DOTENV_KEY: Missing key part');
                err.code = 'INVALID_DOTENV_KEY';
                throw err;
            }
            const environment = uri.searchParams.get('environment');
            if (!environment) {
                const err = new Error('INVALID_DOTENV_KEY: Missing environment part');
                err.code = 'INVALID_DOTENV_KEY';
                throw err;
            }
            const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
            const ciphertext = result.parsed[environmentKey];
            if (!ciphertext) {
                const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
                err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT';
                throw err;
            }
            return {
                ciphertext,
                key
            };
        }
        function _vaultPath(options) {
            let possibleVaultPath = null;
            if (options && options.path && options.path.length > 0) if (Array.isArray(options.path)) {
                for (const filepath of options.path)if (fs.existsSync(filepath)) possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`;
            } else possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`;
            else possibleVaultPath = path.resolve(process.cwd(), '.env.vault');
            if (fs.existsSync(possibleVaultPath)) return possibleVaultPath;
            return null;
        }
        function _resolveHome(envPath) {
            return '~' === envPath[0] ? path.join(os.homedir(), envPath.slice(1)) : envPath;
        }
        function _configVault(options) {
            _log('Loading env from encrypted .env.vault');
            const parsed = DotenvModule._parseVault(options);
            let processEnv = process.env;
            if (options && null != options.processEnv) processEnv = options.processEnv;
            DotenvModule.populate(processEnv, parsed, options);
            return {
                parsed
            };
        }
        function configDotenv(options) {
            const dotenvPath = path.resolve(process.cwd(), '.env');
            let encoding = 'utf8';
            const debug = Boolean(options && options.debug);
            if (options && options.encoding) encoding = options.encoding;
            else if (debug) _debug('No encoding is specified. UTF-8 is used by default');
            let optionPaths = [
                dotenvPath
            ];
            if (options && options.path) if (Array.isArray(options.path)) {
                optionPaths = [];
                for (const filepath of options.path)optionPaths.push(_resolveHome(filepath));
            } else optionPaths = [
                _resolveHome(options.path)
            ];
            let lastError;
            const parsedAll = {};
            for (const path of optionPaths)try {
                const parsed = DotenvModule.parse(fs.readFileSync(path, {
                    encoding
                }));
                DotenvModule.populate(parsedAll, parsed, options);
            } catch (e1) {
                if (debug) _debug(`Failed to load ${path} ${e1.message}`);
                lastError = e1;
            }
            let processEnv = process.env;
            if (options && null != options.processEnv) processEnv = options.processEnv;
            DotenvModule.populate(processEnv, parsedAll, options);
            if (lastError) return {
                parsed: parsedAll,
                error: lastError
            };
            return {
                parsed: parsedAll
            };
        }
        function config(options) {
            if (0 === _dotenvKey(options).length) return DotenvModule.configDotenv(options);
            const vaultPath = _vaultPath(options);
            if (!vaultPath) {
                _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
                return DotenvModule.configDotenv(options);
            }
            return DotenvModule._configVault(options);
        }
        function decrypt(encrypted, keyStr) {
            const key = Buffer.from(keyStr.slice(-64), 'hex');
            let ciphertext = Buffer.from(encrypted, 'base64');
            const nonce = ciphertext.subarray(0, 12);
            const authTag = ciphertext.subarray(-16);
            ciphertext = ciphertext.subarray(12, -16);
            try {
                const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce);
                aesgcm.setAuthTag(authTag);
                return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
            } catch (error) {
                const isRange = error instanceof RangeError;
                const invalidKeyLength = 'Invalid key length' === error.message;
                const decryptionFailed = 'Unsupported state or unable to authenticate data' === error.message;
                if (isRange || invalidKeyLength) {
                    const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)');
                    err.code = 'INVALID_DOTENV_KEY';
                    throw err;
                }
                if (decryptionFailed) {
                    const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY');
                    err.code = 'DECRYPTION_FAILED';
                    throw err;
                }
                throw error;
            }
        }
        function populate(processEnv, parsed, options = {}) {
            const debug = Boolean(options && options.debug);
            const override = Boolean(options && options.override);
            if ('object' != typeof parsed) {
                const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate');
                err.code = 'OBJECT_REQUIRED';
                throw err;
            }
            for (const key of Object.keys(parsed))if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
                if (true === override) processEnv[key] = parsed[key];
                if (debug) true === override ? _debug(`"${key}" is already defined and WAS overwritten`) : _debug(`"${key}" is already defined and was NOT overwritten`);
            } else processEnv[key] = parsed[key];
        }
        const DotenvModule = {
            configDotenv,
            _configVault,
            _parseVault,
            config,
            decrypt,
            parse,
            populate
        };
        module.exports.configDotenv = DotenvModule.configDotenv;
        module.exports._configVault = DotenvModule._configVault;
        module.exports._parseVault = DotenvModule._parseVault;
        module.exports.config = DotenvModule.config;
        module.exports.decrypt = DotenvModule.decrypt;
        module.exports.parse = DotenvModule.parse;
        module.exports.populate = DotenvModule.populate;
        module.exports = DotenvModule;
    },
    "../../node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js": function(module) {
        "use strict";
        module.exports = function() {
            return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
        };
    },
    "../../node_modules/.pnpm/escalade@3.2.0/node_modules/escalade/sync/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        const { dirname, resolve } = __webpack_require__("path");
        const { readdirSync, statSync } = __webpack_require__("fs");
        module.exports = function(start, callback) {
            let dir = resolve('.', start);
            let tmp, stats = statSync(dir);
            if (!stats.isDirectory()) dir = dirname(dir);
            while(true){
                tmp = callback(dir, readdirSync(dir));
                if (tmp) return resolve(dir, tmp);
                dir = dirname(tmp = dir);
                if (tmp === dir) break;
            }
        };
    },
    "../../node_modules/.pnpm/get-caller-file@2.0.5/node_modules/get-caller-file/index.js": function(module) {
        "use strict";
        module.exports = function(position) {
            if (void 0 === position) position = 2;
            if (position >= Error.stackTraceLimit) throw new TypeError('getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `' + position + '` and Error.stackTraceLimit was: `' + Error.stackTraceLimit + '`');
            var oldPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = function(_, stack) {
                return stack;
            };
            var stack = new Error().stack;
            Error.prepareStackTrace = oldPrepareStackTrace;
            if (null !== stack && 'object' == typeof stack) return stack[position] ? stack[position].getFileName() : void 0;
        };
    },
    "../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": function(module) {
        "use strict";
        module.exports = (flag, argv = process.argv)=>{
            const prefix = flag.startsWith('-') ? '' : 1 === flag.length ? '-' : '--';
            const position = argv.indexOf(prefix + flag);
            const terminatorPosition = argv.indexOf('--');
            return -1 !== position && (-1 === terminatorPosition || position < terminatorPosition);
        };
    },
    "../../node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js": function(module) {
        "use strict";
        const isFullwidthCodePoint = (codePoint)=>{
            if (Number.isNaN(codePoint)) return false;
            if (codePoint >= 0x1100 && (codePoint <= 0x115F || 0x2329 === codePoint || 0x232A === codePoint || 0x2E80 <= codePoint && codePoint <= 0x3247 && 0x303F !== codePoint || 0x3250 <= codePoint && codePoint <= 0x4DBF || 0x4E00 <= codePoint && codePoint <= 0xA4C6 || 0xA960 <= codePoint && codePoint <= 0xA97C || 0xAC00 <= codePoint && codePoint <= 0xD7A3 || 0xF900 <= codePoint && codePoint <= 0xFAFF || 0xFE10 <= codePoint && codePoint <= 0xFE19 || 0xFE30 <= codePoint && codePoint <= 0xFE6B || 0xFF01 <= codePoint && codePoint <= 0xFF60 || 0xFFE0 <= codePoint && codePoint <= 0xFFE6 || 0x1B000 <= codePoint && codePoint <= 0x1B001 || 0x1F200 <= codePoint && codePoint <= 0x1F251 || 0x20000 <= codePoint && codePoint <= 0x3FFFD)) return true;
            return false;
        };
        module.exports = isFullwidthCodePoint;
        module.exports["default"] = isFullwidthCodePoint;
    },
    "../../node_modules/.pnpm/require-directory@2.1.1/node_modules/require-directory/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        var fs = __webpack_require__("fs"), join = __webpack_require__("path").join, resolve = __webpack_require__("path").resolve, dirname = __webpack_require__("path").dirname, defaultOptions = {
            extensions: [
                'js',
                'json',
                'coffee'
            ],
            recurse: true,
            rename: function(name) {
                return name;
            },
            visit: function(obj) {
                return obj;
            }
        };
        function checkFileInclusion(path, filename, options) {
            return new RegExp('\\.(' + options.extensions.join('|') + ')$', 'i').test(filename) && !(options.include && options.include instanceof RegExp && !options.include.test(path)) && !(options.include && 'function' == typeof options.include && !options.include(path, filename)) && !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) && !(options.exclude && 'function' == typeof options.exclude && options.exclude(path, filename));
        }
        function requireDirectory(m, path, options) {
            var retval = {};
            if (path && !options && 'string' != typeof path) {
                options = path;
                path = null;
            }
            options = options || {};
            for(var prop in defaultOptions)if (void 0 === options[prop]) options[prop] = defaultOptions[prop];
            path = path ? resolve(dirname(m.filename), path) : dirname(m.filename);
            fs.readdirSync(path).forEach(function(filename) {
                var joined = join(path, filename), files, key, obj;
                if (fs.statSync(joined).isDirectory() && options.recurse) {
                    files = requireDirectory(m, joined, options);
                    if (Object.keys(files).length) retval[options.rename(filename, joined, filename)] = files;
                } else if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {
                    key = filename.substring(0, filename.lastIndexOf('.'));
                    obj = m.require(joined);
                    retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;
                }
            });
            return retval;
        }
        module.exports = requireDirectory;
        module.exports.defaults = defaultOptions;
    },
    "../../node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        const stripAnsi = __webpack_require__("../../node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js");
        const isFullwidthCodePoint = __webpack_require__("../../node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js");
        const emojiRegex = __webpack_require__("../../node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js");
        const stringWidth = (string)=>{
            if ('string' != typeof string || 0 === string.length) return 0;
            string = stripAnsi(string);
            if (0 === string.length) return 0;
            string = string.replace(emojiRegex(), '  ');
            let width = 0;
            for(let i = 0; i < string.length; i++){
                const code = string.codePointAt(i);
                if (!(code <= 0x1F) && (!(code >= 0x7F) || !(code <= 0x9F))) {
                    if (!(code >= 0x300) || !(code <= 0x36F)) {
                        if (code > 0xFFFF) i++;
                        width += isFullwidthCodePoint(code) ? 2 : 1;
                    }
                }
            }
            return width;
        };
        module.exports = stringWidth;
        module.exports["default"] = stringWidth;
    },
    "../../node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        const ansiRegex = __webpack_require__("../../node_modules/.pnpm/ansi-regex@5.0.1/node_modules/ansi-regex/index.js");
        module.exports = (string)=>'string' == typeof string ? string.replace(ansiRegex(), '') : string;
    },
    "../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        const os = __webpack_require__("os");
        const tty = __webpack_require__("tty");
        const hasFlag = __webpack_require__("../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js");
        const { env } = process;
        let forceColor;
        if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) forceColor = 0;
        else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) forceColor = 1;
        if ('FORCE_COLOR' in env) forceColor = 'true' === env.FORCE_COLOR ? 1 : 'false' === env.FORCE_COLOR ? 0 : 0 === env.FORCE_COLOR.length ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
        function translateLevel(level) {
            if (0 === level) return false;
            return {
                level,
                hasBasic: true,
                has256: level >= 2,
                has16m: level >= 3
            };
        }
        function supportsColor(haveStream, streamIsTTY) {
            if (0 === forceColor) return 0;
            if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) return 3;
            if (hasFlag('color=256')) return 2;
            if (haveStream && !streamIsTTY && void 0 === forceColor) return 0;
            const min = forceColor || 0;
            if ('dumb' === env.TERM) return min;
            if ('win32' === process.platform) {
                const osRelease = os.release().split('.');
                if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) return Number(osRelease[2]) >= 14931 ? 3 : 2;
                return 1;
            }
            if ('CI' in env) {
                if ([
                    'TRAVIS',
                    'CIRCLECI',
                    'APPVEYOR',
                    'GITLAB_CI',
                    'GITHUB_ACTIONS',
                    'BUILDKITE'
                ].some((sign)=>sign in env) || 'codeship' === env.CI_NAME) return 1;
                return min;
            }
            if ('TEAMCITY_VERSION' in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
            if ('truecolor' === env.COLORTERM) return 3;
            if ('TERM_PROGRAM' in env) {
                const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
                switch(env.TERM_PROGRAM){
                    case 'iTerm.app':
                        return version >= 3 ? 3 : 2;
                    case 'Apple_Terminal':
                        return 2;
                }
            }
            if (/-256(color)?$/i.test(env.TERM)) return 2;
            if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) return 1;
            if ('COLORTERM' in env) return 1;
            return min;
        }
        function getSupportLevel(stream) {
            const level = supportsColor(stream, stream && stream.isTTY);
            return translateLevel(level);
        }
        module.exports = {
            supportsColor: getSupportLevel,
            stdout: translateLevel(supportsColor(true, tty.isatty(1))),
            stderr: translateLevel(supportsColor(true, tty.isatty(2)))
        };
    },
    "../../node_modules/.pnpm/wrap-ansi@7.0.0/node_modules/wrap-ansi/index.js": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        const stringWidth = __webpack_require__("../../node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js");
        const stripAnsi = __webpack_require__("../../node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js");
        const ansiStyles = __webpack_require__("../../node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js");
        const ESCAPES = new Set([
            '\u001B',
            '\u009B'
        ]);
        const END_CODE = 39;
        const ANSI_ESCAPE_BELL = '\u0007';
        const ANSI_CSI = '[';
        const ANSI_OSC = ']';
        const ANSI_SGR_TERMINATOR = 'm';
        const ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;
        const wrapAnsi = (code)=>`${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;
        const wrapAnsiHyperlink = (uri)=>`${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;
        const wordLengths = (string)=>string.split(' ').map((character)=>stringWidth(character));
        const wrapWord = (rows, word, columns)=>{
            const characters = [
                ...word
            ];
            let isInsideEscape = false;
            let isInsideLinkEscape = false;
            let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
            for (const [index, character] of characters.entries()){
                const characterLength = stringWidth(character);
                if (visible + characterLength <= columns) rows[rows.length - 1] += character;
                else {
                    rows.push(character);
                    visible = 0;
                }
                if (ESCAPES.has(character)) {
                    isInsideEscape = true;
                    isInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);
                }
                if (isInsideEscape) {
                    if (isInsideLinkEscape) {
                        if (character === ANSI_ESCAPE_BELL) {
                            isInsideEscape = false;
                            isInsideLinkEscape = false;
                        }
                    } else if (character === ANSI_SGR_TERMINATOR) isInsideEscape = false;
                    continue;
                }
                visible += characterLength;
                if (visible === columns && index < characters.length - 1) {
                    rows.push('');
                    visible = 0;
                }
            }
            if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) rows[rows.length - 2] += rows.pop();
        };
        const stringVisibleTrimSpacesRight = (string)=>{
            const words = string.split(' ');
            let last = words.length;
            while(last > 0){
                if (stringWidth(words[last - 1]) > 0) break;
                last--;
            }
            if (last === words.length) return string;
            return words.slice(0, last).join(' ') + words.slice(last).join('');
        };
        const exec = (string, columns, options = {})=>{
            if (false !== options.trim && '' === string.trim()) return '';
            let returnValue = '';
            let escapeCode;
            let escapeUrl;
            const lengths = wordLengths(string);
            let rows = [
                ''
            ];
            for (const [index, word] of string.split(' ').entries()){
                if (false !== options.trim) rows[rows.length - 1] = rows[rows.length - 1].trimStart();
                let rowLength = stringWidth(rows[rows.length - 1]);
                if (0 !== index) {
                    if (rowLength >= columns && (false === options.wordWrap || false === options.trim)) {
                        rows.push('');
                        rowLength = 0;
                    }
                    if (rowLength > 0 || false === options.trim) {
                        rows[rows.length - 1] += ' ';
                        rowLength++;
                    }
                }
                if (options.hard && lengths[index] > columns) {
                    const remainingColumns = columns - rowLength;
                    const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
                    const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
                    if (breaksStartingNextLine < breaksStartingThisLine) rows.push('');
                    wrapWord(rows, word, columns);
                    continue;
                }
                if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
                    if (false === options.wordWrap && rowLength < columns) {
                        wrapWord(rows, word, columns);
                        continue;
                    }
                    rows.push('');
                }
                if (rowLength + lengths[index] > columns && false === options.wordWrap) {
                    wrapWord(rows, word, columns);
                    continue;
                }
                rows[rows.length - 1] += word;
            }
            if (false !== options.trim) rows = rows.map(stringVisibleTrimSpacesRight);
            const pre = [
                ...rows.join('\n')
            ];
            for (const [index, character] of pre.entries()){
                returnValue += character;
                if (ESCAPES.has(character)) {
                    const { groups } = new RegExp(`(?:\\${ANSI_CSI}(?<code>\\d+)m|\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {
                        groups: {}
                    };
                    if (void 0 !== groups.code) {
                        const code = Number.parseFloat(groups.code);
                        escapeCode = code === END_CODE ? void 0 : code;
                    } else if (void 0 !== groups.uri) escapeUrl = 0 === groups.uri.length ? void 0 : groups.uri;
                }
                const code = ansiStyles.codes.get(Number(escapeCode));
                if ('\n' === pre[index + 1]) {
                    if (escapeUrl) returnValue += wrapAnsiHyperlink('');
                    if (escapeCode && code) returnValue += wrapAnsi(code);
                } else if ('\n' === character) {
                    if (escapeCode && code) returnValue += wrapAnsi(escapeCode);
                    if (escapeUrl) returnValue += wrapAnsiHyperlink(escapeUrl);
                }
            }
            return returnValue;
        };
        module.exports = (string, columns, options)=>String(string).normalize().replace(/\r\n/g, '\n').split('\n').map((line)=>exec(line, columns, options)).join('\n');
    },
    "./src/index.ts": function(__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) {
        "use strict";
        const external_node_fs_namespaceObject = require("node:fs");
        var external_node_fs_namespaceObject_0 = /*#__PURE__*/ __webpack_require__.t(external_node_fs_namespaceObject, 2);
        const external_node_path_namespaceObject = require("node:path");
        var main = __webpack_require__("../../node_modules/.pnpm/dotenv@16.4.5/node_modules/dotenv/lib/main.js");
        var main_default = /*#__PURE__*/ __webpack_require__.n(main);
        var package_namespaceObject = {
            i8: "0.27.6"
        };
        const yaml_namespaceObject = require("@midscene/core/yaml");
        const common_namespaceObject = require("@midscene/shared/common");
        const external_lodash_merge_namespaceObject = require("lodash.merge");
        var external_lodash_merge_default = /*#__PURE__*/ __webpack_require__.n(external_lodash_merge_namespaceObject);
        class Node {
            value;
            next;
            constructor(value){
                this.value = value;
            }
        }
        class Queue {
            #head;
            #tail;
            #size;
            constructor(){
                this.clear();
            }
            enqueue(value) {
                const node = new Node(value);
                if (this.#head) {
                    this.#tail.next = node;
                    this.#tail = node;
                } else {
                    this.#head = node;
                    this.#tail = node;
                }
                this.#size++;
            }
            dequeue() {
                const current = this.#head;
                if (!current) return;
                this.#head = this.#head.next;
                this.#size--;
                return current.value;
            }
            peek() {
                if (!this.#head) return;
                return this.#head.value;
            }
            clear() {
                this.#head = void 0;
                this.#tail = void 0;
                this.#size = 0;
            }
            get size() {
                return this.#size;
            }
            *[Symbol.iterator]() {
                let current = this.#head;
                while(current){
                    yield current.value;
                    current = current.next;
                }
            }
            *drain() {
                while(this.#head)yield this.dequeue();
            }
        }
        function pLimit(concurrency) {
            validateConcurrency(concurrency);
            const queue = new Queue();
            let activeCount = 0;
            const resumeNext = ()=>{
                if (activeCount < concurrency && queue.size > 0) {
                    queue.dequeue()();
                    activeCount++;
                }
            };
            const next = ()=>{
                activeCount--;
                resumeNext();
            };
            const run = async (function_, resolve, arguments_)=>{
                const result = (async ()=>function_(...arguments_))();
                resolve(result);
                try {
                    await result;
                } catch  {}
                next();
            };
            const enqueue = (function_, resolve, arguments_)=>{
                new Promise((internalResolve)=>{
                    queue.enqueue(internalResolve);
                }).then(run.bind(void 0, function_, resolve, arguments_));
                (async ()=>{
                    await Promise.resolve();
                    if (activeCount < concurrency) resumeNext();
                })();
            };
            const generator = (function_, ...arguments_)=>new Promise((resolve)=>{
                    enqueue(function_, resolve, arguments_);
                });
            Object.defineProperties(generator, {
                activeCount: {
                    get: ()=>activeCount
                },
                pendingCount: {
                    get: ()=>queue.size
                },
                clearQueue: {
                    value () {
                        queue.clear();
                    }
                },
                concurrency: {
                    get: ()=>concurrency,
                    set (newConcurrency) {
                        validateConcurrency(newConcurrency);
                        concurrency = newConcurrency;
                        queueMicrotask(()=>{
                            while(activeCount < concurrency && queue.size > 0)resumeNext();
                        });
                    }
                }
            });
            return generator;
        }
        function validateConcurrency(concurrency) {
            if (!((Number.isInteger(concurrency) || concurrency === 1 / 0) && concurrency > 0)) throw new TypeError('Expected `concurrency` to be a number from 1 and up');
        }
        const external_puppeteer_namespaceObject = require("puppeteer");
        var external_puppeteer_default = /*#__PURE__*/ __webpack_require__.n(external_puppeteer_namespaceObject);
        const external_http_server_namespaceObject = require("http-server");
        const external_node_assert_namespaceObject = require("node:assert");
        var external_node_assert_default = /*#__PURE__*/ __webpack_require__.n(external_node_assert_namespaceObject);
        const android_namespaceObject = require("@midscene/android");
        const bridge_mode_namespaceObject = require("@midscene/web/bridge-mode");
        const puppeteer_agent_launcher_namespaceObject = require("@midscene/web/puppeteer-agent-launcher");
        const launchServer = async (dir)=>new Promise((resolve)=>{
                const server = (0, external_http_server_namespaceObject.createServer)({
                    root: dir
                });
                server.listen(0, '127.0.0.1', ()=>{
                    resolve(server);
                });
            });
        async function createYamlPlayer(file, script, options) {
            const yamlScript = script || (0, yaml_namespaceObject.parseYamlScript)((0, external_node_fs_namespaceObject.readFileSync)(file, 'utf-8'), file);
            const fileName = (0, external_node_path_namespaceObject.basename)(file, (0, external_node_path_namespaceObject.extname)(file));
            const preference = {
                headed: null == options ? void 0 : options.headed,
                keepWindow: null == options ? void 0 : options.keepWindow,
                testId: fileName,
                cacheId: fileName
            };
            const player = new yaml_namespaceObject.ScriptPlayer(yamlScript, async ()=>{
                const freeFn = [];
                const webTarget = yamlScript.web || yamlScript.target;
                if (void 0 !== webTarget) {
                    if (void 0 !== yamlScript.target) console.warn("target is deprecated, please use web instead. See https://midscenejs.com/automate-with-scripts-in-yaml for more information. Sorry for the inconvenience.");
                    let localServer;
                    let urlToVisit;
                    if (webTarget.serve) {
                        external_node_assert_default()('string' == typeof webTarget.url, 'url is required in serve mode');
                        localServer = await launchServer(webTarget.serve);
                        const serverAddress = localServer.server.address();
                        freeFn.push({
                            name: 'local_server',
                            fn: ()=>null == localServer ? void 0 : localServer.server.close()
                        });
                        urlToVisit = webTarget.url.startsWith('/') ? `http://${null == serverAddress ? void 0 : serverAddress.address}:${null == serverAddress ? void 0 : serverAddress.port}${webTarget.url}` : `http://${null == serverAddress ? void 0 : serverAddress.address}:${null == serverAddress ? void 0 : serverAddress.port}/${webTarget.url}`;
                        webTarget.url = urlToVisit;
                    }
                    if (!webTarget.bridgeMode) {
                        const { agent, freeFn: newFreeFn } = await (0, puppeteer_agent_launcher_namespaceObject.puppeteerAgentForTarget)(webTarget, preference, null == options ? void 0 : options.browser);
                        freeFn.push(...newFreeFn);
                        return {
                            agent,
                            freeFn
                        };
                    }
                    external_node_assert_default()('newTabWithUrl' === webTarget.bridgeMode || 'currentTab' === webTarget.bridgeMode, `bridgeMode config value must be either "newTabWithUrl" or "currentTab", but got ${webTarget.bridgeMode}`);
                    if (webTarget.userAgent || webTarget.viewportWidth || webTarget.viewportHeight || webTarget.viewportScale || webTarget.waitForNetworkIdle || webTarget.cookie) console.warn('puppeteer options (userAgent, viewportWidth, viewportHeight, viewportScale, waitForNetworkIdle, cookie) are not supported in bridge mode. They will be ignored.');
                    const agent = new bridge_mode_namespaceObject.AgentOverChromeBridge({
                        closeNewTabsAfterDisconnect: webTarget.closeNewTabsAfterDisconnect,
                        cacheId: fileName
                    });
                    if ('newTabWithUrl' === webTarget.bridgeMode) await agent.connectNewTabWithUrl(webTarget.url);
                    else {
                        if (webTarget.url) console.warn('url will be ignored in bridge mode with "currentTab"');
                        await agent.connectCurrentTab();
                    }
                    freeFn.push({
                        name: 'destroy_agent_over_chrome_bridge',
                        fn: ()=>agent.destroy()
                    });
                    return {
                        agent,
                        freeFn
                    };
                }
                if (void 0 !== yamlScript.android) {
                    const androidTarget = yamlScript.android;
                    const agent = await (0, android_namespaceObject.agentFromAdbDevice)(null == androidTarget ? void 0 : androidTarget.deviceId);
                    if (null == androidTarget ? void 0 : androidTarget.launch) await agent.launch(androidTarget.launch);
                    freeFn.push({
                        name: 'destroy_android_agent',
                        fn: ()=>agent.destroy()
                    });
                    return {
                        agent,
                        freeFn
                    };
                }
                throw new Error('No valid target configuration found in the yaml script, should be either "web" or "android"');
            }, void 0, file);
            return player;
        }
        var chalk_source = __webpack_require__("../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js");
        var source_default = /*#__PURE__*/ __webpack_require__.n(chalk_source);
        const isTTY = process.env.MIDSCENE_CLI_LOG_ON_NON_TTY ? false : process.stdout.isTTY;
        const printer_indent = '  ';
        const spinnerInterval = 80;
        const spinnerFrames = [
            "\u25F0",
            "\u25F3",
            "\u25F2",
            "\u25F1"
        ];
        const currentSpinningFrame = ()=>spinnerFrames[Math.floor(Date.now() / spinnerInterval) % spinnerFrames.length];
        function indicatorForStatus(status) {
            if ('init' === status) return source_default().gray("\u25CC");
            if ('running' === status) return source_default().yellowBright(currentSpinningFrame());
            if ('done' === status) return source_default().green("\u2714\uFE0E");
            if ('error' === status) return source_default().red("\u2718");
        }
        const contextInfo = (context)=>{
            var _context_player_errorInSetup, _context_player_errorInSetup1;
            const filePath = context.file;
            const filePathToShow = (0, external_node_path_namespaceObject.relative)(process.cwd(), filePath);
            const fileNameToPrint = `${source_default().gray(`${filePathToShow}`)}`;
            const fileStatusText = indicatorForStatus(context.player.status);
            const contextActionText = void 0 === context.player.currentTaskIndex && 'running' === context.player.status ? source_default().gray('(navigating)') : '';
            const errorText = context.player.errorInSetup ? `\n${printer_indent}${source_default().red('error:')} ${null == (_context_player_errorInSetup = context.player.errorInSetup) ? void 0 : _context_player_errorInSetup.message}\n${printer_indent}${printer_indent}${null == (_context_player_errorInSetup1 = context.player.errorInSetup) ? void 0 : _context_player_errorInSetup1.stack}` : '';
            const outputFile = context.player.output;
            const outputText = outputFile && Object.keys(context.player.result || {}).length > 0 ? `\n${printer_indent}${source_default().gray(`output: ${outputFile}`)}` : '';
            const reportFile = context.player.reportFile;
            const reportText = reportFile ? `\n${printer_indent}${source_default().gray(`report: ${reportFile}`)}` : '';
            const agentStatusTip = context.player.agentStatusTip;
            const agentStatusText = agentStatusTip ? `\n${printer_indent}${source_default().gray(`agent status: ${agentStatusTip}`)}` : '';
            const mergedText = `${fileStatusText} ${fileNameToPrint} ${contextActionText}${outputText}${reportText}${errorText}${agentStatusText}`.trim();
            return {
                fileNameToPrint,
                fileStatusText,
                contextActionText,
                outputText,
                reportText,
                mergedText
            };
        };
        const singleTaskInfo = (task)=>{
            var _task_error;
            let stepText = '';
            if ('init' === task.status) stepText = '';
            else if ('running' === task.status || 'error' === task.status) if (void 0 === task.currentStep) stepText = source_default().gray('(navigating)');
            else if ('number' == typeof task.currentStep) {
                const actionText = '';
                stepText = source_default().gray(`(task ${task.currentStep + 1}/${task.totalSteps}${actionText})`.trim());
            } else stepText = source_default().gray('(unknown task)');
            const errorText = 'error' === task.status ? `\n${printer_indent}${source_default().gray('error:')}\n${printer_indent}${printer_indent}${null == (_task_error = task.error) ? void 0 : _task_error.message}` : '';
            const statusText = indicatorForStatus(task.status);
            const mergedLine = `${statusText} ${task.name} ${stepText}${errorText}`;
            return {
                nameText: task.name,
                stepText,
                errorText,
                itemStatusText: statusText,
                mergedLine
            };
        };
        function paddingLines(lines) {
            return lines.map((line)=>`${printer_indent}${line}`);
        }
        const contextTaskListSummary = (taskStatusArray, context)=>{
            const prefixLines = [];
            const currentLine = [];
            const suffixText = [];
            const { mergedText: fileInfo } = contextInfo(context);
            if (!context.player.errorInSetup) for (const task of taskStatusArray){
                const { mergedLine } = singleTaskInfo(task);
                if ('init' === context.player.status) suffixText.push(mergedLine);
                else if ('running' === context.player.status) currentLine.push(mergedLine);
                else if ('done' === context.player.status) prefixLines.push(mergedLine);
                else if ('error' === context.player.status) prefixLines.push(mergedLine);
            }
            const lines = [
                fileInfo
            ];
            if (prefixLines.length > 0) lines.push(...paddingLines(prefixLines));
            if (currentLine.length > 0) lines.push(...paddingLines(currentLine));
            if (suffixText.length > 0) lines.push(...paddingLines(suffixText));
            return lines.join('\n');
        };
        const external_node_util_namespaceObject = require("node:util");
        const external_node_process_namespaceObject = require("node:process");
        const copyProperty = (to, from, property, ignoreNonConfigurable)=>{
            if ('length' === property || 'prototype' === property) return;
            if ('arguments' === property || 'caller' === property) return;
            const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
            const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);
            if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) return;
            Object.defineProperty(to, property, fromDescriptor);
        };
        const canCopyProperty = function(toDescriptor, fromDescriptor) {
            return void 0 === toDescriptor || toDescriptor.configurable || toDescriptor.writable === fromDescriptor.writable && toDescriptor.enumerable === fromDescriptor.enumerable && toDescriptor.configurable === fromDescriptor.configurable && (toDescriptor.writable || toDescriptor.value === fromDescriptor.value);
        };
        const changePrototype = (to, from)=>{
            const fromPrototype = Object.getPrototypeOf(from);
            if (fromPrototype === Object.getPrototypeOf(to)) return;
            Object.setPrototypeOf(to, fromPrototype);
        };
        const wrappedToString = (withName, fromBody)=>`/* Wrapped ${withName}*/\n${fromBody}`;
        const toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, 'toString');
        const toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, 'name');
        const changeToString = (to, from, name)=>{
            const withName = '' === name ? '' : `with ${name.trim()}() `;
            const newToString = wrappedToString.bind(null, withName, from.toString());
            Object.defineProperty(newToString, 'name', toStringName);
            const { writable, enumerable, configurable } = toStringDescriptor;
            Object.defineProperty(to, 'toString', {
                value: newToString,
                writable,
                enumerable,
                configurable
            });
        };
        function mimicFunction(to, from, { ignoreNonConfigurable = false } = {}) {
            const { name } = to;
            for (const property of Reflect.ownKeys(from))copyProperty(to, from, property, ignoreNonConfigurable);
            changePrototype(to, from);
            changeToString(to, from, name);
            return to;
        }
        const calledFunctions = new WeakMap();
        const onetime_onetime = (function_, options = {})=>{
            if ('function' != typeof function_) throw new TypeError('Expected a function');
            let returnValue;
            let callCount = 0;
            const functionName = function_.displayName || function_.name || '<anonymous>';
            const onetime = function(...arguments_) {
                calledFunctions.set(onetime, ++callCount);
                if (1 === callCount) {
                    returnValue = function_.apply(this, arguments_);
                    function_ = void 0;
                } else if (true === options.throw) throw new Error(`Function \`${functionName}\` can only be called once`);
                return returnValue;
            };
            mimicFunction(onetime, function_);
            calledFunctions.set(onetime, callCount);
            return onetime;
        };
        onetime_onetime.callCount = (function_)=>{
            if (!calledFunctions.has(function_)) throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
            return calledFunctions.get(function_);
        };
        const node_modules_onetime = onetime_onetime;
        const signals = [];
        signals.push('SIGHUP', 'SIGINT', 'SIGTERM');
        if ('win32' !== process.platform) signals.push('SIGALRM', 'SIGABRT', 'SIGVTALRM', 'SIGXCPU', 'SIGXFSZ', 'SIGUSR2', 'SIGTRAP', 'SIGSYS', 'SIGQUIT', 'SIGIOT');
        if ('linux' === process.platform) signals.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT');
        const processOk = (process1)=>!!process1 && 'object' == typeof process1 && 'function' == typeof process1.removeListener && 'function' == typeof process1.emit && 'function' == typeof process1.reallyExit && 'function' == typeof process1.listeners && 'function' == typeof process1.kill && 'number' == typeof process1.pid && 'function' == typeof process1.on;
        const kExitEmitter = Symbol.for('signal-exit emitter');
        const global = globalThis;
        const ObjectDefineProperty = Object.defineProperty.bind(Object);
        class Emitter {
            emitted = {
                afterExit: false,
                exit: false
            };
            listeners = {
                afterExit: [],
                exit: []
            };
            count = 0;
            id = Math.random();
            constructor(){
                if (global[kExitEmitter]) return global[kExitEmitter];
                ObjectDefineProperty(global, kExitEmitter, {
                    value: this,
                    writable: false,
                    enumerable: false,
                    configurable: false
                });
            }
            on(ev, fn) {
                this.listeners[ev].push(fn);
            }
            removeListener(ev, fn) {
                const list = this.listeners[ev];
                const i = list.indexOf(fn);
                if (-1 === i) return;
                if (0 === i && 1 === list.length) list.length = 0;
                else list.splice(i, 1);
            }
            emit(ev, code, signal) {
                if (this.emitted[ev]) return false;
                this.emitted[ev] = true;
                let ret = false;
                for (const fn of this.listeners[ev])ret = true === fn(code, signal) || ret;
                if ('exit' === ev) ret = this.emit('afterExit', code, signal) || ret;
                return ret;
            }
        }
        class SignalExitBase {
        }
        const signalExitWrap = (handler)=>({
                onExit (cb, opts) {
                    return handler.onExit(cb, opts);
                },
                load () {
                    return handler.load();
                },
                unload () {
                    return handler.unload();
                }
            });
        class SignalExitFallback extends SignalExitBase {
            onExit() {
                return ()=>{};
            }
            load() {}
            unload() {}
        }
        class SignalExit extends SignalExitBase {
            #hupSig = 'win32' === mjs_process.platform ? 'SIGINT' : 'SIGHUP';
            #emitter = new Emitter();
            #process;
            #originalProcessEmit;
            #originalProcessReallyExit;
            #sigListeners = {};
            #loaded = false;
            constructor(process1){
                super();
                this.#process = process1;
                this.#sigListeners = {};
                for (const sig of signals)this.#sigListeners[sig] = ()=>{
                    const listeners = this.#process.listeners(sig);
                    let { count } = this.#emitter;
                    const p = process1;
                    if ('object' == typeof p.__signal_exit_emitter__ && 'number' == typeof p.__signal_exit_emitter__.count) count += p.__signal_exit_emitter__.count;
                    if (listeners.length === count) {
                        this.unload();
                        const ret = this.#emitter.emit('exit', null, sig);
                        const s = 'SIGHUP' === sig ? this.#hupSig : sig;
                        if (!ret) process1.kill(process1.pid, s);
                    }
                };
                this.#originalProcessReallyExit = process1.reallyExit;
                this.#originalProcessEmit = process1.emit;
            }
            onExit(cb, opts) {
                if (!processOk(this.#process)) return ()=>{};
                if (false === this.#loaded) this.load();
                const ev = opts?.alwaysLast ? 'afterExit' : 'exit';
                this.#emitter.on(ev, cb);
                return ()=>{
                    this.#emitter.removeListener(ev, cb);
                    if (0 === this.#emitter.listeners['exit'].length && 0 === this.#emitter.listeners['afterExit'].length) this.unload();
                };
            }
            load() {
                if (this.#loaded) return;
                this.#loaded = true;
                this.#emitter.count += 1;
                for (const sig of signals)try {
                    const fn = this.#sigListeners[sig];
                    if (fn) this.#process.on(sig, fn);
                } catch (_) {}
                this.#process.emit = (ev, ...a)=>this.#processEmit(ev, ...a);
                this.#process.reallyExit = (code)=>this.#processReallyExit(code);
            }
            unload() {
                if (!this.#loaded) return;
                this.#loaded = false;
                signals.forEach((sig)=>{
                    const listener = this.#sigListeners[sig];
                    if (!listener) throw new Error('Listener not defined for signal: ' + sig);
                    try {
                        this.#process.removeListener(sig, listener);
                    } catch (_) {}
                });
                this.#process.emit = this.#originalProcessEmit;
                this.#process.reallyExit = this.#originalProcessReallyExit;
                this.#emitter.count -= 1;
            }
            #processReallyExit(code) {
                if (!processOk(this.#process)) return 0;
                this.#process.exitCode = code || 0;
                this.#emitter.emit('exit', this.#process.exitCode, null);
                return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
            }
            #processEmit(ev, ...args) {
                const og = this.#originalProcessEmit;
                if (!('exit' === ev && processOk(this.#process))) return og.call(this.#process, ev, ...args);
                {
                    if ('number' == typeof args[0]) this.#process.exitCode = args[0];
                    const ret = og.call(this.#process, ev, ...args);
                    this.#emitter.emit('exit', this.#process.exitCode, null);
                    return ret;
                }
            }
        }
        const mjs_process = globalThis.process;
        const { onExit, load, unload } = signalExitWrap(processOk(mjs_process) ? new SignalExit(mjs_process) : new SignalExitFallback());
        const terminal = external_node_process_namespaceObject.stderr.isTTY ? external_node_process_namespaceObject.stderr : external_node_process_namespaceObject.stdout.isTTY ? external_node_process_namespaceObject.stdout : void 0;
        const restoreCursor = terminal ? node_modules_onetime(()=>{
            onExit(()=>{
                terminal.write('\u001B[?25h');
            }, {
                alwaysLast: true
            });
        }) : ()=>{};
        const restore_cursor = restoreCursor;
        function _define_property(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
            else obj[key] = value;
            return obj;
        }
        const DEFAULT_RENDER_INTERVAL = 160;
        const ESC = '\x1B[';
        const CLEAR_LINE = `${ESC}K`;
        const MOVE_CURSOR_ONE_ROW_UP = `${ESC}1A`;
        const HIDE_CURSOR = `${ESC}?25l`;
        const SHOW_CURSOR = `${ESC}?25h`;
        const SYNC_START = `${ESC}?2026h`;
        const SYNC_END = `${ESC}?2026l`;
        class TTYWindowRenderer {
            start() {
                this.finished = false;
                this.renderInterval = setInterval(()=>this.flushBuffer(), this.options.interval);
            }
            stop() {
                this.flushBuffer();
                this.write(SHOW_CURSOR, 'output');
                this.cleanups.splice(0).map((fn)=>fn());
                clearInterval(this.renderInterval);
            }
            finish() {
                this.finished = true;
                this.flushBuffer();
                clearInterval(this.renderInterval);
            }
            flushBuffer() {
                if (0 === this.buffer.length) return this.render();
                let current;
                for (const next of this.buffer.splice(0)){
                    if (!current) {
                        current = next;
                        continue;
                    }
                    if (current.type !== next.type) {
                        this.render(current.message, current.type);
                        current = next;
                        continue;
                    }
                    current.message += next.message;
                }
                if (current) this.render(null == current ? void 0 : current.message, null == current ? void 0 : current.type);
            }
            render(message, type = 'output') {
                if (this.finished) {
                    this.clearWindow();
                    return this.write(message || '', type);
                }
                const windowContent = this.options.getWindow();
                const rowCount = getRenderedRowCount(windowContent, this.options.outputStream);
                let padding = this.windowHeight - rowCount;
                if (padding > 0 && message) padding -= getRenderedRowCount([
                    message
                ], this.options.outputStream);
                this.write(SYNC_START);
                this.clearWindow();
                if (message) this.write(message, type);
                if (padding > 0) this.write('\n'.repeat(padding));
                this.write(windowContent.join('\n'));
                this.write(SYNC_END);
                this.windowHeight = rowCount + Math.max(0, padding);
            }
            clearWindow() {
                if (0 === this.windowHeight) return;
                this.write(CLEAR_LINE);
                for(let i = 1; i < this.windowHeight; i++)this.write(`${MOVE_CURSOR_ONE_ROW_UP}${CLEAR_LINE}`);
                this.windowHeight = 0;
            }
            interceptStream(stream, type) {
                const original = stream.write;
                stream.write = (chunk, _, callback)=>{
                    if (chunk) if (this.finished) this.write(chunk.toString(), type);
                    else this.buffer.push({
                        type,
                        message: chunk.toString()
                    });
                    null == callback || callback();
                };
                return function() {
                    stream.write = original;
                };
            }
            write(message, type = 'output') {
                this.streams[type](message);
            }
            constructor(options){
                _define_property(this, "options", void 0);
                _define_property(this, "streams", void 0);
                _define_property(this, "buffer", []);
                _define_property(this, "renderInterval", void 0);
                _define_property(this, "windowHeight", 0);
                _define_property(this, "finished", false);
                _define_property(this, "cleanups", []);
                this.options = {
                    interval: DEFAULT_RENDER_INTERVAL,
                    ...options
                };
                this.streams = {
                    output: options.outputStream.write.bind(options.outputStream),
                    error: options.errorStream.write.bind(options.errorStream)
                };
                this.cleanups.push(this.interceptStream(process.stdout, 'output'), this.interceptStream(process.stderr, 'error'));
                restore_cursor();
                this.write(HIDE_CURSOR, 'output');
                this.start();
            }
        }
        function getRenderedRowCount(contents, stream) {
            let count = 0;
            const columns = 'columns' in stream ? stream.columns : 80;
            for (const content of contents){
                const rows = content.split('\n');
                for (const row of rows){
                    const text = (0, external_node_util_namespaceObject.stripVTControlCharacters)(row);
                    count += Math.max(1, Math.ceil(text.length / columns));
                }
            }
            return count;
        }
        function batch_runner_define_property(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
            else obj[key] = value;
            return obj;
        }
        class BatchRunner {
            async run() {
                const { keepWindow, headed } = this.config;
                this.printExecutionPlan();
                const fileContextList = [];
                let browser = null;
                try {
                    for (const file of this.config.files){
                        const fileConfig = await this.loadFileConfig(file);
                        const context = await this.createFileContext(file, fileConfig, {
                            headed,
                            keepWindow
                        });
                        fileContextList.push(context);
                    }
                    const needsBrowser = fileContextList.some((ctx)=>Object.keys(ctx.executionConfig.web || ctx.executionConfig.target || {}).length > 0);
                    if (needsBrowser && this.config.shareBrowserContext) {
                        browser = await external_puppeteer_default().launch({
                            headless: !headed
                        });
                        for (const context of fileContextList)context.options.browser = browser;
                    }
                    const { executedResults, notExecutedContexts } = await this.executeFiles(fileContextList);
                    this.results = await this.processResults(executedResults, notExecutedContexts);
                } finally{
                    if (browser && !this.config.keepWindow) await browser.close();
                    await this.generateOutputIndex();
                }
                return this.results;
            }
            async createFileContext(file, fileConfig, options) {
                const { globalConfig } = this.config;
                const clonedFileConfig = JSON.parse(JSON.stringify(fileConfig));
                if (clonedFileConfig.target) {
                    clonedFileConfig.web = {
                        ...clonedFileConfig.target,
                        ...clonedFileConfig.web
                    };
                    delete clonedFileConfig.target;
                }
                if (null == globalConfig ? void 0 : globalConfig.target) {
                    globalConfig.web = {
                        ...globalConfig.target,
                        ...globalConfig.web
                    };
                    delete globalConfig.target;
                }
                const executionConfig = external_lodash_merge_default()(clonedFileConfig, globalConfig);
                return {
                    file,
                    executionConfig,
                    options
                };
            }
            async executeFiles(fileContextList) {
                const executedResults = [];
                const notExecutedContexts = [];
                const allFileContexts = [];
                for (const context of fileContextList){
                    const player = await createYamlPlayer(context.file, context.executionConfig, context.options);
                    allFileContexts.push({
                        file: context.file,
                        player
                    });
                }
                let ttyRenderer;
                if (isTTY) {
                    const summaryContents = ()=>{
                        const summary = [
                            ''
                        ];
                        for (const context of allFileContexts)summary.push(contextTaskListSummary(context.player.taskStatusList, context));
                        summary.push('');
                        return summary;
                    };
                    ttyRenderer = new TTYWindowRenderer({
                        outputStream: process.stdout,
                        errorStream: process.stderr,
                        getWindow: summaryContents,
                        interval: spinnerInterval
                    });
                    ttyRenderer.start();
                }
                try {
                    const executeFile = async (context)=>{
                        const allFileContext = allFileContexts.find((c)=>c.file === context.file);
                        if (!allFileContext) throw new Error(`Player not found for file: ${context.file}`);
                        if (!isTTY) {
                            const { mergedText } = contextInfo(allFileContext);
                            console.log(mergedText);
                        }
                        if (context.outputPath) allFileContext.player.output = context.outputPath;
                        const startTime = Date.now();
                        await allFileContext.player.run();
                        const endTime = Date.now();
                        const duration = endTime - startTime;
                        const executedContext = {
                            file: context.file,
                            player: allFileContext.player,
                            duration
                        };
                        if (!isTTY) console.log(contextTaskListSummary(allFileContext.player.taskStatusList, executedContext));
                        return executedContext;
                    };
                    await this.executeConcurrently(fileContextList, executeFile, executedResults, notExecutedContexts);
                    if (!isTTY) {
                        console.log("\n\uD83D\uDCCB Execution Results:");
                        for (const context of executedResults)console.log(contextTaskListSummary(context.player.taskStatusList, context));
                    }
                } finally{
                    if (ttyRenderer) ttyRenderer.stop();
                }
                return {
                    executedResults,
                    notExecutedContexts
                };
            }
            async executeConcurrently(fileContextList, executeFile, executedResults, notExecutedContexts) {
                const limit = pLimit(this.config.concurrent);
                if (this.config.continueOnError) {
                    const tasks = fileContextList.map((context)=>limit(async ()=>{
                            const executedContext = await executeFile(context);
                            executedResults.push(executedContext);
                        }));
                    await Promise.allSettled(tasks);
                } else {
                    let shouldStop = false;
                    const stopLock = {
                        value: false
                    };
                    const tasks = fileContextList.map((context)=>limit(async ()=>{
                            if (stopLock.value) return void notExecutedContexts.push({
                                file: context.file,
                                player: null
                            });
                            const executedContext = await executeFile(context);
                            executedResults.push(executedContext);
                            if ('error' === executedContext.player.status && !stopLock.value) {
                                stopLock.value = true;
                                shouldStop = true;
                            }
                        }));
                    await Promise.allSettled(tasks);
                    if (shouldStop) {
                        for (const context of fileContextList)if (!executedResults.some((r)=>r.file === context.file) && !notExecutedContexts.some((ctx)=>ctx.file === context.file)) notExecutedContexts.push({
                            file: context.file,
                            player: null
                        });
                    }
                }
            }
            async processResults(executedContexts, notExecutedContexts) {
                const results = [];
                for (const context of executedContexts){
                    var _player_errorInSetup;
                    const { file, player, duration } = context;
                    const success = 'error' !== player.status;
                    let reportFile;
                    if (player.reportFile) reportFile = player.reportFile;
                    let outputPath = player.output || void 0;
                    if (outputPath && !(0, external_node_fs_namespaceObject.existsSync)(outputPath)) outputPath = void 0;
                    results.push({
                        file,
                        success,
                        executed: true,
                        output: outputPath,
                        report: reportFile,
                        duration,
                        error: (null == (_player_errorInSetup = player.errorInSetup) ? void 0 : _player_errorInSetup.message) || ('error' === player.status ? 'Execution failed' : void 0)
                    });
                }
                for (const context of notExecutedContexts)results.push({
                    file: context.file,
                    success: false,
                    executed: false,
                    output: void 0,
                    report: void 0,
                    duration: 0,
                    error: 'Not executed (previous task failed)'
                });
                return results;
            }
            async loadFileConfig(file) {
                const content = (0, external_node_fs_namespaceObject.readFileSync)(file, 'utf8');
                return (0, yaml_namespaceObject.parseYamlScript)(content, file, true);
            }
            getSummaryAbsolutePath() {
                return (0, external_node_path_namespaceObject.resolve)((0, common_namespaceObject.getMidsceneRunSubDir)('output'), this.config.summary);
            }
            printExecutionPlan() {
                console.log('   Scripts:');
                for (const file of this.config.files)console.log(`     - ${file}`);
                console.log("\uD83D\uDCCB Execution plan");
                console.log(`   Concurrency: ${this.config.concurrent}`);
                console.log(`   Keep window: ${this.config.keepWindow}`);
                console.log(`   Headed: ${this.config.headed}`);
                console.log(`   Continue on error: ${this.config.continueOnError}`);
                console.log(`   Share browser context: ${this.config.shareBrowserContext ?? false}`);
                console.log(`   Summary output: ${this.config.summary}`);
            }
            async generateOutputIndex() {
                const indexPath = (0, external_node_path_namespaceObject.resolve)((0, common_namespaceObject.getMidsceneRunSubDir)('output'), this.config.summary);
                const outputDir = (0, external_node_path_namespaceObject.dirname)(indexPath);
                try {
                    (0, external_node_fs_namespaceObject.mkdirSync)(outputDir, {
                        recursive: true
                    });
                    const indexData = {
                        summary: {
                            total: this.results.length,
                            successful: this.results.filter((r)=>r.success).length,
                            failed: this.results.filter((r)=>!r.success).length,
                            totalDuration: this.results.reduce((sum, r)=>sum + (r.duration || 0), 0),
                            generatedAt: new Date().toLocaleString()
                        },
                        results: this.results.map((result)=>({
                                script: (0, external_node_path_namespaceObject.relative)(outputDir, result.file),
                                success: result.success,
                                output: result.output ? (()=>{
                                    const relativePath = (0, external_node_path_namespaceObject.relative)(outputDir, result.output);
                                    return relativePath.startsWith('.') ? relativePath : `./${relativePath}`;
                                })() : void 0,
                                report: result.report ? (0, external_node_path_namespaceObject.relative)(outputDir, result.report) : void 0,
                                error: result.error,
                                duration: result.duration
                            }))
                    };
                    (0, external_node_fs_namespaceObject.writeFileSync)(indexPath, JSON.stringify(indexData, null, 2));
                    console.log('Execution finished:');
                } catch (error) {
                    console.error('Failed to generate output index:', error);
                }
            }
            getExecutionSummary() {
                const successful = this.results.filter((r)=>r.success).length;
                const notExecuted = this.results.filter((r)=>!r.executed).length;
                const failed = this.results.filter((r)=>r.executed && !r.success).length;
                return {
                    total: this.results.length,
                    successful,
                    failed,
                    notExecuted,
                    totalDuration: this.results.reduce((sum, r)=>sum + (r.duration || 0), 0)
                };
            }
            getFailedFiles() {
                return this.results.filter((r)=>r.executed && !r.success).map((r)=>r.file);
            }
            getNotExecutedFiles() {
                return this.results.filter((r)=>!r.executed).map((r)=>r.file);
            }
            getSuccessfulFiles() {
                return this.results.filter((r)=>r.success).map((r)=>r.file);
            }
            getResults() {
                return [
                    ...this.results
                ];
            }
            printExecutionSummary() {
                const summary = this.getExecutionSummary();
                const success = 0 === summary.failed && 0 === summary.notExecuted;
                console.log("\n\uD83D\uDCCA Execution Summary:");
                console.log(`   Total files: ${summary.total}`);
                console.log(`   Successful: ${summary.successful}`);
                console.log(`   Failed: ${summary.failed}`);
                console.log(`   Not executed: ${summary.notExecuted}`);
                console.log(`   Duration: ${(summary.totalDuration / 1000).toFixed(2)}s`);
                console.log(`   Summary: ${this.getSummaryAbsolutePath()}`);
                if (summary.successful > 0) {
                    console.log("\n\u2705 Successful files:");
                    this.getSuccessfulFiles().forEach((file)=>{
                        console.log(`   ${file}`);
                    });
                }
                if (summary.failed > 0) {
                    console.log("\n\u274C Failed files");
                    this.getFailedFiles().forEach((file)=>{
                        console.log(`   ${file}`);
                    });
                }
                if (summary.notExecuted > 0) {
                    console.log("\n\u23F8\uFE0F Not executed files");
                    this.getNotExecutedFiles().forEach((file)=>{
                        console.log(`   ${file}`);
                    });
                }
                if (success) console.log("\n\uD83C\uDF89 All files executed successfully!");
                else console.log("\n\u26A0\uFE0F Some files failed or were not executed.");
                return success;
            }
            constructor(config){
                batch_runner_define_property(this, "config", void 0);
                batch_runner_define_property(this, "results", []);
                this.config = config;
            }
        }
        const logger_namespaceObject = require("@midscene/shared/logger");
        var brace_expansion = __webpack_require__("../../node_modules/.pnpm/brace-expansion@2.0.1/node_modules/brace-expansion/index.js");
        const MAX_PATTERN_LENGTH = 65536;
        const assertValidPattern = (pattern)=>{
            if ('string' != typeof pattern) throw new TypeError('invalid pattern');
            if (pattern.length > MAX_PATTERN_LENGTH) throw new TypeError('pattern is too long');
        };
        const posixClasses = {
            '[:alnum:]': [
                '\\p{L}\\p{Nl}\\p{Nd}',
                true
            ],
            '[:alpha:]': [
                '\\p{L}\\p{Nl}',
                true
            ],
            '[:ascii:]': [
                "\\x00-\\x7f",
                false
            ],
            '[:blank:]': [
                '\\p{Zs}\\t',
                true
            ],
            '[:cntrl:]': [
                '\\p{Cc}',
                true
            ],
            '[:digit:]': [
                '\\p{Nd}',
                true
            ],
            '[:graph:]': [
                '\\p{Z}\\p{C}',
                true,
                true
            ],
            '[:lower:]': [
                '\\p{Ll}',
                true
            ],
            '[:print:]': [
                '\\p{C}',
                true
            ],
            '[:punct:]': [
                '\\p{P}',
                true
            ],
            '[:space:]': [
                '\\p{Z}\\t\\r\\n\\v\\f',
                true
            ],
            '[:upper:]': [
                '\\p{Lu}',
                true
            ],
            '[:word:]': [
                '\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}',
                true
            ],
            '[:xdigit:]': [
                'A-Fa-f0-9',
                false
            ]
        };
        const braceEscape = (s)=>s.replace(/[[\]\\-]/g, '\\$&');
        const regexpEscape = (s)=>s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        const rangesToString = (ranges)=>ranges.join('');
        const parseClass = (glob, position)=>{
            const pos = position;
            if ('[' !== glob.charAt(pos)) throw new Error('not in a brace expression');
            const ranges = [];
            const negs = [];
            let i = pos + 1;
            let sawStart = false;
            let uflag = false;
            let escaping = false;
            let negate = false;
            let endPos = pos;
            let rangeStart = '';
            WHILE: while(i < glob.length){
                const c = glob.charAt(i);
                if (('!' === c || '^' === c) && i === pos + 1) {
                    negate = true;
                    i++;
                    continue;
                }
                if (']' === c && sawStart && !escaping) {
                    endPos = i + 1;
                    break;
                }
                sawStart = true;
                if ('\\' === c) {
                    if (!escaping) {
                        escaping = true;
                        i++;
                        continue;
                    }
                }
                if ('[' === c && !escaping) {
                    for (const [cls, [unip, u, neg]] of Object.entries(posixClasses))if (glob.startsWith(cls, i)) {
                        if (rangeStart) return [
                            '$.',
                            false,
                            glob.length - pos,
                            true
                        ];
                        i += cls.length;
                        if (neg) negs.push(unip);
                        else ranges.push(unip);
                        uflag = uflag || u;
                        continue WHILE;
                    }
                }
                escaping = false;
                if (rangeStart) {
                    if (c > rangeStart) ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c));
                    else if (c === rangeStart) ranges.push(braceEscape(c));
                    rangeStart = '';
                    i++;
                    continue;
                }
                if (glob.startsWith('-]', i + 1)) {
                    ranges.push(braceEscape(c + '-'));
                    i += 2;
                    continue;
                }
                if (glob.startsWith('-', i + 1)) {
                    rangeStart = c;
                    i += 2;
                    continue;
                }
                ranges.push(braceEscape(c));
                i++;
            }
            if (endPos < i) return [
                '',
                false,
                0,
                false
            ];
            if (!ranges.length && !negs.length) return [
                '$.',
                false,
                glob.length - pos,
                true
            ];
            if (0 === negs.length && 1 === ranges.length && /^\\?.$/.test(ranges[0]) && !negate) {
                const r = 2 === ranges[0].length ? ranges[0].slice(-1) : ranges[0];
                return [
                    regexpEscape(r),
                    false,
                    endPos - pos,
                    false
                ];
            }
            const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']';
            const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']';
            const comb = ranges.length && negs.length ? '(' + sranges + '|' + snegs + ')' : ranges.length ? sranges : snegs;
            return [
                comb,
                uflag,
                endPos - pos,
                true
            ];
        };
        const unescape_unescape = (s, { windowsPathsNoEscape = false } = {})=>windowsPathsNoEscape ? s.replace(/\[([^\/\\])\]/g, '$1') : s.replace(/((?!\\).|^)\[([^\/\\])\]/g, '$1$2').replace(/\\([^\/])/g, '$1');
        const types = new Set([
            '!',
            '?',
            '+',
            '*',
            '@'
        ]);
        const isExtglobType = (c)=>types.has(c);
        const startNoTraversal = '(?!(?:^|/)\\.\\.?(?:$|/))';
        const startNoDot = '(?!\\.)';
        const addPatternStart = new Set([
            '[',
            '.'
        ]);
        const justDots = new Set([
            '..',
            '.'
        ]);
        const reSpecials = new Set('().*{}+?[]^$\\!');
        const regExpEscape = (s)=>s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        const qmark = '[^/]';
        const star = qmark + '*?';
        const starNoEmpty = qmark + '+?';
        class ast_AST {
            type;
            #root;
            #hasMagic;
            #uflag = false;
            #parts = [];
            #parent;
            #parentIndex;
            #negs;
            #filledNegs = false;
            #options;
            #toString;
            #emptyExt = false;
            constructor(type, parent, options = {}){
                this.type = type;
                if (type) this.#hasMagic = true;
                this.#parent = parent;
                this.#root = this.#parent ? this.#parent.#root : this;
                this.#options = this.#root === this ? options : this.#root.#options;
                this.#negs = this.#root === this ? [] : this.#root.#negs;
                if ('!' === type && !this.#root.#filledNegs) this.#negs.push(this);
                this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;
            }
            get hasMagic() {
                if (void 0 !== this.#hasMagic) return this.#hasMagic;
                for (const p of this.#parts)if ('string' != typeof p) {
                    if (p.type || p.hasMagic) return this.#hasMagic = true;
                }
                return this.#hasMagic;
            }
            toString() {
                if (void 0 !== this.#toString) return this.#toString;
                if (!this.type) return this.#toString = this.#parts.map((p)=>String(p)).join('');
                return this.#toString = this.type + '(' + this.#parts.map((p)=>String(p)).join('|') + ')';
            }
            #fillNegs() {
                if (this !== this.#root) throw new Error('should only call on root');
                if (this.#filledNegs) return this;
                this.toString();
                this.#filledNegs = true;
                let n;
                while(n = this.#negs.pop()){
                    if ('!' !== n.type) continue;
                    let p = n;
                    let pp = p.#parent;
                    while(pp){
                        for(let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++)for (const part of n.#parts){
                            if ('string' == typeof part) throw new Error('string part in extglob AST??');
                            part.copyIn(pp.#parts[i]);
                        }
                        p = pp;
                        pp = p.#parent;
                    }
                }
                return this;
            }
            push(...parts) {
                for (const p of parts)if ('' !== p) {
                    if ('string' != typeof p && !(p instanceof ast_AST && p.#parent === this)) throw new Error('invalid part: ' + p);
                    this.#parts.push(p);
                }
            }
            toJSON() {
                const ret = null === this.type ? this.#parts.slice().map((p)=>'string' == typeof p ? p : p.toJSON()) : [
                    this.type,
                    ...this.#parts.map((p)=>p.toJSON())
                ];
                if (this.isStart() && !this.type) ret.unshift([]);
                if (this.isEnd() && (this === this.#root || this.#root.#filledNegs && this.#parent?.type === '!')) ret.push({});
                return ret;
            }
            isStart() {
                if (this.#root === this) return true;
                if (!this.#parent?.isStart()) return false;
                if (0 === this.#parentIndex) return true;
                const p = this.#parent;
                for(let i = 0; i < this.#parentIndex; i++){
                    const pp = p.#parts[i];
                    if (!(pp instanceof ast_AST && '!' === pp.type)) return false;
                }
                return true;
            }
            isEnd() {
                if (this.#root === this) return true;
                if (this.#parent?.type === '!') return true;
                if (!this.#parent?.isEnd()) return false;
                if (!this.type) return this.#parent?.isEnd();
                const pl = this.#parent ? this.#parent.#parts.length : 0;
                return this.#parentIndex === pl - 1;
            }
            copyIn(part) {
                if ('string' == typeof part) this.push(part);
                else this.push(part.clone(this));
            }
            clone(parent) {
                const c = new ast_AST(this.type, parent);
                for (const p of this.#parts)c.copyIn(p);
                return c;
            }
            static #parseAST(str, ast, pos, opt) {
                let escaping = false;
                let inBrace = false;
                let braceStart = -1;
                let braceNeg = false;
                if (null === ast.type) {
                    let i = pos;
                    let acc = '';
                    while(i < str.length){
                        const c = str.charAt(i++);
                        if (escaping || '\\' === c) {
                            escaping = !escaping;
                            acc += c;
                            continue;
                        }
                        if (inBrace) {
                            if (i === braceStart + 1) {
                                if ('^' === c || '!' === c) braceNeg = true;
                            } else if (']' === c && !(i === braceStart + 2 && braceNeg)) inBrace = false;
                            acc += c;
                            continue;
                        }
                        if ('[' === c) {
                            inBrace = true;
                            braceStart = i;
                            braceNeg = false;
                            acc += c;
                            continue;
                        }
                        if (!opt.noext && isExtglobType(c) && '(' === str.charAt(i)) {
                            ast.push(acc);
                            acc = '';
                            const ext = new ast_AST(c, ast);
                            i = ast_AST.#parseAST(str, ext, i, opt);
                            ast.push(ext);
                            continue;
                        }
                        acc += c;
                    }
                    ast.push(acc);
                    return i;
                }
                let i = pos + 1;
                let part = new ast_AST(null, ast);
                const parts = [];
                let acc = '';
                while(i < str.length){
                    const c = str.charAt(i++);
                    if (escaping || '\\' === c) {
                        escaping = !escaping;
                        acc += c;
                        continue;
                    }
                    if (inBrace) {
                        if (i === braceStart + 1) {
                            if ('^' === c || '!' === c) braceNeg = true;
                        } else if (']' === c && !(i === braceStart + 2 && braceNeg)) inBrace = false;
                        acc += c;
                        continue;
                    }
                    if ('[' === c) {
                        inBrace = true;
                        braceStart = i;
                        braceNeg = false;
                        acc += c;
                        continue;
                    }
                    if (isExtglobType(c) && '(' === str.charAt(i)) {
                        part.push(acc);
                        acc = '';
                        const ext = new ast_AST(c, part);
                        part.push(ext);
                        i = ast_AST.#parseAST(str, ext, i, opt);
                        continue;
                    }
                    if ('|' === c) {
                        part.push(acc);
                        acc = '';
                        parts.push(part);
                        part = new ast_AST(null, ast);
                        continue;
                    }
                    if (')' === c) {
                        if ('' === acc && 0 === ast.#parts.length) ast.#emptyExt = true;
                        part.push(acc);
                        acc = '';
                        ast.push(...parts, part);
                        return i;
                    }
                    acc += c;
                }
                ast.type = null;
                ast.#hasMagic = void 0;
                ast.#parts = [
                    str.substring(pos - 1)
                ];
                return i;
            }
            static fromGlob(pattern, options = {}) {
                const ast = new ast_AST(null, void 0, options);
                ast_AST.#parseAST(pattern, ast, 0, options);
                return ast;
            }
            toMMPattern() {
                if (this !== this.#root) return this.#root.toMMPattern();
                const glob = this.toString();
                const [re, body, hasMagic, uflag] = this.toRegExpSource();
                const anyMagic = hasMagic || this.#hasMagic || this.#options.nocase && !this.#options.nocaseMagicOnly && glob.toUpperCase() !== glob.toLowerCase();
                if (!anyMagic) return body;
                const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '');
                return Object.assign(new RegExp(`^${re}$`, flags), {
                    _src: re,
                    _glob: glob
                });
            }
            get options() {
                return this.#options;
            }
            toRegExpSource(allowDot) {
                const dot = allowDot ?? !!this.#options.dot;
                if (this.#root === this) this.#fillNegs();
                if (!this.type) {
                    const noEmpty = this.isStart() && this.isEnd();
                    const src = this.#parts.map((p)=>{
                        const [re, _, hasMagic, uflag] = 'string' == typeof p ? ast_AST.#parseGlob(p, this.#hasMagic, noEmpty) : p.toRegExpSource(allowDot);
                        this.#hasMagic = this.#hasMagic || hasMagic;
                        this.#uflag = this.#uflag || uflag;
                        return re;
                    }).join('');
                    let start = '';
                    if (this.isStart()) {
                        if ('string' == typeof this.#parts[0]) {
                            const dotTravAllowed = 1 === this.#parts.length && justDots.has(this.#parts[0]);
                            if (!dotTravAllowed) {
                                const aps = addPatternStart;
                                const needNoTrav = dot && aps.has(src.charAt(0)) || src.startsWith('\\.') && aps.has(src.charAt(2)) || src.startsWith('\\.\\.') && aps.has(src.charAt(4));
                                const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));
                                start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : '';
                            }
                        }
                    }
                    let end = '';
                    if (this.isEnd() && this.#root.#filledNegs && this.#parent?.type === '!') end = '(?:$|\\/)';
                    const final = start + src + end;
                    return [
                        final,
                        unescape_unescape(src),
                        this.#hasMagic = !!this.#hasMagic,
                        this.#uflag
                    ];
                }
                const repeated = '*' === this.type || '+' === this.type;
                const start = '!' === this.type ? '(?:(?!(?:' : '(?:';
                let body = this.#partsToRegExp(dot);
                if (this.isStart() && this.isEnd() && !body && '!' !== this.type) {
                    const s = this.toString();
                    this.#parts = [
                        s
                    ];
                    this.type = null;
                    this.#hasMagic = void 0;
                    return [
                        s,
                        unescape_unescape(this.toString()),
                        false,
                        false
                    ];
                }
                let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot ? '' : this.#partsToRegExp(true);
                if (bodyDotAllowed === body) bodyDotAllowed = '';
                if (bodyDotAllowed) body = `(?:${body})(?:${bodyDotAllowed})*?`;
                let final = '';
                if ('!' === this.type && this.#emptyExt) final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty;
                else {
                    const close = '!' === this.type ? '))' + (!this.isStart() || dot || allowDot ? '' : startNoDot) + star + ')' : '@' === this.type ? ')' : '?' === this.type ? ')?' : '+' === this.type && bodyDotAllowed ? ')' : '*' === this.type && bodyDotAllowed ? ")?" : `)${this.type}`;
                    final = start + body + close;
                }
                return [
                    final,
                    unescape_unescape(body),
                    this.#hasMagic = !!this.#hasMagic,
                    this.#uflag
                ];
            }
            #partsToRegExp(dot) {
                return this.#parts.map((p)=>{
                    if ('string' == typeof p) throw new Error('string type in extglob ast??');
                    const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);
                    this.#uflag = this.#uflag || uflag;
                    return re;
                }).filter((p)=>!(this.isStart() && this.isEnd()) || !!p).join('|');
            }
            static #parseGlob(glob, hasMagic, noEmpty = false) {
                let escaping = false;
                let re = '';
                let uflag = false;
                for(let i = 0; i < glob.length; i++){
                    const c = glob.charAt(i);
                    if (escaping) {
                        escaping = false;
                        re += (reSpecials.has(c) ? '\\' : '') + c;
                        continue;
                    }
                    if ('\\' === c) {
                        if (i === glob.length - 1) re += '\\\\';
                        else escaping = true;
                        continue;
                    }
                    if ('[' === c) {
                        const [src, needUflag, consumed, magic] = parseClass(glob, i);
                        if (consumed) {
                            re += src;
                            uflag = uflag || needUflag;
                            i += consumed - 1;
                            hasMagic = hasMagic || magic;
                            continue;
                        }
                    }
                    if ('*' === c) {
                        if (noEmpty && '*' === glob) re += starNoEmpty;
                        else re += star;
                        hasMagic = true;
                        continue;
                    }
                    if ('?' === c) {
                        re += qmark;
                        hasMagic = true;
                        continue;
                    }
                    re += regExpEscape(c);
                }
                return [
                    re,
                    unescape_unescape(glob),
                    !!hasMagic,
                    uflag
                ];
            }
        }
        const escape_escape = (s, { windowsPathsNoEscape = false } = {})=>windowsPathsNoEscape ? s.replace(/[?*()[\]]/g, '[$&]') : s.replace(/[?*()[\]\\]/g, '\\$&');
        const minimatch = (p, pattern, options = {})=>{
            assertValidPattern(pattern);
            if (!options.nocomment && '#' === pattern.charAt(0)) return false;
            return new esm_Minimatch(pattern, options).match(p);
        };
        const starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
        const starDotExtTest = (ext)=>(f)=>!f.startsWith('.') && f.endsWith(ext);
        const starDotExtTestDot = (ext)=>(f)=>f.endsWith(ext);
        const starDotExtTestNocase = (ext)=>{
            ext = ext.toLowerCase();
            return (f)=>!f.startsWith('.') && f.toLowerCase().endsWith(ext);
        };
        const starDotExtTestNocaseDot = (ext)=>{
            ext = ext.toLowerCase();
            return (f)=>f.toLowerCase().endsWith(ext);
        };
        const starDotStarRE = /^\*+\.\*+$/;
        const starDotStarTest = (f)=>!f.startsWith('.') && f.includes('.');
        const starDotStarTestDot = (f)=>'.' !== f && '..' !== f && f.includes('.');
        const dotStarRE = /^\.\*+$/;
        const dotStarTest = (f)=>'.' !== f && '..' !== f && f.startsWith('.');
        const starRE = /^\*+$/;
        const starTest = (f)=>0 !== f.length && !f.startsWith('.');
        const starTestDot = (f)=>0 !== f.length && '.' !== f && '..' !== f;
        const qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
        const qmarksTestNocase = ([$0, ext = ''])=>{
            const noext = qmarksTestNoExt([
                $0
            ]);
            if (!ext) return noext;
            ext = ext.toLowerCase();
            return (f)=>noext(f) && f.toLowerCase().endsWith(ext);
        };
        const qmarksTestNocaseDot = ([$0, ext = ''])=>{
            const noext = qmarksTestNoExtDot([
                $0
            ]);
            if (!ext) return noext;
            ext = ext.toLowerCase();
            return (f)=>noext(f) && f.toLowerCase().endsWith(ext);
        };
        const qmarksTestDot = ([$0, ext = ''])=>{
            const noext = qmarksTestNoExtDot([
                $0
            ]);
            return ext ? (f)=>noext(f) && f.endsWith(ext) : noext;
        };
        const qmarksTest = ([$0, ext = ''])=>{
            const noext = qmarksTestNoExt([
                $0
            ]);
            return ext ? (f)=>noext(f) && f.endsWith(ext) : noext;
        };
        const qmarksTestNoExt = ([$0])=>{
            const len = $0.length;
            return (f)=>f.length === len && !f.startsWith('.');
        };
        const qmarksTestNoExtDot = ([$0])=>{
            const len = $0.length;
            return (f)=>f.length === len && '.' !== f && '..' !== f;
        };
        const defaultPlatform = 'object' == typeof process && process ? 'object' == typeof process.env && process.env && process.env.__MINIMATCH_TESTING_PLATFORM__ || process.platform : 'posix';
        const esm_path = {
            win32: {
                sep: '\\'
            },
            posix: {
                sep: '/'
            }
        };
        const esm_sep = 'win32' === defaultPlatform ? esm_path.win32.sep : esm_path.posix.sep;
        minimatch.sep = esm_sep;
        const GLOBSTAR = Symbol('globstar **');
        minimatch.GLOBSTAR = GLOBSTAR;
        const esm_qmark = '[^/]';
        const esm_star = esm_qmark + '*?';
        const twoStarDot = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?';
        const twoStarNoDot = '(?:(?!(?:\\/|^)\\.).)*?';
        const esm_filter = (pattern, options = {})=>(p)=>minimatch(p, pattern, options);
        minimatch.filter = esm_filter;
        const esm_ext = (a, b = {})=>Object.assign({}, a, b);
        const esm_defaults = (def)=>{
            if (!def || 'object' != typeof def || !Object.keys(def).length) return minimatch;
            const orig = minimatch;
            const m = (p, pattern, options = {})=>orig(p, pattern, esm_ext(def, options));
            return Object.assign(m, {
                Minimatch: class extends orig.Minimatch {
                    constructor(pattern, options = {}){
                        super(pattern, esm_ext(def, options));
                    }
                    static defaults(options) {
                        return orig.defaults(esm_ext(def, options)).Minimatch;
                    }
                },
                AST: class extends orig.AST {
                    constructor(type, parent, options = {}){
                        super(type, parent, esm_ext(def, options));
                    }
                    static fromGlob(pattern, options = {}) {
                        return orig.AST.fromGlob(pattern, esm_ext(def, options));
                    }
                },
                unescape: (s, options = {})=>orig.unescape(s, esm_ext(def, options)),
                escape: (s, options = {})=>orig.escape(s, esm_ext(def, options)),
                filter: (pattern, options = {})=>orig.filter(pattern, esm_ext(def, options)),
                defaults: (options)=>orig.defaults(esm_ext(def, options)),
                makeRe: (pattern, options = {})=>orig.makeRe(pattern, esm_ext(def, options)),
                braceExpand: (pattern, options = {})=>orig.braceExpand(pattern, esm_ext(def, options)),
                match: (list, pattern, options = {})=>orig.match(list, pattern, esm_ext(def, options)),
                sep: orig.sep,
                GLOBSTAR: GLOBSTAR
            });
        };
        minimatch.defaults = esm_defaults;
        const braceExpand = (pattern, options = {})=>{
            assertValidPattern(pattern);
            if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) return [
                pattern
            ];
            return brace_expansion(pattern);
        };
        minimatch.braceExpand = braceExpand;
        const makeRe = (pattern, options = {})=>new esm_Minimatch(pattern, options).makeRe();
        minimatch.makeRe = makeRe;
        const esm_match = (list, pattern, options = {})=>{
            const mm = new esm_Minimatch(pattern, options);
            list = list.filter((f)=>mm.match(f));
            if (mm.options.nonull && !list.length) list.push(pattern);
            return list;
        };
        minimatch.match = esm_match;
        const globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
        const esm_regExpEscape = (s)=>s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        class esm_Minimatch {
            options;
            set;
            pattern;
            windowsPathsNoEscape;
            nonegate;
            negate;
            comment;
            empty;
            preserveMultipleSlashes;
            partial;
            globSet;
            globParts;
            nocase;
            isWindows;
            platform;
            windowsNoMagicRoot;
            regexp;
            constructor(pattern, options = {}){
                assertValidPattern(pattern);
                options = options || {};
                this.options = options;
                this.pattern = pattern;
                this.platform = options.platform || defaultPlatform;
                this.isWindows = 'win32' === this.platform;
                this.windowsPathsNoEscape = !!options.windowsPathsNoEscape || false === options.allowWindowsEscape;
                if (this.windowsPathsNoEscape) this.pattern = this.pattern.replace(/\\/g, '/');
                this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;
                this.regexp = null;
                this.negate = false;
                this.nonegate = !!options.nonegate;
                this.comment = false;
                this.empty = false;
                this.partial = !!options.partial;
                this.nocase = !!this.options.nocase;
                this.windowsNoMagicRoot = void 0 !== options.windowsNoMagicRoot ? options.windowsNoMagicRoot : !!(this.isWindows && this.nocase);
                this.globSet = [];
                this.globParts = [];
                this.set = [];
                this.make();
            }
            hasMagic() {
                if (this.options.magicalBraces && this.set.length > 1) return true;
                for (const pattern of this.set)for (const part of pattern)if ('string' != typeof part) return true;
                return false;
            }
            debug() {}
            make() {
                const pattern = this.pattern;
                const options = this.options;
                if (!options.nocomment && '#' === pattern.charAt(0)) {
                    this.comment = true;
                    return;
                }
                if (!pattern) {
                    this.empty = true;
                    return;
                }
                this.parseNegate();
                this.globSet = [
                    ...new Set(this.braceExpand())
                ];
                if (options.debug) this.debug = (...args)=>console.error(...args);
                this.debug(this.pattern, this.globSet);
                const rawGlobParts = this.globSet.map((s)=>this.slashSplit(s));
                this.globParts = this.preprocess(rawGlobParts);
                this.debug(this.pattern, this.globParts);
                let set = this.globParts.map((s, _, __)=>{
                    if (this.isWindows && this.windowsNoMagicRoot) {
                        const isUNC = '' === s[0] && '' === s[1] && ('?' === s[2] || !globMagic.test(s[2])) && !globMagic.test(s[3]);
                        const isDrive = /^[a-z]:/i.test(s[0]);
                        if (isUNC) return [
                            ...s.slice(0, 4),
                            ...s.slice(4).map((ss)=>this.parse(ss))
                        ];
                        if (isDrive) return [
                            s[0],
                            ...s.slice(1).map((ss)=>this.parse(ss))
                        ];
                    }
                    return s.map((ss)=>this.parse(ss));
                });
                this.debug(this.pattern, set);
                this.set = set.filter((s)=>-1 === s.indexOf(false));
                if (this.isWindows) for(let i = 0; i < this.set.length; i++){
                    const p = this.set[i];
                    if ('' === p[0] && '' === p[1] && '?' === this.globParts[i][2] && 'string' == typeof p[3] && /^[a-z]:$/i.test(p[3])) p[2] = '?';
                }
                this.debug(this.pattern, this.set);
            }
            preprocess(globParts) {
                if (this.options.noglobstar) {
                    for(let i = 0; i < globParts.length; i++)for(let j = 0; j < globParts[i].length; j++)if ('**' === globParts[i][j]) globParts[i][j] = '*';
                }
                const { optimizationLevel = 1 } = this.options;
                if (optimizationLevel >= 2) {
                    globParts = this.firstPhasePreProcess(globParts);
                    globParts = this.secondPhasePreProcess(globParts);
                } else globParts = optimizationLevel >= 1 ? this.levelOneOptimize(globParts) : this.adjascentGlobstarOptimize(globParts);
                return globParts;
            }
            adjascentGlobstarOptimize(globParts) {
                return globParts.map((parts)=>{
                    let gs = -1;
                    while(-1 !== (gs = parts.indexOf('**', gs + 1))){
                        let i = gs;
                        while('**' === parts[i + 1])i++;
                        if (i !== gs) parts.splice(gs, i - gs);
                    }
                    return parts;
                });
            }
            levelOneOptimize(globParts) {
                return globParts.map((parts)=>{
                    parts = parts.reduce((set, part)=>{
                        const prev = set[set.length - 1];
                        if ('**' === part && '**' === prev) return set;
                        if ('..' === part) {
                            if (prev && '..' !== prev && '.' !== prev && '**' !== prev) {
                                set.pop();
                                return set;
                            }
                        }
                        set.push(part);
                        return set;
                    }, []);
                    return 0 === parts.length ? [
                        ''
                    ] : parts;
                });
            }
            levelTwoFileOptimize(parts) {
                if (!Array.isArray(parts)) parts = this.slashSplit(parts);
                let didSomething = false;
                do {
                    didSomething = false;
                    if (!this.preserveMultipleSlashes) {
                        for(let i = 1; i < parts.length - 1; i++){
                            const p = parts[i];
                            if (1 !== i || '' !== p || '' !== parts[0]) {
                                if ('.' === p || '' === p) {
                                    didSomething = true;
                                    parts.splice(i, 1);
                                    i--;
                                }
                            }
                        }
                        if ('.' === parts[0] && 2 === parts.length && ('.' === parts[1] || '' === parts[1])) {
                            didSomething = true;
                            parts.pop();
                        }
                    }
                    let dd = 0;
                    while(-1 !== (dd = parts.indexOf('..', dd + 1))){
                        const p = parts[dd - 1];
                        if (p && '.' !== p && '..' !== p && '**' !== p) {
                            didSomething = true;
                            parts.splice(dd - 1, 2);
                            dd -= 2;
                        }
                    }
                }while (didSomething);
                return 0 === parts.length ? [
                    ''
                ] : parts;
            }
            firstPhasePreProcess(globParts) {
                let didSomething = false;
                do {
                    didSomething = false;
                    for (let parts of globParts){
                        let gs = -1;
                        while(-1 !== (gs = parts.indexOf('**', gs + 1))){
                            let gss = gs;
                            while('**' === parts[gss + 1])gss++;
                            if (gss > gs) parts.splice(gs + 1, gss - gs);
                            let next = parts[gs + 1];
                            const p = parts[gs + 2];
                            const p2 = parts[gs + 3];
                            if ('..' !== next) continue;
                            if (!p || '.' === p || '..' === p || !p2 || '.' === p2 || '..' === p2) continue;
                            didSomething = true;
                            parts.splice(gs, 1);
                            const other = parts.slice(0);
                            other[gs] = '**';
                            globParts.push(other);
                            gs--;
                        }
                        if (!this.preserveMultipleSlashes) {
                            for(let i = 1; i < parts.length - 1; i++){
                                const p = parts[i];
                                if (1 !== i || '' !== p || '' !== parts[0]) {
                                    if ('.' === p || '' === p) {
                                        didSomething = true;
                                        parts.splice(i, 1);
                                        i--;
                                    }
                                }
                            }
                            if ('.' === parts[0] && 2 === parts.length && ('.' === parts[1] || '' === parts[1])) {
                                didSomething = true;
                                parts.pop();
                            }
                        }
                        let dd = 0;
                        while(-1 !== (dd = parts.indexOf('..', dd + 1))){
                            const p = parts[dd - 1];
                            if (p && '.' !== p && '..' !== p && '**' !== p) {
                                didSomething = true;
                                const needDot = 1 === dd && '**' === parts[dd + 1];
                                const splin = needDot ? [
                                    '.'
                                ] : [];
                                parts.splice(dd - 1, 2, ...splin);
                                if (0 === parts.length) parts.push('');
                                dd -= 2;
                            }
                        }
                    }
                }while (didSomething);
                return globParts;
            }
            secondPhasePreProcess(globParts) {
                for(let i = 0; i < globParts.length - 1; i++)for(let j = i + 1; j < globParts.length; j++){
                    const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);
                    if (matched) {
                        globParts[i] = [];
                        globParts[j] = matched;
                        break;
                    }
                }
                return globParts.filter((gs)=>gs.length);
            }
            partsMatch(a, b, emptyGSMatch = false) {
                let ai = 0;
                let bi = 0;
                let result = [];
                let which = '';
                while(ai < a.length && bi < b.length)if (a[ai] === b[bi]) {
                    result.push('b' === which ? b[bi] : a[ai]);
                    ai++;
                    bi++;
                } else if (emptyGSMatch && '**' === a[ai] && b[bi] === a[ai + 1]) {
                    result.push(a[ai]);
                    ai++;
                } else if (emptyGSMatch && '**' === b[bi] && a[ai] === b[bi + 1]) {
                    result.push(b[bi]);
                    bi++;
                } else if ('*' === a[ai] && b[bi] && (this.options.dot || !b[bi].startsWith('.')) && '**' !== b[bi]) {
                    if ('b' === which) return false;
                    which = 'a';
                    result.push(a[ai]);
                    ai++;
                    bi++;
                } else {
                    if ('*' !== b[bi] || !a[ai] || !this.options.dot && !!a[ai].startsWith('.') || '**' === a[ai]) return false;
                    if ('a' === which) return false;
                    which = 'b';
                    result.push(b[bi]);
                    ai++;
                    bi++;
                }
                return a.length === b.length && result;
            }
            parseNegate() {
                if (this.nonegate) return;
                const pattern = this.pattern;
                let negate = false;
                let negateOffset = 0;
                for(let i = 0; i < pattern.length && '!' === pattern.charAt(i); i++){
                    negate = !negate;
                    negateOffset++;
                }
                if (negateOffset) this.pattern = pattern.slice(negateOffset);
                this.negate = negate;
            }
            matchOne(file, pattern, partial = false) {
                const options = this.options;
                if (this.isWindows) {
                    const fileDrive = 'string' == typeof file[0] && /^[a-z]:$/i.test(file[0]);
                    const fileUNC = !fileDrive && '' === file[0] && '' === file[1] && '?' === file[2] && /^[a-z]:$/i.test(file[3]);
                    const patternDrive = 'string' == typeof pattern[0] && /^[a-z]:$/i.test(pattern[0]);
                    const patternUNC = !patternDrive && '' === pattern[0] && '' === pattern[1] && '?' === pattern[2] && 'string' == typeof pattern[3] && /^[a-z]:$/i.test(pattern[3]);
                    const fdi = fileUNC ? 3 : fileDrive ? 0 : void 0;
                    const pdi = patternUNC ? 3 : patternDrive ? 0 : void 0;
                    if ('number' == typeof fdi && 'number' == typeof pdi) {
                        const [fd, pd] = [
                            file[fdi],
                            pattern[pdi]
                        ];
                        if (fd.toLowerCase() === pd.toLowerCase()) {
                            pattern[pdi] = fd;
                            if (pdi > fdi) pattern = pattern.slice(pdi);
                            else if (fdi > pdi) file = file.slice(fdi);
                        }
                    }
                }
                const { optimizationLevel = 1 } = this.options;
                if (optimizationLevel >= 2) file = this.levelTwoFileOptimize(file);
                this.debug('matchOne', this, {
                    file,
                    pattern
                });
                this.debug('matchOne', file.length, pattern.length);
                for(var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++){
                    this.debug('matchOne loop');
                    var p = pattern[pi];
                    var f = file[fi];
                    this.debug(pattern, p, f);
                    if (false === p) return false;
                    if (p === GLOBSTAR) {
                        this.debug('GLOBSTAR', [
                            pattern,
                            p,
                            f
                        ]);
                        var fr = fi;
                        var pr = pi + 1;
                        if (pr === pl) {
                            this.debug('** at the end');
                            for(; fi < fl; fi++)if ('.' === file[fi] || '..' === file[fi] || !options.dot && '.' === file[fi].charAt(0)) return false;
                            return true;
                        }
                        while(fr < fl){
                            var swallowee = file[fr];
                            this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);
                            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                                this.debug('globstar found match!', fr, fl, swallowee);
                                return true;
                            }
                            if ('.' === swallowee || '..' === swallowee || !options.dot && '.' === swallowee.charAt(0)) {
                                this.debug('dot detected!', file, fr, pattern, pr);
                                break;
                            }
                            this.debug('globstar swallow a segment, and continue');
                            fr++;
                        }
                        if (partial) {
                            this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
                            if (fr === fl) return true;
                        }
                        return false;
                    }
                    let hit;
                    if ('string' == typeof p) {
                        hit = f === p;
                        this.debug('string match', p, f, hit);
                    } else {
                        hit = p.test(f);
                        this.debug('pattern match', p, f, hit);
                    }
                    if (!hit) return false;
                }
                if (fi === fl && pi === pl) return true;
                if (fi === fl) return partial;
                if (pi === pl) return fi === fl - 1 && '' === file[fi];
                throw new Error('wtf?');
            }
            braceExpand() {
                return braceExpand(this.pattern, this.options);
            }
            parse(pattern) {
                assertValidPattern(pattern);
                const options = this.options;
                if ('**' === pattern) return GLOBSTAR;
                if ('' === pattern) return '';
                let m;
                let fastTest = null;
                if (m = pattern.match(starRE)) fastTest = options.dot ? starTestDot : starTest;
                else if (m = pattern.match(starDotExtRE)) fastTest = (options.nocase ? options.dot ? starDotExtTestNocaseDot : starDotExtTestNocase : options.dot ? starDotExtTestDot : starDotExtTest)(m[1]);
                else if (m = pattern.match(qmarksRE)) fastTest = (options.nocase ? options.dot ? qmarksTestNocaseDot : qmarksTestNocase : options.dot ? qmarksTestDot : qmarksTest)(m);
                else if (m = pattern.match(starDotStarRE)) fastTest = options.dot ? starDotStarTestDot : starDotStarTest;
                else if (m = pattern.match(dotStarRE)) fastTest = dotStarTest;
                const re = ast_AST.fromGlob(pattern, this.options).toMMPattern();
                if (fastTest && 'object' == typeof re) Reflect.defineProperty(re, 'test', {
                    value: fastTest
                });
                return re;
            }
            makeRe() {
                if (this.regexp || false === this.regexp) return this.regexp;
                const set = this.set;
                if (!set.length) {
                    this.regexp = false;
                    return this.regexp;
                }
                const options = this.options;
                const twoStar = options.noglobstar ? esm_star : options.dot ? twoStarDot : twoStarNoDot;
                const flags = new Set(options.nocase ? [
                    'i'
                ] : []);
                let re = set.map((pattern)=>{
                    const pp = pattern.map((p)=>{
                        if (p instanceof RegExp) for (const f of p.flags.split(''))flags.add(f);
                        return 'string' == typeof p ? esm_regExpEscape(p) : p === GLOBSTAR ? GLOBSTAR : p._src;
                    });
                    pp.forEach((p, i)=>{
                        const next = pp[i + 1];
                        const prev = pp[i - 1];
                        if (p !== GLOBSTAR || prev === GLOBSTAR) return;
                        if (void 0 === prev) if (void 0 !== next && next !== GLOBSTAR) pp[i + 1] = '(?:\\/|' + twoStar + '\\/)?' + next;
                        else pp[i] = twoStar;
                        else if (void 0 === next) pp[i - 1] = prev + '(?:\\/|' + twoStar + ')?';
                        else if (next !== GLOBSTAR) {
                            pp[i - 1] = prev + '(?:\\/|\\/' + twoStar + '\\/)' + next;
                            pp[i + 1] = GLOBSTAR;
                        }
                    });
                    return pp.filter((p)=>p !== GLOBSTAR).join('/');
                }).join('|');
                const [open, close] = set.length > 1 ? [
                    '(?:',
                    ')'
                ] : [
                    '',
                    ''
                ];
                re = '^' + open + re + close + '$';
                if (this.negate) re = '^(?!' + re + ').+$';
                try {
                    this.regexp = new RegExp(re, [
                        ...flags
                    ].join(''));
                } catch (ex) {
                    this.regexp = false;
                }
                return this.regexp;
            }
            slashSplit(p) {
                if (this.preserveMultipleSlashes) return p.split('/');
                if (this.isWindows && /^\/\/[^\/]+/.test(p)) return [
                    '',
                    ...p.split(/\/+/)
                ];
                return p.split(/\/+/);
            }
            match(f, partial = this.partial) {
                this.debug('match', f, this.pattern);
                if (this.comment) return false;
                if (this.empty) return '' === f;
                if ('/' === f && partial) return true;
                const options = this.options;
                if (this.isWindows) f = f.split('\\').join('/');
                const ff = this.slashSplit(f);
                this.debug(this.pattern, 'split', ff);
                const set = this.set;
                this.debug(this.pattern, 'set', set);
                let filename = ff[ff.length - 1];
                if (!filename) for(let i = ff.length - 2; !filename && i >= 0; i--)filename = ff[i];
                for(let i = 0; i < set.length; i++){
                    const pattern = set[i];
                    let file = ff;
                    if (options.matchBase && 1 === pattern.length) file = [
                        filename
                    ];
                    const hit = this.matchOne(file, pattern, partial);
                    if (hit) {
                        if (options.flipNegate) return true;
                        return !this.negate;
                    }
                }
                if (options.flipNegate) return false;
                return this.negate;
            }
            static defaults(def) {
                return minimatch.defaults(def).Minimatch;
            }
        }
        minimatch.AST = ast_AST;
        minimatch.Minimatch = esm_Minimatch;
        minimatch.escape = escape_escape;
        minimatch.unescape = unescape_unescape;
        const external_node_url_namespaceObject = require("node:url");
        const perf = 'object' == typeof performance && performance && 'function' == typeof performance.now ? performance : Date;
        const warned = new Set();
        const PROCESS = 'object' == typeof process && process ? process : {};
        const emitWarning = (msg, type, code, fn)=>{
            'function' == typeof PROCESS.emitWarning ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
        };
        let AC = globalThis.AbortController;
        let AS = globalThis.AbortSignal;
        if (void 0 === AC) {
            AS = class {
                onabort;
                _onabort = [];
                reason;
                aborted = false;
                addEventListener(_, fn) {
                    this._onabort.push(fn);
                }
            };
            AC = class {
                constructor(){
                    warnACPolyfill();
                }
                signal = new AS();
                abort(reason) {
                    if (this.signal.aborted) return;
                    this.signal.reason = reason;
                    this.signal.aborted = true;
                    for (const fn of this.signal._onabort)fn(reason);
                    this.signal.onabort?.(reason);
                }
            };
            let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';
            const warnACPolyfill = ()=>{
                if (!printACPolyfillWarning) return;
                printACPolyfillWarning = false;
                emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);
            };
        }
        const shouldWarn = (code)=>!warned.has(code);
        Symbol('type');
        const isPosInt = (n)=>n && n === Math.floor(n) && n > 0 && isFinite(n);
        const getUintArray = (max)=>isPosInt(max) ? max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null : null;
        class ZeroArray extends Array {
            constructor(size){
                super(size);
                this.fill(0);
            }
        }
        class Stack {
            heap;
            length;
            static #constructing = false;
            static create(max) {
                const HeapCls = getUintArray(max);
                if (!HeapCls) return [];
                Stack.#constructing = true;
                const s = new Stack(max, HeapCls);
                Stack.#constructing = false;
                return s;
            }
            constructor(max, HeapCls){
                if (!Stack.#constructing) throw new TypeError('instantiate Stack using Stack.create(n)');
                this.heap = new HeapCls(max);
                this.length = 0;
            }
            push(n) {
                this.heap[this.length++] = n;
            }
            pop() {
                return this.heap[--this.length];
            }
        }
        class LRUCache {
            #max;
            #maxSize;
            #dispose;
            #disposeAfter;
            #fetchMethod;
            #memoMethod;
            ttl;
            ttlResolution;
            ttlAutopurge;
            updateAgeOnGet;
            updateAgeOnHas;
            allowStale;
            noDisposeOnSet;
            noUpdateTTL;
            maxEntrySize;
            sizeCalculation;
            noDeleteOnFetchRejection;
            noDeleteOnStaleGet;
            allowStaleOnFetchAbort;
            allowStaleOnFetchRejection;
            ignoreFetchAbort;
            #size;
            #calculatedSize;
            #keyMap;
            #keyList;
            #valList;
            #next;
            #prev;
            #head;
            #tail;
            #free;
            #disposed;
            #sizes;
            #starts;
            #ttls;
            #hasDispose;
            #hasFetchMethod;
            #hasDisposeAfter;
            static unsafeExposeInternals(c) {
                return {
                    starts: c.#starts,
                    ttls: c.#ttls,
                    sizes: c.#sizes,
                    keyMap: c.#keyMap,
                    keyList: c.#keyList,
                    valList: c.#valList,
                    next: c.#next,
                    prev: c.#prev,
                    get head () {
                        return c.#head;
                    },
                    get tail () {
                        return c.#tail;
                    },
                    free: c.#free,
                    isBackgroundFetch: (p)=>c.#isBackgroundFetch(p),
                    backgroundFetch: (k, index, options, context)=>c.#backgroundFetch(k, index, options, context),
                    moveToTail: (index)=>c.#moveToTail(index),
                    indexes: (options)=>c.#indexes(options),
                    rindexes: (options)=>c.#rindexes(options),
                    isStale: (index)=>c.#isStale(index)
                };
            }
            get max() {
                return this.#max;
            }
            get maxSize() {
                return this.#maxSize;
            }
            get calculatedSize() {
                return this.#calculatedSize;
            }
            get size() {
                return this.#size;
            }
            get fetchMethod() {
                return this.#fetchMethod;
            }
            get memoMethod() {
                return this.#memoMethod;
            }
            get dispose() {
                return this.#dispose;
            }
            get disposeAfter() {
                return this.#disposeAfter;
            }
            constructor(options){
                const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
                if (0 !== max && !isPosInt(max)) throw new TypeError('max option must be a nonnegative integer');
                const UintArray = max ? getUintArray(max) : Array;
                if (!UintArray) throw new Error('invalid max value: ' + max);
                this.#max = max;
                this.#maxSize = maxSize;
                this.maxEntrySize = maxEntrySize || this.#maxSize;
                this.sizeCalculation = sizeCalculation;
                if (this.sizeCalculation) {
                    if (!this.#maxSize && !this.maxEntrySize) throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');
                    if ('function' != typeof this.sizeCalculation) throw new TypeError('sizeCalculation set to non-function');
                }
                if (void 0 !== memoMethod && 'function' != typeof memoMethod) throw new TypeError('memoMethod must be a function if defined');
                this.#memoMethod = memoMethod;
                if (void 0 !== fetchMethod && 'function' != typeof fetchMethod) throw new TypeError('fetchMethod must be a function if specified');
                this.#fetchMethod = fetchMethod;
                this.#hasFetchMethod = !!fetchMethod;
                this.#keyMap = new Map();
                this.#keyList = new Array(max).fill(void 0);
                this.#valList = new Array(max).fill(void 0);
                this.#next = new UintArray(max);
                this.#prev = new UintArray(max);
                this.#head = 0;
                this.#tail = 0;
                this.#free = Stack.create(max);
                this.#size = 0;
                this.#calculatedSize = 0;
                if ('function' == typeof dispose) this.#dispose = dispose;
                if ('function' == typeof disposeAfter) {
                    this.#disposeAfter = disposeAfter;
                    this.#disposed = [];
                } else {
                    this.#disposeAfter = void 0;
                    this.#disposed = void 0;
                }
                this.#hasDispose = !!this.#dispose;
                this.#hasDisposeAfter = !!this.#disposeAfter;
                this.noDisposeOnSet = !!noDisposeOnSet;
                this.noUpdateTTL = !!noUpdateTTL;
                this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
                this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
                this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
                this.ignoreFetchAbort = !!ignoreFetchAbort;
                if (0 !== this.maxEntrySize) {
                    if (0 !== this.#maxSize) {
                        if (!isPosInt(this.#maxSize)) throw new TypeError('maxSize must be a positive integer if specified');
                    }
                    if (!isPosInt(this.maxEntrySize)) throw new TypeError('maxEntrySize must be a positive integer if specified');
                    this.#initializeSizeTracking();
                }
                this.allowStale = !!allowStale;
                this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
                this.updateAgeOnGet = !!updateAgeOnGet;
                this.updateAgeOnHas = !!updateAgeOnHas;
                this.ttlResolution = isPosInt(ttlResolution) || 0 === ttlResolution ? ttlResolution : 1;
                this.ttlAutopurge = !!ttlAutopurge;
                this.ttl = ttl || 0;
                if (this.ttl) {
                    if (!isPosInt(this.ttl)) throw new TypeError('ttl must be a positive integer if specified');
                    this.#initializeTTLTracking();
                }
                if (0 === this.#max && 0 === this.ttl && 0 === this.#maxSize) throw new TypeError('At least one of max, maxSize, or ttl is required');
                if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
                    const code = 'LRU_CACHE_UNBOUNDED';
                    if (shouldWarn(code)) {
                        warned.add(code);
                        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
                        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);
                    }
                }
            }
            getRemainingTTL(key) {
                return this.#keyMap.has(key) ? 1 / 0 : 0;
            }
            #initializeTTLTracking() {
                const ttls = new ZeroArray(this.#max);
                const starts = new ZeroArray(this.#max);
                this.#ttls = ttls;
                this.#starts = starts;
                this.#setItemTTL = (index, ttl, start = perf.now())=>{
                    starts[index] = 0 !== ttl ? start : 0;
                    ttls[index] = ttl;
                    if (0 !== ttl && this.ttlAutopurge) {
                        const t1 = setTimeout(()=>{
                            if (this.#isStale(index)) this.#delete(this.#keyList[index], 'expire');
                        }, ttl + 1);
                        if (t1.unref) t1.unref();
                    }
                };
                this.#updateItemAge = (index)=>{
                    starts[index] = 0 !== ttls[index] ? perf.now() : 0;
                };
                this.#statusTTL = (status, index)=>{
                    if (ttls[index]) {
                        const ttl = ttls[index];
                        const start = starts[index];
                        if (!ttl || !start) return;
                        status.ttl = ttl;
                        status.start = start;
                        status.now = cachedNow || getNow();
                        const age = status.now - start;
                        status.remainingTTL = ttl - age;
                    }
                };
                let cachedNow = 0;
                const getNow = ()=>{
                    const n = perf.now();
                    if (this.ttlResolution > 0) {
                        cachedNow = n;
                        const t1 = setTimeout(()=>cachedNow = 0, this.ttlResolution);
                        if (t1.unref) t1.unref();
                    }
                    return n;
                };
                this.getRemainingTTL = (key)=>{
                    const index = this.#keyMap.get(key);
                    if (void 0 === index) return 0;
                    const ttl = ttls[index];
                    const start = starts[index];
                    if (!ttl || !start) return 1 / 0;
                    const age = (cachedNow || getNow()) - start;
                    return ttl - age;
                };
                this.#isStale = (index)=>{
                    const s = starts[index];
                    const t1 = ttls[index];
                    return !!t1 && !!s && (cachedNow || getNow()) - s > t1;
                };
            }
            #updateItemAge = ()=>{};
            #statusTTL = ()=>{};
            #setItemTTL = ()=>{};
            #isStale = ()=>false;
            #initializeSizeTracking() {
                const sizes = new ZeroArray(this.#max);
                this.#calculatedSize = 0;
                this.#sizes = sizes;
                this.#removeItemSize = (index)=>{
                    this.#calculatedSize -= sizes[index];
                    sizes[index] = 0;
                };
                this.#requireSize = (k, v, size, sizeCalculation)=>{
                    if (this.#isBackgroundFetch(v)) return 0;
                    if (!isPosInt(size)) if (sizeCalculation) {
                        if ('function' != typeof sizeCalculation) throw new TypeError('sizeCalculation must be a function');
                        size = sizeCalculation(v, k);
                        if (!isPosInt(size)) throw new TypeError('sizeCalculation return invalid (expect positive integer)');
                    } else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
                    return size;
                };
                this.#addItemSize = (index, size, status)=>{
                    sizes[index] = size;
                    if (this.#maxSize) {
                        const maxSize = this.#maxSize - sizes[index];
                        while(this.#calculatedSize > maxSize)this.#evict(true);
                    }
                    this.#calculatedSize += sizes[index];
                    if (status) {
                        status.entrySize = size;
                        status.totalCalculatedSize = this.#calculatedSize;
                    }
                };
            }
            #removeItemSize = (_i)=>{};
            #addItemSize = (_i, _s, _st)=>{};
            #requireSize = (_k, _v, size, sizeCalculation)=>{
                if (size || sizeCalculation) throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');
                return 0;
            };
            *#indexes({ allowStale = this.allowStale } = {}) {
                if (this.#size) for(let i = this.#tail; true;){
                    if (!this.#isValidIndex(i)) break;
                    if (allowStale || !this.#isStale(i)) yield i;
                    if (i === this.#head) break;
                    i = this.#prev[i];
                }
            }
            *#rindexes({ allowStale = this.allowStale } = {}) {
                if (this.#size) for(let i = this.#head; true;){
                    if (!this.#isValidIndex(i)) break;
                    if (allowStale || !this.#isStale(i)) yield i;
                    if (i === this.#tail) break;
                    i = this.#next[i];
                }
            }
            #isValidIndex(index) {
                return void 0 !== index && this.#keyMap.get(this.#keyList[index]) === index;
            }
            *entries() {
                for (const i of this.#indexes())if (void 0 !== this.#valList[i] && void 0 !== this.#keyList[i] && !this.#isBackgroundFetch(this.#valList[i])) yield [
                    this.#keyList[i],
                    this.#valList[i]
                ];
            }
            *rentries() {
                for (const i of this.#rindexes())if (void 0 !== this.#valList[i] && void 0 !== this.#keyList[i] && !this.#isBackgroundFetch(this.#valList[i])) yield [
                    this.#keyList[i],
                    this.#valList[i]
                ];
            }
            *keys() {
                for (const i of this.#indexes()){
                    const k = this.#keyList[i];
                    if (void 0 !== k && !this.#isBackgroundFetch(this.#valList[i])) yield k;
                }
            }
            *rkeys() {
                for (const i of this.#rindexes()){
                    const k = this.#keyList[i];
                    if (void 0 !== k && !this.#isBackgroundFetch(this.#valList[i])) yield k;
                }
            }
            *values() {
                for (const i of this.#indexes()){
                    const v = this.#valList[i];
                    if (void 0 !== v && !this.#isBackgroundFetch(this.#valList[i])) yield this.#valList[i];
                }
            }
            *rvalues() {
                for (const i of this.#rindexes()){
                    const v = this.#valList[i];
                    if (void 0 !== v && !this.#isBackgroundFetch(this.#valList[i])) yield this.#valList[i];
                }
            }
            [Symbol.iterator]() {
                return this.entries();
            }
            [Symbol.toStringTag] = 'LRUCache';
            find(fn, getOptions = {}) {
                for (const i of this.#indexes()){
                    const v = this.#valList[i];
                    const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
                    if (void 0 !== value) {
                        if (fn(value, this.#keyList[i], this)) return this.get(this.#keyList[i], getOptions);
                    }
                }
            }
            forEach(fn, thisp = this) {
                for (const i of this.#indexes()){
                    const v = this.#valList[i];
                    const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
                    if (void 0 !== value) fn.call(thisp, value, this.#keyList[i], this);
                }
            }
            rforEach(fn, thisp = this) {
                for (const i of this.#rindexes()){
                    const v = this.#valList[i];
                    const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
                    if (void 0 !== value) fn.call(thisp, value, this.#keyList[i], this);
                }
            }
            purgeStale() {
                let deleted = false;
                for (const i of this.#rindexes({
                    allowStale: true
                }))if (this.#isStale(i)) {
                    this.#delete(this.#keyList[i], 'expire');
                    deleted = true;
                }
                return deleted;
            }
            info(key) {
                const i = this.#keyMap.get(key);
                if (void 0 === i) return;
                const v = this.#valList[i];
                const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
                if (void 0 === value) return;
                const entry = {
                    value
                };
                if (this.#ttls && this.#starts) {
                    const ttl = this.#ttls[i];
                    const start = this.#starts[i];
                    if (ttl && start) {
                        const remain = ttl - (perf.now() - start);
                        entry.ttl = remain;
                        entry.start = Date.now();
                    }
                }
                if (this.#sizes) entry.size = this.#sizes[i];
                return entry;
            }
            dump() {
                const arr = [];
                for (const i of this.#indexes({
                    allowStale: true
                })){
                    const key = this.#keyList[i];
                    const v = this.#valList[i];
                    const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
                    if (void 0 === value || void 0 === key) continue;
                    const entry = {
                        value
                    };
                    if (this.#ttls && this.#starts) {
                        entry.ttl = this.#ttls[i];
                        const age = perf.now() - this.#starts[i];
                        entry.start = Math.floor(Date.now() - age);
                    }
                    if (this.#sizes) entry.size = this.#sizes[i];
                    arr.unshift([
                        key,
                        entry
                    ]);
                }
                return arr;
            }
            load(arr) {
                this.clear();
                for (const [key, entry] of arr){
                    if (entry.start) {
                        const age = Date.now() - entry.start;
                        entry.start = perf.now() - age;
                    }
                    this.set(key, entry.value, entry);
                }
            }
            set(k, v, setOptions = {}) {
                if (void 0 === v) {
                    this.delete(k);
                    return this;
                }
                const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
                let { noUpdateTTL = this.noUpdateTTL } = setOptions;
                const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
                if (this.maxEntrySize && size > this.maxEntrySize) {
                    if (status) {
                        status.set = 'miss';
                        status.maxEntrySizeExceeded = true;
                    }
                    this.#delete(k, 'set');
                    return this;
                }
                let index = 0 === this.#size ? void 0 : this.#keyMap.get(k);
                if (void 0 === index) {
                    index = 0 === this.#size ? this.#tail : 0 !== this.#free.length ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
                    this.#keyList[index] = k;
                    this.#valList[index] = v;
                    this.#keyMap.set(k, index);
                    this.#next[this.#tail] = index;
                    this.#prev[index] = this.#tail;
                    this.#tail = index;
                    this.#size++;
                    this.#addItemSize(index, size, status);
                    if (status) status.set = 'add';
                    noUpdateTTL = false;
                } else {
                    this.#moveToTail(index);
                    const oldVal = this.#valList[index];
                    if (v !== oldVal) {
                        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
                            oldVal.__abortController.abort(new Error('replaced'));
                            const { __staleWhileFetching: s } = oldVal;
                            if (void 0 !== s && !noDisposeOnSet) {
                                if (this.#hasDispose) this.#dispose?.(s, k, 'set');
                                if (this.#hasDisposeAfter) this.#disposed?.push([
                                    s,
                                    k,
                                    'set'
                                ]);
                            }
                        } else if (!noDisposeOnSet) {
                            if (this.#hasDispose) this.#dispose?.(oldVal, k, 'set');
                            if (this.#hasDisposeAfter) this.#disposed?.push([
                                oldVal,
                                k,
                                'set'
                            ]);
                        }
                        this.#removeItemSize(index);
                        this.#addItemSize(index, size, status);
                        this.#valList[index] = v;
                        if (status) {
                            status.set = 'replace';
                            const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
                            if (void 0 !== oldValue) status.oldValue = oldValue;
                        }
                    } else if (status) status.set = 'update';
                }
                if (0 !== ttl && !this.#ttls) this.#initializeTTLTracking();
                if (this.#ttls) {
                    if (!noUpdateTTL) this.#setItemTTL(index, ttl, start);
                    if (status) this.#statusTTL(status, index);
                }
                if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
                    const dt = this.#disposed;
                    let task;
                    while(task = dt?.shift())this.#disposeAfter?.(...task);
                }
                return this;
            }
            pop() {
                try {
                    while(this.#size){
                        const val = this.#valList[this.#head];
                        this.#evict(true);
                        if (this.#isBackgroundFetch(val)) {
                            if (val.__staleWhileFetching) return val.__staleWhileFetching;
                        } else if (void 0 !== val) return val;
                    }
                } finally{
                    if (this.#hasDisposeAfter && this.#disposed) {
                        const dt = this.#disposed;
                        let task;
                        while(task = dt?.shift())this.#disposeAfter?.(...task);
                    }
                }
            }
            #evict(free) {
                const head = this.#head;
                const k = this.#keyList[head];
                const v = this.#valList[head];
                if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) v.__abortController.abort(new Error('evicted'));
                else if (this.#hasDispose || this.#hasDisposeAfter) {
                    if (this.#hasDispose) this.#dispose?.(v, k, 'evict');
                    if (this.#hasDisposeAfter) this.#disposed?.push([
                        v,
                        k,
                        'evict'
                    ]);
                }
                this.#removeItemSize(head);
                if (free) {
                    this.#keyList[head] = void 0;
                    this.#valList[head] = void 0;
                    this.#free.push(head);
                }
                if (1 === this.#size) {
                    this.#head = this.#tail = 0;
                    this.#free.length = 0;
                } else this.#head = this.#next[head];
                this.#keyMap.delete(k);
                this.#size--;
                return head;
            }
            has(k, hasOptions = {}) {
                const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
                const index = this.#keyMap.get(k);
                if (void 0 !== index) {
                    const v = this.#valList[index];
                    if (this.#isBackgroundFetch(v) && void 0 === v.__staleWhileFetching) return false;
                    if (this.#isStale(index)) {
                        if (status) {
                            status.has = 'stale';
                            this.#statusTTL(status, index);
                        }
                    } else {
                        if (updateAgeOnHas) this.#updateItemAge(index);
                        if (status) {
                            status.has = 'hit';
                            this.#statusTTL(status, index);
                        }
                        return true;
                    }
                } else if (status) status.has = 'miss';
                return false;
            }
            peek(k, peekOptions = {}) {
                const { allowStale = this.allowStale } = peekOptions;
                const index = this.#keyMap.get(k);
                if (void 0 === index || !allowStale && this.#isStale(index)) return;
                const v = this.#valList[index];
                return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            }
            #backgroundFetch(k, index, options, context) {
                const v = void 0 === index ? void 0 : this.#valList[index];
                if (this.#isBackgroundFetch(v)) return v;
                const ac = new AC();
                const { signal } = options;
                signal?.addEventListener('abort', ()=>ac.abort(signal.reason), {
                    signal: ac.signal
                });
                const fetchOpts = {
                    signal: ac.signal,
                    options,
                    context
                };
                const cb = (v, updateCache = false)=>{
                    const { aborted } = ac.signal;
                    const ignoreAbort = options.ignoreFetchAbort && void 0 !== v;
                    if (options.status) if (aborted && !updateCache) {
                        options.status.fetchAborted = true;
                        options.status.fetchError = ac.signal.reason;
                        if (ignoreAbort) options.status.fetchAbortIgnored = true;
                    } else options.status.fetchResolved = true;
                    if (aborted && !ignoreAbort && !updateCache) return fetchFail(ac.signal.reason);
                    const bf = p;
                    if (this.#valList[index] === p) if (void 0 === v) if (bf.__staleWhileFetching) this.#valList[index] = bf.__staleWhileFetching;
                    else this.#delete(k, 'fetch');
                    else {
                        if (options.status) options.status.fetchUpdated = true;
                        this.set(k, v, fetchOpts.options);
                    }
                    return v;
                };
                const eb = (er)=>{
                    if (options.status) {
                        options.status.fetchRejected = true;
                        options.status.fetchError = er;
                    }
                    return fetchFail(er);
                };
                const fetchFail = (er)=>{
                    const { aborted } = ac.signal;
                    const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
                    const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
                    const noDelete = allowStale || options.noDeleteOnFetchRejection;
                    const bf = p;
                    if (this.#valList[index] === p) {
                        const del = !noDelete || void 0 === bf.__staleWhileFetching;
                        if (del) this.#delete(k, 'fetch');
                        else if (!allowStaleAborted) this.#valList[index] = bf.__staleWhileFetching;
                    }
                    if (allowStale) {
                        if (options.status && void 0 !== bf.__staleWhileFetching) options.status.returnedStale = true;
                        return bf.__staleWhileFetching;
                    }
                    if (bf.__returned === bf) throw er;
                };
                const pcall = (res, rej)=>{
                    const fmp = this.#fetchMethod?.(k, v, fetchOpts);
                    if (fmp && fmp instanceof Promise) fmp.then((v)=>res(void 0 === v ? void 0 : v), rej);
                    ac.signal.addEventListener('abort', ()=>{
                        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
                            res(void 0);
                            if (options.allowStaleOnFetchAbort) res = (v)=>cb(v, true);
                        }
                    });
                };
                if (options.status) options.status.fetchDispatched = true;
                const p = new Promise(pcall).then(cb, eb);
                const bf = Object.assign(p, {
                    __abortController: ac,
                    __staleWhileFetching: v,
                    __returned: void 0
                });
                if (void 0 === index) {
                    this.set(k, bf, {
                        ...fetchOpts.options,
                        status: void 0
                    });
                    index = this.#keyMap.get(k);
                } else this.#valList[index] = bf;
                return bf;
            }
            #isBackgroundFetch(p) {
                if (!this.#hasFetchMethod) return false;
                const b = p;
                return !!b && b instanceof Promise && b.hasOwnProperty('__staleWhileFetching') && b.__abortController instanceof AC;
            }
            async fetch(k, fetchOptions = {}) {
                const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal } = fetchOptions;
                if (!this.#hasFetchMethod) {
                    if (status) status.fetch = 'get';
                    return this.get(k, {
                        allowStale,
                        updateAgeOnGet,
                        noDeleteOnStaleGet,
                        status
                    });
                }
                const options = {
                    allowStale,
                    updateAgeOnGet,
                    noDeleteOnStaleGet,
                    ttl,
                    noDisposeOnSet,
                    size,
                    sizeCalculation,
                    noUpdateTTL,
                    noDeleteOnFetchRejection,
                    allowStaleOnFetchRejection,
                    allowStaleOnFetchAbort,
                    ignoreFetchAbort,
                    status,
                    signal
                };
                let index = this.#keyMap.get(k);
                if (void 0 === index) {
                    if (status) status.fetch = 'miss';
                    const p = this.#backgroundFetch(k, index, options, context);
                    return p.__returned = p;
                }
                {
                    const v = this.#valList[index];
                    if (this.#isBackgroundFetch(v)) {
                        const stale = allowStale && void 0 !== v.__staleWhileFetching;
                        if (status) {
                            status.fetch = 'inflight';
                            if (stale) status.returnedStale = true;
                        }
                        return stale ? v.__staleWhileFetching : v.__returned = v;
                    }
                    const isStale = this.#isStale(index);
                    if (!forceRefresh && !isStale) {
                        if (status) status.fetch = 'hit';
                        this.#moveToTail(index);
                        if (updateAgeOnGet) this.#updateItemAge(index);
                        if (status) this.#statusTTL(status, index);
                        return v;
                    }
                    const p = this.#backgroundFetch(k, index, options, context);
                    const hasStale = void 0 !== p.__staleWhileFetching;
                    const staleVal = hasStale && allowStale;
                    if (status) {
                        status.fetch = isStale ? 'stale' : 'refresh';
                        if (staleVal && isStale) status.returnedStale = true;
                    }
                    return staleVal ? p.__staleWhileFetching : p.__returned = p;
                }
            }
            async forceFetch(k, fetchOptions = {}) {
                const v = await this.fetch(k, fetchOptions);
                if (void 0 === v) throw new Error('fetch() returned undefined');
                return v;
            }
            memo(k, memoOptions = {}) {
                const memoMethod = this.#memoMethod;
                if (!memoMethod) throw new Error('no memoMethod provided to constructor');
                const { context, forceRefresh, ...options } = memoOptions;
                const v = this.get(k, options);
                if (!forceRefresh && void 0 !== v) return v;
                const vv = memoMethod(k, v, {
                    options,
                    context
                });
                this.set(k, vv, options);
                return vv;
            }
            get(k, getOptions = {}) {
                const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
                const index = this.#keyMap.get(k);
                if (void 0 !== index) {
                    const value = this.#valList[index];
                    const fetching = this.#isBackgroundFetch(value);
                    if (status) this.#statusTTL(status, index);
                    if (this.#isStale(index)) {
                        if (status) status.get = 'stale';
                        if (fetching) {
                            if (status && allowStale && void 0 !== value.__staleWhileFetching) status.returnedStale = true;
                            return allowStale ? value.__staleWhileFetching : void 0;
                        }
                        if (!noDeleteOnStaleGet) this.#delete(k, 'expire');
                        if (status && allowStale) status.returnedStale = true;
                        return allowStale ? value : void 0;
                    }
                    if (status) status.get = 'hit';
                    if (fetching) return value.__staleWhileFetching;
                    this.#moveToTail(index);
                    if (updateAgeOnGet) this.#updateItemAge(index);
                    return value;
                }
                if (status) status.get = 'miss';
            }
            #connect(p, n) {
                this.#prev[n] = p;
                this.#next[p] = n;
            }
            #moveToTail(index) {
                if (index !== this.#tail) {
                    if (index === this.#head) this.#head = this.#next[index];
                    else this.#connect(this.#prev[index], this.#next[index]);
                    this.#connect(this.#tail, index);
                    this.#tail = index;
                }
            }
            delete(k) {
                return this.#delete(k, 'delete');
            }
            #delete(k, reason) {
                let deleted = false;
                if (0 !== this.#size) {
                    const index = this.#keyMap.get(k);
                    if (void 0 !== index) {
                        deleted = true;
                        if (1 === this.#size) this.#clear(reason);
                        else {
                            this.#removeItemSize(index);
                            const v = this.#valList[index];
                            if (this.#isBackgroundFetch(v)) v.__abortController.abort(new Error('deleted'));
                            else if (this.#hasDispose || this.#hasDisposeAfter) {
                                if (this.#hasDispose) this.#dispose?.(v, k, reason);
                                if (this.#hasDisposeAfter) this.#disposed?.push([
                                    v,
                                    k,
                                    reason
                                ]);
                            }
                            this.#keyMap.delete(k);
                            this.#keyList[index] = void 0;
                            this.#valList[index] = void 0;
                            if (index === this.#tail) this.#tail = this.#prev[index];
                            else if (index === this.#head) this.#head = this.#next[index];
                            else {
                                const pi = this.#prev[index];
                                this.#next[pi] = this.#next[index];
                                const ni = this.#next[index];
                                this.#prev[ni] = this.#prev[index];
                            }
                            this.#size--;
                            this.#free.push(index);
                        }
                    }
                }
                if (this.#hasDisposeAfter && this.#disposed?.length) {
                    const dt = this.#disposed;
                    let task;
                    while(task = dt?.shift())this.#disposeAfter?.(...task);
                }
                return deleted;
            }
            clear() {
                return this.#clear('delete');
            }
            #clear(reason) {
                for (const index of this.#rindexes({
                    allowStale: true
                })){
                    const v = this.#valList[index];
                    if (this.#isBackgroundFetch(v)) v.__abortController.abort(new Error('deleted'));
                    else {
                        const k = this.#keyList[index];
                        if (this.#hasDispose) this.#dispose?.(v, k, reason);
                        if (this.#hasDisposeAfter) this.#disposed?.push([
                            v,
                            k,
                            reason
                        ]);
                    }
                }
                this.#keyMap.clear();
                this.#valList.fill(void 0);
                this.#keyList.fill(void 0);
                if (this.#ttls && this.#starts) {
                    this.#ttls.fill(0);
                    this.#starts.fill(0);
                }
                if (this.#sizes) this.#sizes.fill(0);
                this.#head = 0;
                this.#tail = 0;
                this.#free.length = 0;
                this.#calculatedSize = 0;
                this.#size = 0;
                if (this.#hasDisposeAfter && this.#disposed) {
                    const dt = this.#disposed;
                    let task;
                    while(task = dt?.shift())this.#disposeAfter?.(...task);
                }
            }
        }
        var external_fs_ = __webpack_require__("fs");
        const promises_namespaceObject = require("node:fs/promises");
        const external_node_events_namespaceObject = require("node:events");
        const external_node_stream_namespaceObject = require("node:stream");
        const external_node_string_decoder_namespaceObject = require("node:string_decoder");
        const proc = 'object' == typeof process && process ? process : {
            stdout: null,
            stderr: null
        };
        const isStream = (s)=>!!s && 'object' == typeof s && (s instanceof Minipass || s instanceof external_node_stream_namespaceObject || isReadable(s) || isWritable(s));
        const isReadable = (s)=>!!s && 'object' == typeof s && s instanceof external_node_events_namespaceObject.EventEmitter && 'function' == typeof s.pipe && s.pipe !== external_node_stream_namespaceObject.Writable.prototype.pipe;
        const isWritable = (s)=>!!s && 'object' == typeof s && s instanceof external_node_events_namespaceObject.EventEmitter && 'function' == typeof s.write && 'function' == typeof s.end;
        const EOF = Symbol('EOF');
        const MAYBE_EMIT_END = Symbol('maybeEmitEnd');
        const EMITTED_END = Symbol('emittedEnd');
        const EMITTING_END = Symbol('emittingEnd');
        const EMITTED_ERROR = Symbol('emittedError');
        const CLOSED = Symbol('closed');
        const READ = Symbol('read');
        const FLUSH = Symbol('flush');
        const FLUSHCHUNK = Symbol('flushChunk');
        const ENCODING = Symbol('encoding');
        const DECODER = Symbol('decoder');
        const FLOWING = Symbol('flowing');
        const PAUSED = Symbol('paused');
        const RESUME = Symbol('resume');
        const BUFFER = Symbol('buffer');
        const PIPES = Symbol('pipes');
        const BUFFERLENGTH = Symbol('bufferLength');
        const BUFFERPUSH = Symbol('bufferPush');
        const BUFFERSHIFT = Symbol('bufferShift');
        const OBJECTMODE = Symbol('objectMode');
        const DESTROYED = Symbol('destroyed');
        const ERROR = Symbol('error');
        const EMITDATA = Symbol('emitData');
        const EMITEND = Symbol('emitEnd');
        const EMITEND2 = Symbol('emitEnd2');
        const ASYNC = Symbol('async');
        const ABORT = Symbol('abort');
        const ABORTED = Symbol('aborted');
        const SIGNAL = Symbol('signal');
        const DATALISTENERS = Symbol('dataListeners');
        const DISCARDED = Symbol('discarded');
        const defer = (fn)=>Promise.resolve().then(fn);
        const nodefer = (fn)=>fn();
        const isEndish = (ev)=>'end' === ev || 'finish' === ev || 'prefinish' === ev;
        const isArrayBufferLike = (b)=>b instanceof ArrayBuffer || !!b && 'object' == typeof b && b.constructor && 'ArrayBuffer' === b.constructor.name && b.byteLength >= 0;
        const isArrayBufferView = (b)=>!Buffer.isBuffer(b) && ArrayBuffer.isView(b);
        class Pipe {
            src;
            dest;
            opts;
            ondrain;
            constructor(src, dest, opts){
                this.src = src;
                this.dest = dest;
                this.opts = opts;
                this.ondrain = ()=>src[RESUME]();
                this.dest.on('drain', this.ondrain);
            }
            unpipe() {
                this.dest.removeListener('drain', this.ondrain);
            }
            proxyErrors(_er) {}
            end() {
                this.unpipe();
                if (this.opts.end) this.dest.end();
            }
        }
        class PipeProxyErrors extends Pipe {
            unpipe() {
                this.src.removeListener('error', this.proxyErrors);
                super.unpipe();
            }
            constructor(src, dest, opts){
                super(src, dest, opts);
                this.proxyErrors = (er)=>dest.emit('error', er);
                src.on('error', this.proxyErrors);
            }
        }
        const isObjectModeOptions = (o)=>!!o.objectMode;
        const isEncodingOptions = (o)=>!o.objectMode && !!o.encoding && 'buffer' !== o.encoding;
        class Minipass extends external_node_events_namespaceObject.EventEmitter {
            [FLOWING] = false;
            [PAUSED] = false;
            [PIPES] = [];
            [BUFFER] = [];
            [OBJECTMODE];
            [ENCODING];
            [ASYNC];
            [DECODER];
            [EOF] = false;
            [EMITTED_END] = false;
            [EMITTING_END] = false;
            [CLOSED] = false;
            [EMITTED_ERROR] = null;
            [BUFFERLENGTH] = 0;
            [DESTROYED] = false;
            [SIGNAL];
            [ABORTED] = false;
            [DATALISTENERS] = 0;
            [DISCARDED] = false;
            writable = true;
            readable = true;
            constructor(...args){
                const options = args[0] || {};
                super();
                if (options.objectMode && 'string' == typeof options.encoding) throw new TypeError('Encoding and objectMode may not be used together');
                if (isObjectModeOptions(options)) {
                    this[OBJECTMODE] = true;
                    this[ENCODING] = null;
                } else if (isEncodingOptions(options)) {
                    this[ENCODING] = options.encoding;
                    this[OBJECTMODE] = false;
                } else {
                    this[OBJECTMODE] = false;
                    this[ENCODING] = null;
                }
                this[ASYNC] = !!options.async;
                this[DECODER] = this[ENCODING] ? new external_node_string_decoder_namespaceObject.StringDecoder(this[ENCODING]) : null;
                if (options && true === options.debugExposeBuffer) Object.defineProperty(this, 'buffer', {
                    get: ()=>this[BUFFER]
                });
                if (options && true === options.debugExposePipes) Object.defineProperty(this, 'pipes', {
                    get: ()=>this[PIPES]
                });
                const { signal } = options;
                if (signal) {
                    this[SIGNAL] = signal;
                    if (signal.aborted) this[ABORT]();
                    else signal.addEventListener('abort', ()=>this[ABORT]());
                }
            }
            get bufferLength() {
                return this[BUFFERLENGTH];
            }
            get encoding() {
                return this[ENCODING];
            }
            set encoding(_enc) {
                throw new Error('Encoding must be set at instantiation time');
            }
            setEncoding(_enc) {
                throw new Error('Encoding must be set at instantiation time');
            }
            get objectMode() {
                return this[OBJECTMODE];
            }
            set objectMode(_om) {
                throw new Error('objectMode must be set at instantiation time');
            }
            get ['async']() {
                return this[ASYNC];
            }
            set ['async'](a) {
                this[ASYNC] = this[ASYNC] || !!a;
            }
            [ABORT]() {
                this[ABORTED] = true;
                this.emit('abort', this[SIGNAL]?.reason);
                this.destroy(this[SIGNAL]?.reason);
            }
            get aborted() {
                return this[ABORTED];
            }
            set aborted(_) {}
            write(chunk, encoding, cb) {
                if (this[ABORTED]) return false;
                if (this[EOF]) throw new Error('write after end');
                if (this[DESTROYED]) {
                    this.emit('error', Object.assign(new Error('Cannot call write after a stream was destroyed'), {
                        code: 'ERR_STREAM_DESTROYED'
                    }));
                    return true;
                }
                if ('function' == typeof encoding) {
                    cb = encoding;
                    encoding = 'utf8';
                }
                if (!encoding) encoding = 'utf8';
                const fn = this[ASYNC] ? defer : nodefer;
                if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
                    if (isArrayBufferView(chunk)) chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
                    else if (isArrayBufferLike(chunk)) chunk = Buffer.from(chunk);
                    else if ('string' != typeof chunk) throw new Error('Non-contiguous data written to non-objectMode stream');
                }
                if (this[OBJECTMODE]) {
                    if (this[FLOWING] && 0 !== this[BUFFERLENGTH]) this[FLUSH](true);
                    if (this[FLOWING]) this.emit('data', chunk);
                    else this[BUFFERPUSH](chunk);
                    if (0 !== this[BUFFERLENGTH]) this.emit('readable');
                    if (cb) fn(cb);
                    return this[FLOWING];
                }
                if (!chunk.length) {
                    if (0 !== this[BUFFERLENGTH]) this.emit('readable');
                    if (cb) fn(cb);
                    return this[FLOWING];
                }
                if ('string' == typeof chunk && !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)) chunk = Buffer.from(chunk, encoding);
                if (Buffer.isBuffer(chunk) && this[ENCODING]) chunk = this[DECODER].write(chunk);
                if (this[FLOWING] && 0 !== this[BUFFERLENGTH]) this[FLUSH](true);
                if (this[FLOWING]) this.emit('data', chunk);
                else this[BUFFERPUSH](chunk);
                if (0 !== this[BUFFERLENGTH]) this.emit('readable');
                if (cb) fn(cb);
                return this[FLOWING];
            }
            read(n) {
                if (this[DESTROYED]) return null;
                this[DISCARDED] = false;
                if (0 === this[BUFFERLENGTH] || 0 === n || n && n > this[BUFFERLENGTH]) {
                    this[MAYBE_EMIT_END]();
                    return null;
                }
                if (this[OBJECTMODE]) n = null;
                if (this[BUFFER].length > 1 && !this[OBJECTMODE]) this[BUFFER] = [
                    this[ENCODING] ? this[BUFFER].join('') : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
                ];
                const ret = this[READ](n || null, this[BUFFER][0]);
                this[MAYBE_EMIT_END]();
                return ret;
            }
            [READ](n, chunk) {
                if (this[OBJECTMODE]) this[BUFFERSHIFT]();
                else {
                    const c = chunk;
                    if (n === c.length || null === n) this[BUFFERSHIFT]();
                    else if ('string' == typeof c) {
                        this[BUFFER][0] = c.slice(n);
                        chunk = c.slice(0, n);
                        this[BUFFERLENGTH] -= n;
                    } else {
                        this[BUFFER][0] = c.subarray(n);
                        chunk = c.subarray(0, n);
                        this[BUFFERLENGTH] -= n;
                    }
                }
                this.emit('data', chunk);
                if (!this[BUFFER].length && !this[EOF]) this.emit('drain');
                return chunk;
            }
            end(chunk, encoding, cb) {
                if ('function' == typeof chunk) {
                    cb = chunk;
                    chunk = void 0;
                }
                if ('function' == typeof encoding) {
                    cb = encoding;
                    encoding = 'utf8';
                }
                if (void 0 !== chunk) this.write(chunk, encoding);
                if (cb) this.once('end', cb);
                this[EOF] = true;
                this.writable = false;
                if (this[FLOWING] || !this[PAUSED]) this[MAYBE_EMIT_END]();
                return this;
            }
            [RESUME]() {
                if (this[DESTROYED]) return;
                if (!this[DATALISTENERS] && !this[PIPES].length) this[DISCARDED] = true;
                this[PAUSED] = false;
                this[FLOWING] = true;
                this.emit('resume');
                if (this[BUFFER].length) this[FLUSH]();
                else if (this[EOF]) this[MAYBE_EMIT_END]();
                else this.emit('drain');
            }
            resume() {
                return this[RESUME]();
            }
            pause() {
                this[FLOWING] = false;
                this[PAUSED] = true;
                this[DISCARDED] = false;
            }
            get destroyed() {
                return this[DESTROYED];
            }
            get flowing() {
                return this[FLOWING];
            }
            get paused() {
                return this[PAUSED];
            }
            [BUFFERPUSH](chunk) {
                if (this[OBJECTMODE]) this[BUFFERLENGTH] += 1;
                else this[BUFFERLENGTH] += chunk.length;
                this[BUFFER].push(chunk);
            }
            [BUFFERSHIFT]() {
                if (this[OBJECTMODE]) this[BUFFERLENGTH] -= 1;
                else this[BUFFERLENGTH] -= this[BUFFER][0].length;
                return this[BUFFER].shift();
            }
            [FLUSH](noDrain = false) {
                do ;
                while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);
                if (!noDrain && !this[BUFFER].length && !this[EOF]) this.emit('drain');
            }
            [FLUSHCHUNK](chunk) {
                this.emit('data', chunk);
                return this[FLOWING];
            }
            pipe(dest, opts) {
                if (this[DESTROYED]) return dest;
                this[DISCARDED] = false;
                const ended = this[EMITTED_END];
                opts = opts || {};
                if (dest === proc.stdout || dest === proc.stderr) opts.end = false;
                else opts.end = false !== opts.end;
                opts.proxyErrors = !!opts.proxyErrors;
                if (ended) {
                    if (opts.end) dest.end();
                } else {
                    this[PIPES].push(opts.proxyErrors ? new PipeProxyErrors(this, dest, opts) : new Pipe(this, dest, opts));
                    if (this[ASYNC]) defer(()=>this[RESUME]());
                    else this[RESUME]();
                }
                return dest;
            }
            unpipe(dest) {
                const p = this[PIPES].find((p)=>p.dest === dest);
                if (p) {
                    if (1 === this[PIPES].length) {
                        if (this[FLOWING] && 0 === this[DATALISTENERS]) this[FLOWING] = false;
                        this[PIPES] = [];
                    } else this[PIPES].splice(this[PIPES].indexOf(p), 1);
                    p.unpipe();
                }
            }
            addListener(ev, handler) {
                return this.on(ev, handler);
            }
            on(ev, handler) {
                const ret = super.on(ev, handler);
                if ('data' === ev) {
                    this[DISCARDED] = false;
                    this[DATALISTENERS]++;
                    if (!this[PIPES].length && !this[FLOWING]) this[RESUME]();
                } else if ('readable' === ev && 0 !== this[BUFFERLENGTH]) super.emit('readable');
                else if (isEndish(ev) && this[EMITTED_END]) {
                    super.emit(ev);
                    this.removeAllListeners(ev);
                } else if ('error' === ev && this[EMITTED_ERROR]) {
                    const h = handler;
                    if (this[ASYNC]) defer(()=>h.call(this, this[EMITTED_ERROR]));
                    else h.call(this, this[EMITTED_ERROR]);
                }
                return ret;
            }
            removeListener(ev, handler) {
                return this.off(ev, handler);
            }
            off(ev, handler) {
                const ret = super.off(ev, handler);
                if ('data' === ev) {
                    this[DATALISTENERS] = this.listeners('data').length;
                    if (0 === this[DATALISTENERS] && !this[DISCARDED] && !this[PIPES].length) this[FLOWING] = false;
                }
                return ret;
            }
            removeAllListeners(ev) {
                const ret = super.removeAllListeners(ev);
                if ('data' === ev || void 0 === ev) {
                    this[DATALISTENERS] = 0;
                    if (!this[DISCARDED] && !this[PIPES].length) this[FLOWING] = false;
                }
                return ret;
            }
            get emittedEnd() {
                return this[EMITTED_END];
            }
            [MAYBE_EMIT_END]() {
                if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && 0 === this[BUFFER].length && this[EOF]) {
                    this[EMITTING_END] = true;
                    this.emit('end');
                    this.emit('prefinish');
                    this.emit('finish');
                    if (this[CLOSED]) this.emit('close');
                    this[EMITTING_END] = false;
                }
            }
            emit(ev, ...args) {
                const data = args[0];
                if ('error' !== ev && 'close' !== ev && ev !== DESTROYED && this[DESTROYED]) return false;
                if ('data' === ev) return this[OBJECTMODE] || data ? this[ASYNC] ? (defer(()=>this[EMITDATA](data)), true) : this[EMITDATA](data) : false;
                if ('end' === ev) return this[EMITEND]();
                if ('close' === ev) {
                    this[CLOSED] = true;
                    if (!this[EMITTED_END] && !this[DESTROYED]) return false;
                    const ret = super.emit('close');
                    this.removeAllListeners('close');
                    return ret;
                }
                if ('error' === ev) {
                    this[EMITTED_ERROR] = data;
                    super.emit(ERROR, data);
                    const ret = !this[SIGNAL] || this.listeners('error').length ? super.emit('error', data) : false;
                    this[MAYBE_EMIT_END]();
                    return ret;
                } else if ('resume' === ev) {
                    const ret = super.emit('resume');
                    this[MAYBE_EMIT_END]();
                    return ret;
                } else if ('finish' === ev || 'prefinish' === ev) {
                    const ret = super.emit(ev);
                    this.removeAllListeners(ev);
                    return ret;
                }
                const ret = super.emit(ev, ...args);
                this[MAYBE_EMIT_END]();
                return ret;
            }
            [EMITDATA](data) {
                for (const p of this[PIPES])if (false === p.dest.write(data)) this.pause();
                const ret = this[DISCARDED] ? false : super.emit('data', data);
                this[MAYBE_EMIT_END]();
                return ret;
            }
            [EMITEND]() {
                if (this[EMITTED_END]) return false;
                this[EMITTED_END] = true;
                this.readable = false;
                return this[ASYNC] ? (defer(()=>this[EMITEND2]()), true) : this[EMITEND2]();
            }
            [EMITEND2]() {
                if (this[DECODER]) {
                    const data = this[DECODER].end();
                    if (data) {
                        for (const p of this[PIPES])p.dest.write(data);
                        if (!this[DISCARDED]) super.emit('data', data);
                    }
                }
                for (const p of this[PIPES])p.end();
                const ret = super.emit('end');
                this.removeAllListeners('end');
                return ret;
            }
            async collect() {
                const buf = Object.assign([], {
                    dataLength: 0
                });
                if (!this[OBJECTMODE]) buf.dataLength = 0;
                const p = this.promise();
                this.on('data', (c)=>{
                    buf.push(c);
                    if (!this[OBJECTMODE]) buf.dataLength += c.length;
                });
                await p;
                return buf;
            }
            async concat() {
                if (this[OBJECTMODE]) throw new Error('cannot concat in objectMode');
                const buf = await this.collect();
                return this[ENCODING] ? buf.join('') : Buffer.concat(buf, buf.dataLength);
            }
            async promise() {
                return new Promise((resolve, reject)=>{
                    this.on(DESTROYED, ()=>reject(new Error('stream destroyed')));
                    this.on('error', (er)=>reject(er));
                    this.on('end', ()=>resolve());
                });
            }
            [Symbol.asyncIterator]() {
                this[DISCARDED] = false;
                let stopped = false;
                const stop = async ()=>{
                    this.pause();
                    stopped = true;
                    return {
                        value: void 0,
                        done: true
                    };
                };
                const next = ()=>{
                    if (stopped) return stop();
                    const res = this.read();
                    if (null !== res) return Promise.resolve({
                        done: false,
                        value: res
                    });
                    if (this[EOF]) return stop();
                    let resolve;
                    let reject;
                    const onerr = (er)=>{
                        this.off('data', ondata);
                        this.off('end', onend);
                        this.off(DESTROYED, ondestroy);
                        stop();
                        reject(er);
                    };
                    const ondata = (value)=>{
                        this.off('error', onerr);
                        this.off('end', onend);
                        this.off(DESTROYED, ondestroy);
                        this.pause();
                        resolve({
                            value,
                            done: !!this[EOF]
                        });
                    };
                    const onend = ()=>{
                        this.off('error', onerr);
                        this.off('data', ondata);
                        this.off(DESTROYED, ondestroy);
                        stop();
                        resolve({
                            done: true,
                            value: void 0
                        });
                    };
                    const ondestroy = ()=>onerr(new Error('stream destroyed'));
                    return new Promise((res, rej)=>{
                        reject = rej;
                        resolve = res;
                        this.once(DESTROYED, ondestroy);
                        this.once('error', onerr);
                        this.once('end', onend);
                        this.once('data', ondata);
                    });
                };
                return {
                    next,
                    throw: stop,
                    return: stop,
                    [Symbol.asyncIterator] () {
                        return this;
                    }
                };
            }
            [Symbol.iterator]() {
                this[DISCARDED] = false;
                let stopped = false;
                const stop = ()=>{
                    this.pause();
                    this.off(ERROR, stop);
                    this.off(DESTROYED, stop);
                    this.off('end', stop);
                    stopped = true;
                    return {
                        done: true,
                        value: void 0
                    };
                };
                const next = ()=>{
                    if (stopped) return stop();
                    const value = this.read();
                    return null === value ? stop() : {
                        done: false,
                        value
                    };
                };
                this.once('end', stop);
                this.once(ERROR, stop);
                this.once(DESTROYED, stop);
                return {
                    next,
                    throw: stop,
                    return: stop,
                    [Symbol.iterator] () {
                        return this;
                    }
                };
            }
            destroy(er) {
                if (this[DESTROYED]) {
                    if (er) this.emit('error', er);
                    else this.emit(DESTROYED);
                    return this;
                }
                this[DESTROYED] = true;
                this[DISCARDED] = true;
                this[BUFFER].length = 0;
                this[BUFFERLENGTH] = 0;
                const wc = this;
                if ('function' == typeof wc.close && !this[CLOSED]) wc.close();
                if (er) this.emit('error', er);
                else this.emit(DESTROYED);
                return this;
            }
            static get isStream() {
                return isStream;
            }
        }
        const realpathSync = external_fs_.realpathSync.native;
        const defaultFS = {
            lstatSync: external_fs_.lstatSync,
            readdir: external_fs_.readdir,
            readdirSync: external_fs_.readdirSync,
            readlinkSync: external_fs_.readlinkSync,
            realpathSync,
            promises: {
                lstat: promises_namespaceObject.lstat,
                readdir: promises_namespaceObject.readdir,
                readlink: promises_namespaceObject.readlink,
                realpath: promises_namespaceObject.realpath
            }
        };
        const fsFromOption = (fsOption)=>fsOption && fsOption !== defaultFS && fsOption !== external_node_fs_namespaceObject_0 ? {
                ...defaultFS,
                ...fsOption,
                promises: {
                    ...defaultFS.promises,
                    ...fsOption.promises || {}
                }
            } : defaultFS;
        const uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i;
        const uncToDrive = (rootPath)=>rootPath.replace(/\//g, '\\').replace(uncDriveRegexp, '$1\\');
        const eitherSep = /[\\\/]/;
        const UNKNOWN = 0;
        const IFIFO = 1;
        const IFCHR = 2;
        const IFDIR = 4;
        const IFBLK = 6;
        const IFREG = 8;
        const IFLNK = 10;
        const IFSOCK = 12;
        const IFMT = 15;
        const IFMT_UNKNOWN = ~IFMT;
        const READDIR_CALLED = 16;
        const LSTAT_CALLED = 32;
        const ENOTDIR = 64;
        const ENOENT = 128;
        const ENOREADLINK = 256;
        const ENOREALPATH = 512;
        const ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH;
        const TYPEMASK = 1023;
        const entToType = (s)=>s.isFile() ? IFREG : s.isDirectory() ? IFDIR : s.isSymbolicLink() ? IFLNK : s.isCharacterDevice() ? IFCHR : s.isBlockDevice() ? IFBLK : s.isSocket() ? IFSOCK : s.isFIFO() ? IFIFO : UNKNOWN;
        const normalizeCache = new Map();
        const normalize = (s)=>{
            const c = normalizeCache.get(s);
            if (c) return c;
            const n = s.normalize('NFKD');
            normalizeCache.set(s, n);
            return n;
        };
        const normalizeNocaseCache = new Map();
        const normalizeNocase = (s)=>{
            const c = normalizeNocaseCache.get(s);
            if (c) return c;
            const n = normalize(s.toLowerCase());
            normalizeNocaseCache.set(s, n);
            return n;
        };
        class ResolveCache extends LRUCache {
            constructor(){
                super({
                    max: 256
                });
            }
        }
        class ChildrenCache extends LRUCache {
            constructor(maxSize = 16384){
                super({
                    maxSize,
                    sizeCalculation: (a)=>a.length + 1
                });
            }
        }
        const setAsCwd = Symbol('PathScurry setAsCwd');
        class PathBase {
            name;
            root;
            roots;
            parent;
            nocase;
            isCWD = false;
            #fs;
            #dev;
            get dev() {
                return this.#dev;
            }
            #mode;
            get mode() {
                return this.#mode;
            }
            #nlink;
            get nlink() {
                return this.#nlink;
            }
            #uid;
            get uid() {
                return this.#uid;
            }
            #gid;
            get gid() {
                return this.#gid;
            }
            #rdev;
            get rdev() {
                return this.#rdev;
            }
            #blksize;
            get blksize() {
                return this.#blksize;
            }
            #ino;
            get ino() {
                return this.#ino;
            }
            #size;
            get size() {
                return this.#size;
            }
            #blocks;
            get blocks() {
                return this.#blocks;
            }
            #atimeMs;
            get atimeMs() {
                return this.#atimeMs;
            }
            #mtimeMs;
            get mtimeMs() {
                return this.#mtimeMs;
            }
            #ctimeMs;
            get ctimeMs() {
                return this.#ctimeMs;
            }
            #birthtimeMs;
            get birthtimeMs() {
                return this.#birthtimeMs;
            }
            #atime;
            get atime() {
                return this.#atime;
            }
            #mtime;
            get mtime() {
                return this.#mtime;
            }
            #ctime;
            get ctime() {
                return this.#ctime;
            }
            #birthtime;
            get birthtime() {
                return this.#birthtime;
            }
            #matchName;
            #depth;
            #fullpath;
            #fullpathPosix;
            #relative;
            #relativePosix;
            #type;
            #children;
            #linkTarget;
            #realpath;
            get parentPath() {
                return (this.parent || this).fullpath();
            }
            get path() {
                return this.parentPath;
            }
            constructor(name, type = UNKNOWN, root, roots, nocase, children, opts){
                this.name = name;
                this.#matchName = nocase ? normalizeNocase(name) : normalize(name);
                this.#type = type & TYPEMASK;
                this.nocase = nocase;
                this.roots = roots;
                this.root = root || this;
                this.#children = children;
                this.#fullpath = opts.fullpath;
                this.#relative = opts.relative;
                this.#relativePosix = opts.relativePosix;
                this.parent = opts.parent;
                if (this.parent) this.#fs = this.parent.#fs;
                else this.#fs = fsFromOption(opts.fs);
            }
            depth() {
                if (void 0 !== this.#depth) return this.#depth;
                if (!this.parent) return this.#depth = 0;
                return this.#depth = this.parent.depth() + 1;
            }
            childrenCache() {
                return this.#children;
            }
            resolve(path) {
                if (!path) return this;
                const rootPath = this.getRootString(path);
                const dir = path.substring(rootPath.length);
                const dirParts = dir.split(this.splitSep);
                const result = rootPath ? this.getRoot(rootPath).#resolveParts(dirParts) : this.#resolveParts(dirParts);
                return result;
            }
            #resolveParts(dirParts) {
                let p = this;
                for (const part of dirParts)p = p.child(part);
                return p;
            }
            children() {
                const cached = this.#children.get(this);
                if (cached) return cached;
                const children = Object.assign([], {
                    provisional: 0
                });
                this.#children.set(this, children);
                this.#type &= ~READDIR_CALLED;
                return children;
            }
            child(pathPart, opts) {
                if ('' === pathPart || '.' === pathPart) return this;
                if ('..' === pathPart) return this.parent || this;
                const children = this.children();
                const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart);
                for (const p of children)if (p.#matchName === name) return p;
                const s = this.parent ? this.sep : '';
                const fullpath = this.#fullpath ? this.#fullpath + s + pathPart : void 0;
                const pchild = this.newChild(pathPart, UNKNOWN, {
                    ...opts,
                    parent: this,
                    fullpath
                });
                if (!this.canReaddir()) pchild.#type |= ENOENT;
                children.push(pchild);
                return pchild;
            }
            relative() {
                if (this.isCWD) return '';
                if (void 0 !== this.#relative) return this.#relative;
                const name = this.name;
                const p = this.parent;
                if (!p) return this.#relative = this.name;
                const pv = p.relative();
                return pv + (pv && p.parent ? this.sep : '') + name;
            }
            relativePosix() {
                if ('/' === this.sep) return this.relative();
                if (this.isCWD) return '';
                if (void 0 !== this.#relativePosix) return this.#relativePosix;
                const name = this.name;
                const p = this.parent;
                if (!p) return this.#relativePosix = this.fullpathPosix();
                const pv = p.relativePosix();
                return pv + (pv && p.parent ? '/' : '') + name;
            }
            fullpath() {
                if (void 0 !== this.#fullpath) return this.#fullpath;
                const name = this.name;
                const p = this.parent;
                if (!p) return this.#fullpath = this.name;
                const pv = p.fullpath();
                const fp = pv + (p.parent ? this.sep : '') + name;
                return this.#fullpath = fp;
            }
            fullpathPosix() {
                if (void 0 !== this.#fullpathPosix) return this.#fullpathPosix;
                if ('/' === this.sep) return this.#fullpathPosix = this.fullpath();
                if (!this.parent) {
                    const p = this.fullpath().replace(/\\/g, '/');
                    if (/^[a-z]:\//i.test(p)) return this.#fullpathPosix = `//?/${p}`;
                    return this.#fullpathPosix = p;
                }
                const p = this.parent;
                const pfpp = p.fullpathPosix();
                const fpp = pfpp + (pfpp && p.parent ? '/' : '') + this.name;
                return this.#fullpathPosix = fpp;
            }
            isUnknown() {
                return (this.#type & IFMT) === UNKNOWN;
            }
            isType(type) {
                return this[`is${type}`]();
            }
            getType() {
                return this.isUnknown() ? 'Unknown' : this.isDirectory() ? 'Directory' : this.isFile() ? 'File' : this.isSymbolicLink() ? 'SymbolicLink' : this.isFIFO() ? 'FIFO' : this.isCharacterDevice() ? 'CharacterDevice' : this.isBlockDevice() ? 'BlockDevice' : this.isSocket() ? 'Socket' : 'Unknown';
            }
            isFile() {
                return (this.#type & IFMT) === IFREG;
            }
            isDirectory() {
                return (this.#type & IFMT) === IFDIR;
            }
            isCharacterDevice() {
                return (this.#type & IFMT) === IFCHR;
            }
            isBlockDevice() {
                return (this.#type & IFMT) === IFBLK;
            }
            isFIFO() {
                return (this.#type & IFMT) === IFIFO;
            }
            isSocket() {
                return (this.#type & IFMT) === IFSOCK;
            }
            isSymbolicLink() {
                return (this.#type & IFLNK) === IFLNK;
            }
            lstatCached() {
                return this.#type & LSTAT_CALLED ? this : void 0;
            }
            readlinkCached() {
                return this.#linkTarget;
            }
            realpathCached() {
                return this.#realpath;
            }
            readdirCached() {
                const children = this.children();
                return children.slice(0, children.provisional);
            }
            canReadlink() {
                if (this.#linkTarget) return true;
                if (!this.parent) return false;
                const ifmt = this.#type & IFMT;
                return !(ifmt !== UNKNOWN && ifmt !== IFLNK || this.#type & ENOREADLINK || this.#type & ENOENT);
            }
            calledReaddir() {
                return !!(this.#type & READDIR_CALLED);
            }
            isENOENT() {
                return !!(this.#type & ENOENT);
            }
            isNamed(n) {
                return this.nocase ? this.#matchName === normalizeNocase(n) : this.#matchName === normalize(n);
            }
            async readlink() {
                const target = this.#linkTarget;
                if (target) return target;
                if (!this.canReadlink()) return;
                if (!this.parent) return;
                try {
                    const read = await this.#fs.promises.readlink(this.fullpath());
                    const linkTarget = (await this.parent.realpath())?.resolve(read);
                    if (linkTarget) return this.#linkTarget = linkTarget;
                } catch (er) {
                    this.#readlinkFail(er.code);
                    return;
                }
            }
            readlinkSync() {
                const target = this.#linkTarget;
                if (target) return target;
                if (!this.canReadlink()) return;
                if (!this.parent) return;
                try {
                    const read = this.#fs.readlinkSync(this.fullpath());
                    const linkTarget = this.parent.realpathSync()?.resolve(read);
                    if (linkTarget) return this.#linkTarget = linkTarget;
                } catch (er) {
                    this.#readlinkFail(er.code);
                    return;
                }
            }
            #readdirSuccess(children) {
                this.#type |= READDIR_CALLED;
                for(let p = children.provisional; p < children.length; p++){
                    const c = children[p];
                    if (c) c.#markENOENT();
                }
            }
            #markENOENT() {
                if (this.#type & ENOENT) return;
                this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN;
                this.#markChildrenENOENT();
            }
            #markChildrenENOENT() {
                const children = this.children();
                children.provisional = 0;
                for (const p of children)p.#markENOENT();
            }
            #markENOREALPATH() {
                this.#type |= ENOREALPATH;
                this.#markENOTDIR();
            }
            #markENOTDIR() {
                if (this.#type & ENOTDIR) return;
                let t1 = this.#type;
                if ((t1 & IFMT) === IFDIR) t1 &= IFMT_UNKNOWN;
                this.#type = t1 | ENOTDIR;
                this.#markChildrenENOENT();
            }
            #readdirFail(code = '') {
                if ('ENOTDIR' === code || 'EPERM' === code) this.#markENOTDIR();
                else if ('ENOENT' === code) this.#markENOENT();
                else this.children().provisional = 0;
            }
            #lstatFail(code = '') {
                if ('ENOTDIR' === code) {
                    const p = this.parent;
                    p.#markENOTDIR();
                } else if ('ENOENT' === code) this.#markENOENT();
            }
            #readlinkFail(code = '') {
                let ter = this.#type;
                ter |= ENOREADLINK;
                if ('ENOENT' === code) ter |= ENOENT;
                if ('EINVAL' === code || 'UNKNOWN' === code) ter &= IFMT_UNKNOWN;
                this.#type = ter;
                if ('ENOTDIR' === code && this.parent) this.parent.#markENOTDIR();
            }
            #readdirAddChild(e1, c) {
                return this.#readdirMaybePromoteChild(e1, c) || this.#readdirAddNewChild(e1, c);
            }
            #readdirAddNewChild(e1, c) {
                const type = entToType(e1);
                const child = this.newChild(e1.name, type, {
                    parent: this
                });
                const ifmt = child.#type & IFMT;
                if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) child.#type |= ENOTDIR;
                c.unshift(child);
                c.provisional++;
                return child;
            }
            #readdirMaybePromoteChild(e1, c) {
                for(let p = c.provisional; p < c.length; p++){
                    const pchild = c[p];
                    const name = this.nocase ? normalizeNocase(e1.name) : normalize(e1.name);
                    if (name === pchild.#matchName) return this.#readdirPromoteChild(e1, pchild, p, c);
                }
            }
            #readdirPromoteChild(e1, p, index, c) {
                const v = p.name;
                p.#type = p.#type & IFMT_UNKNOWN | entToType(e1);
                if (v !== e1.name) p.name = e1.name;
                if (index !== c.provisional) {
                    if (index === c.length - 1) c.pop();
                    else c.splice(index, 1);
                    c.unshift(p);
                }
                c.provisional++;
                return p;
            }
            async lstat() {
                if ((this.#type & ENOENT) === 0) try {
                    this.#applyStat(await this.#fs.promises.lstat(this.fullpath()));
                    return this;
                } catch (er) {
                    this.#lstatFail(er.code);
                }
            }
            lstatSync() {
                if ((this.#type & ENOENT) === 0) try {
                    this.#applyStat(this.#fs.lstatSync(this.fullpath()));
                    return this;
                } catch (er) {
                    this.#lstatFail(er.code);
                }
            }
            #applyStat(st) {
                const { atime, atimeMs, birthtime, birthtimeMs, blksize, blocks, ctime, ctimeMs, dev, gid, ino, mode, mtime, mtimeMs, nlink, rdev, size, uid } = st;
                this.#atime = atime;
                this.#atimeMs = atimeMs;
                this.#birthtime = birthtime;
                this.#birthtimeMs = birthtimeMs;
                this.#blksize = blksize;
                this.#blocks = blocks;
                this.#ctime = ctime;
                this.#ctimeMs = ctimeMs;
                this.#dev = dev;
                this.#gid = gid;
                this.#ino = ino;
                this.#mode = mode;
                this.#mtime = mtime;
                this.#mtimeMs = mtimeMs;
                this.#nlink = nlink;
                this.#rdev = rdev;
                this.#size = size;
                this.#uid = uid;
                const ifmt = entToType(st);
                this.#type = this.#type & IFMT_UNKNOWN | ifmt | LSTAT_CALLED;
                if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) this.#type |= ENOTDIR;
            }
            #onReaddirCB = [];
            #readdirCBInFlight = false;
            #callOnReaddirCB(children) {
                this.#readdirCBInFlight = false;
                const cbs = this.#onReaddirCB.slice();
                this.#onReaddirCB.length = 0;
                cbs.forEach((cb)=>cb(null, children));
            }
            readdirCB(cb, allowZalgo = false) {
                if (!this.canReaddir()) {
                    if (allowZalgo) cb(null, []);
                    else queueMicrotask(()=>cb(null, []));
                    return;
                }
                const children = this.children();
                if (this.calledReaddir()) {
                    const c = children.slice(0, children.provisional);
                    if (allowZalgo) cb(null, c);
                    else queueMicrotask(()=>cb(null, c));
                    return;
                }
                this.#onReaddirCB.push(cb);
                if (this.#readdirCBInFlight) return;
                this.#readdirCBInFlight = true;
                const fullpath = this.fullpath();
                this.#fs.readdir(fullpath, {
                    withFileTypes: true
                }, (er, entries)=>{
                    if (er) {
                        this.#readdirFail(er.code);
                        children.provisional = 0;
                    } else {
                        for (const e1 of entries)this.#readdirAddChild(e1, children);
                        this.#readdirSuccess(children);
                    }
                    this.#callOnReaddirCB(children.slice(0, children.provisional));
                });
            }
            #asyncReaddirInFlight;
            async readdir() {
                if (!this.canReaddir()) return [];
                const children = this.children();
                if (this.calledReaddir()) return children.slice(0, children.provisional);
                const fullpath = this.fullpath();
                if (this.#asyncReaddirInFlight) await this.#asyncReaddirInFlight;
                else {
                    let resolve = ()=>{};
                    this.#asyncReaddirInFlight = new Promise((res)=>resolve = res);
                    try {
                        for (const e1 of (await this.#fs.promises.readdir(fullpath, {
                            withFileTypes: true
                        })))this.#readdirAddChild(e1, children);
                        this.#readdirSuccess(children);
                    } catch (er) {
                        this.#readdirFail(er.code);
                        children.provisional = 0;
                    }
                    this.#asyncReaddirInFlight = void 0;
                    resolve();
                }
                return children.slice(0, children.provisional);
            }
            readdirSync() {
                if (!this.canReaddir()) return [];
                const children = this.children();
                if (this.calledReaddir()) return children.slice(0, children.provisional);
                const fullpath = this.fullpath();
                try {
                    for (const e1 of this.#fs.readdirSync(fullpath, {
                        withFileTypes: true
                    }))this.#readdirAddChild(e1, children);
                    this.#readdirSuccess(children);
                } catch (er) {
                    this.#readdirFail(er.code);
                    children.provisional = 0;
                }
                return children.slice(0, children.provisional);
            }
            canReaddir() {
                if (this.#type & ENOCHILD) return false;
                const ifmt = IFMT & this.#type;
                if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) return false;
                return true;
            }
            shouldWalk(dirs, walkFilter) {
                return (this.#type & IFDIR) === IFDIR && !(this.#type & ENOCHILD) && !dirs.has(this) && (!walkFilter || walkFilter(this));
            }
            async realpath() {
                if (this.#realpath) return this.#realpath;
                if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) return;
                try {
                    const rp = await this.#fs.promises.realpath(this.fullpath());
                    return this.#realpath = this.resolve(rp);
                } catch (_) {
                    this.#markENOREALPATH();
                }
            }
            realpathSync() {
                if (this.#realpath) return this.#realpath;
                if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type) return;
                try {
                    const rp = this.#fs.realpathSync(this.fullpath());
                    return this.#realpath = this.resolve(rp);
                } catch (_) {
                    this.#markENOREALPATH();
                }
            }
            [setAsCwd](oldCwd) {
                if (oldCwd === this) return;
                oldCwd.isCWD = false;
                this.isCWD = true;
                const changed = new Set([]);
                let rp = [];
                let p = this;
                while(p && p.parent){
                    changed.add(p);
                    p.#relative = rp.join(this.sep);
                    p.#relativePosix = rp.join('/');
                    p = p.parent;
                    rp.push('..');
                }
                p = oldCwd;
                while(p && p.parent && !changed.has(p)){
                    p.#relative = void 0;
                    p.#relativePosix = void 0;
                    p = p.parent;
                }
            }
        }
        class PathWin32 extends PathBase {
            sep = '\\';
            splitSep = eitherSep;
            constructor(name, type = UNKNOWN, root, roots, nocase, children, opts){
                super(name, type, root, roots, nocase, children, opts);
            }
            newChild(name, type = UNKNOWN, opts = {}) {
                return new PathWin32(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
            }
            getRootString(path) {
                return external_node_path_namespaceObject.win32.parse(path).root;
            }
            getRoot(rootPath) {
                rootPath = uncToDrive(rootPath.toUpperCase());
                if (rootPath === this.root.name) return this.root;
                for (const [compare, root] of Object.entries(this.roots))if (this.sameRoot(rootPath, compare)) return this.roots[rootPath] = root;
                return this.roots[rootPath] = new PathScurryWin32(rootPath, this).root;
            }
            sameRoot(rootPath, compare = this.root.name) {
                rootPath = rootPath.toUpperCase().replace(/\//g, '\\').replace(uncDriveRegexp, '$1\\');
                return rootPath === compare;
            }
        }
        class PathPosix extends PathBase {
            splitSep = '/';
            sep = '/';
            constructor(name, type = UNKNOWN, root, roots, nocase, children, opts){
                super(name, type, root, roots, nocase, children, opts);
            }
            getRootString(path) {
                return path.startsWith('/') ? '/' : '';
            }
            getRoot(_rootPath) {
                return this.root;
            }
            newChild(name, type = UNKNOWN, opts = {}) {
                return new PathPosix(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
            }
        }
        class PathScurryBase {
            root;
            rootPath;
            roots;
            cwd;
            #resolveCache;
            #resolvePosixCache;
            #children;
            nocase;
            #fs;
            constructor(cwd = process.cwd(), pathImpl, sep, { nocase, childrenCacheSize = 16384, fs = defaultFS } = {}){
                this.#fs = fsFromOption(fs);
                if (cwd instanceof URL || cwd.startsWith('file://')) cwd = (0, external_node_url_namespaceObject.fileURLToPath)(cwd);
                const cwdPath = pathImpl.resolve(cwd);
                this.roots = Object.create(null);
                this.rootPath = this.parseRootPath(cwdPath);
                this.#resolveCache = new ResolveCache();
                this.#resolvePosixCache = new ResolveCache();
                this.#children = new ChildrenCache(childrenCacheSize);
                const split = cwdPath.substring(this.rootPath.length).split(sep);
                if (1 === split.length && !split[0]) split.pop();
                if (void 0 === nocase) throw new TypeError('must provide nocase setting to PathScurryBase ctor');
                this.nocase = nocase;
                this.root = this.newRoot(this.#fs);
                this.roots[this.rootPath] = this.root;
                let prev = this.root;
                let len = split.length - 1;
                const joinSep = pathImpl.sep;
                let abs = this.rootPath;
                let sawFirst = false;
                for (const part of split){
                    const l = len--;
                    prev = prev.child(part, {
                        relative: new Array(l).fill('..').join(joinSep),
                        relativePosix: new Array(l).fill('..').join('/'),
                        fullpath: abs += (sawFirst ? '' : joinSep) + part
                    });
                    sawFirst = true;
                }
                this.cwd = prev;
            }
            depth(path = this.cwd) {
                if ('string' == typeof path) path = this.cwd.resolve(path);
                return path.depth();
            }
            childrenCache() {
                return this.#children;
            }
            resolve(...paths) {
                let r = '';
                for(let i = paths.length - 1; i >= 0; i--){
                    const p = paths[i];
                    if (p && '.' !== p) {
                        r = r ? `${p}/${r}` : p;
                        if (this.isAbsolute(p)) break;
                    }
                }
                const cached = this.#resolveCache.get(r);
                if (void 0 !== cached) return cached;
                const result = this.cwd.resolve(r).fullpath();
                this.#resolveCache.set(r, result);
                return result;
            }
            resolvePosix(...paths) {
                let r = '';
                for(let i = paths.length - 1; i >= 0; i--){
                    const p = paths[i];
                    if (p && '.' !== p) {
                        r = r ? `${p}/${r}` : p;
                        if (this.isAbsolute(p)) break;
                    }
                }
                const cached = this.#resolvePosixCache.get(r);
                if (void 0 !== cached) return cached;
                const result = this.cwd.resolve(r).fullpathPosix();
                this.#resolvePosixCache.set(r, result);
                return result;
            }
            relative(entry = this.cwd) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                return entry.relative();
            }
            relativePosix(entry = this.cwd) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                return entry.relativePosix();
            }
            basename(entry = this.cwd) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                return entry.name;
            }
            dirname(entry = this.cwd) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                return (entry.parent || entry).fullpath();
            }
            async readdir(entry = this.cwd, opts = {
                withFileTypes: true
            }) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes } = opts;
                if (!entry.canReaddir()) return [];
                {
                    const p = await entry.readdir();
                    return withFileTypes ? p : p.map((e1)=>e1.name);
                }
            }
            readdirSync(entry = this.cwd, opts = {
                withFileTypes: true
            }) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes = true } = opts;
                if (!entry.canReaddir()) return [];
                if (withFileTypes) return entry.readdirSync();
                return entry.readdirSync().map((e1)=>e1.name);
            }
            async lstat(entry = this.cwd) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                return entry.lstat();
            }
            lstatSync(entry = this.cwd) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                return entry.lstatSync();
            }
            async readlink(entry = this.cwd, { withFileTypes } = {
                withFileTypes: false
            }) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    withFileTypes = entry.withFileTypes;
                    entry = this.cwd;
                }
                const e1 = await entry.readlink();
                return withFileTypes ? e1 : e1?.fullpath();
            }
            readlinkSync(entry = this.cwd, { withFileTypes } = {
                withFileTypes: false
            }) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    withFileTypes = entry.withFileTypes;
                    entry = this.cwd;
                }
                const e1 = entry.readlinkSync();
                return withFileTypes ? e1 : e1?.fullpath();
            }
            async realpath(entry = this.cwd, { withFileTypes } = {
                withFileTypes: false
            }) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    withFileTypes = entry.withFileTypes;
                    entry = this.cwd;
                }
                const e1 = await entry.realpath();
                return withFileTypes ? e1 : e1?.fullpath();
            }
            realpathSync(entry = this.cwd, { withFileTypes } = {
                withFileTypes: false
            }) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    withFileTypes = entry.withFileTypes;
                    entry = this.cwd;
                }
                const e1 = entry.realpathSync();
                return withFileTypes ? e1 : e1?.fullpath();
            }
            async walk(entry = this.cwd, opts = {}) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
                const results = [];
                if (!filter || filter(entry)) results.push(withFileTypes ? entry : entry.fullpath());
                const dirs = new Set();
                const walk = (dir, cb)=>{
                    dirs.add(dir);
                    dir.readdirCB((er, entries)=>{
                        if (er) return cb(er);
                        let len = entries.length;
                        if (!len) return cb();
                        const next = ()=>{
                            if (0 === --len) cb();
                        };
                        for (const e1 of entries){
                            if (!filter || filter(e1)) results.push(withFileTypes ? e1 : e1.fullpath());
                            if (follow && e1.isSymbolicLink()) e1.realpath().then((r)=>r?.isUnknown() ? r.lstat() : r).then((r)=>r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next());
                            else if (e1.shouldWalk(dirs, walkFilter)) walk(e1, next);
                            else next();
                        }
                    }, true);
                };
                const start = entry;
                return new Promise((res, rej)=>{
                    walk(start, (er)=>{
                        if (er) return rej(er);
                        res(results);
                    });
                });
            }
            walkSync(entry = this.cwd, opts = {}) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
                const results = [];
                if (!filter || filter(entry)) results.push(withFileTypes ? entry : entry.fullpath());
                const dirs = new Set([
                    entry
                ]);
                for (const dir of dirs){
                    const entries = dir.readdirSync();
                    for (const e1 of entries){
                        if (!filter || filter(e1)) results.push(withFileTypes ? e1 : e1.fullpath());
                        let r = e1;
                        if (e1.isSymbolicLink()) {
                            if (!(follow && (r = e1.realpathSync()))) continue;
                            if (r.isUnknown()) r.lstatSync();
                        }
                        if (r.shouldWalk(dirs, walkFilter)) dirs.add(r);
                    }
                }
                return results;
            }
            [Symbol.asyncIterator]() {
                return this.iterate();
            }
            iterate(entry = this.cwd, options = {}) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    options = entry;
                    entry = this.cwd;
                }
                return this.stream(entry, options)[Symbol.asyncIterator]();
            }
            [Symbol.iterator]() {
                return this.iterateSync();
            }
            *iterateSync(entry = this.cwd, opts = {}) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
                if (!filter || filter(entry)) yield withFileTypes ? entry : entry.fullpath();
                const dirs = new Set([
                    entry
                ]);
                for (const dir of dirs){
                    const entries = dir.readdirSync();
                    for (const e1 of entries){
                        if (!filter || filter(e1)) yield withFileTypes ? e1 : e1.fullpath();
                        let r = e1;
                        if (e1.isSymbolicLink()) {
                            if (!(follow && (r = e1.realpathSync()))) continue;
                            if (r.isUnknown()) r.lstatSync();
                        }
                        if (r.shouldWalk(dirs, walkFilter)) dirs.add(r);
                    }
                }
            }
            stream(entry = this.cwd, opts = {}) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
                const results = new Minipass({
                    objectMode: true
                });
                if (!filter || filter(entry)) results.write(withFileTypes ? entry : entry.fullpath());
                const dirs = new Set();
                const queue = [
                    entry
                ];
                let processing = 0;
                const process1 = ()=>{
                    let paused = false;
                    while(!paused){
                        const dir = queue.shift();
                        if (!dir) {
                            if (0 === processing) results.end();
                            return;
                        }
                        processing++;
                        dirs.add(dir);
                        const onReaddir = (er, entries, didRealpaths = false)=>{
                            if (er) return results.emit('error', er);
                            if (follow && !didRealpaths) {
                                const promises = [];
                                for (const e1 of entries)if (e1.isSymbolicLink()) promises.push(e1.realpath().then((r)=>r?.isUnknown() ? r.lstat() : r));
                                if (promises.length) return void Promise.all(promises).then(()=>onReaddir(null, entries, true));
                            }
                            for (const e1 of entries)if (e1 && (!filter || filter(e1))) {
                                if (!results.write(withFileTypes ? e1 : e1.fullpath())) paused = true;
                            }
                            processing--;
                            for (const e1 of entries){
                                const r = e1.realpathCached() || e1;
                                if (r.shouldWalk(dirs, walkFilter)) queue.push(r);
                            }
                            if (paused && !results.flowing) results.once('drain', process1);
                            else if (!sync) process1();
                        };
                        let sync = true;
                        dir.readdirCB(onReaddir, true);
                        sync = false;
                    }
                };
                process1();
                return results;
            }
            streamSync(entry = this.cwd, opts = {}) {
                if ('string' == typeof entry) entry = this.cwd.resolve(entry);
                else if (!(entry instanceof PathBase)) {
                    opts = entry;
                    entry = this.cwd;
                }
                const { withFileTypes = true, follow = false, filter, walkFilter } = opts;
                const results = new Minipass({
                    objectMode: true
                });
                const dirs = new Set();
                if (!filter || filter(entry)) results.write(withFileTypes ? entry : entry.fullpath());
                const queue = [
                    entry
                ];
                let processing = 0;
                const process1 = ()=>{
                    let paused = false;
                    while(!paused){
                        const dir = queue.shift();
                        if (!dir) {
                            if (0 === processing) results.end();
                            return;
                        }
                        processing++;
                        dirs.add(dir);
                        const entries = dir.readdirSync();
                        for (const e1 of entries)if (!filter || filter(e1)) {
                            if (!results.write(withFileTypes ? e1 : e1.fullpath())) paused = true;
                        }
                        processing--;
                        for (const e1 of entries){
                            let r = e1;
                            if (e1.isSymbolicLink()) {
                                if (!(follow && (r = e1.realpathSync()))) continue;
                                if (r.isUnknown()) r.lstatSync();
                            }
                            if (r.shouldWalk(dirs, walkFilter)) queue.push(r);
                        }
                    }
                    if (paused && !results.flowing) results.once('drain', process1);
                };
                process1();
                return results;
            }
            chdir(path = this.cwd) {
                const oldCwd = this.cwd;
                this.cwd = 'string' == typeof path ? this.cwd.resolve(path) : path;
                this.cwd[setAsCwd](oldCwd);
            }
        }
        class PathScurryWin32 extends PathScurryBase {
            sep = '\\';
            constructor(cwd = process.cwd(), opts = {}){
                const { nocase = true } = opts;
                super(cwd, external_node_path_namespaceObject.win32, '\\', {
                    ...opts,
                    nocase
                });
                this.nocase = nocase;
                for(let p = this.cwd; p; p = p.parent)p.nocase = this.nocase;
            }
            parseRootPath(dir) {
                return external_node_path_namespaceObject.win32.parse(dir).root.toUpperCase();
            }
            newRoot(fs) {
                return new PathWin32(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), {
                    fs
                });
            }
            isAbsolute(p) {
                return p.startsWith('/') || p.startsWith('\\') || /^[a-z]:(\/|\\)/i.test(p);
            }
        }
        class PathScurryPosix extends PathScurryBase {
            sep = '/';
            constructor(cwd = process.cwd(), opts = {}){
                const { nocase = false } = opts;
                super(cwd, external_node_path_namespaceObject.posix, '/', {
                    ...opts,
                    nocase
                });
                this.nocase = nocase;
            }
            parseRootPath(_dir) {
                return '/';
            }
            newRoot(fs) {
                return new PathPosix(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), {
                    fs
                });
            }
            isAbsolute(p) {
                return p.startsWith('/');
            }
        }
        class PathScurryDarwin extends PathScurryPosix {
            constructor(cwd = process.cwd(), opts = {}){
                const { nocase = true } = opts;
                super(cwd, {
                    ...opts,
                    nocase
                });
            }
        }
        process.platform;
        const PathScurry = 'win32' === process.platform ? PathScurryWin32 : 'darwin' === process.platform ? PathScurryDarwin : PathScurryPosix;
        const isPatternList = (pl)=>pl.length >= 1;
        const isGlobList = (gl)=>gl.length >= 1;
        class Pattern {
            #patternList;
            #globList;
            #index;
            length;
            #platform;
            #rest;
            #globString;
            #isDrive;
            #isUNC;
            #isAbsolute;
            #followGlobstar = true;
            constructor(patternList, globList, index, platform){
                if (!isPatternList(patternList)) throw new TypeError('empty pattern list');
                if (!isGlobList(globList)) throw new TypeError('empty glob list');
                if (globList.length !== patternList.length) throw new TypeError('mismatched pattern list and glob list lengths');
                this.length = patternList.length;
                if (index < 0 || index >= this.length) throw new TypeError('index out of range');
                this.#patternList = patternList;
                this.#globList = globList;
                this.#index = index;
                this.#platform = platform;
                if (0 === this.#index) {
                    if (this.isUNC()) {
                        const [p0, p1, p2, p3, ...prest] = this.#patternList;
                        const [g0, g1, g2, g3, ...grest] = this.#globList;
                        if ('' === prest[0]) {
                            prest.shift();
                            grest.shift();
                        }
                        const p = [
                            p0,
                            p1,
                            p2,
                            p3,
                            ''
                        ].join('/');
                        const g = [
                            g0,
                            g1,
                            g2,
                            g3,
                            ''
                        ].join('/');
                        this.#patternList = [
                            p,
                            ...prest
                        ];
                        this.#globList = [
                            g,
                            ...grest
                        ];
                        this.length = this.#patternList.length;
                    } else if (this.isDrive() || this.isAbsolute()) {
                        const [p1, ...prest] = this.#patternList;
                        const [g1, ...grest] = this.#globList;
                        if ('' === prest[0]) {
                            prest.shift();
                            grest.shift();
                        }
                        const p = p1 + '/';
                        const g = g1 + '/';
                        this.#patternList = [
                            p,
                            ...prest
                        ];
                        this.#globList = [
                            g,
                            ...grest
                        ];
                        this.length = this.#patternList.length;
                    }
                }
            }
            pattern() {
                return this.#patternList[this.#index];
            }
            isString() {
                return 'string' == typeof this.#patternList[this.#index];
            }
            isGlobstar() {
                return this.#patternList[this.#index] === GLOBSTAR;
            }
            isRegExp() {
                return this.#patternList[this.#index] instanceof RegExp;
            }
            globString() {
                return this.#globString = this.#globString || (0 === this.#index ? this.isAbsolute() ? this.#globList[0] + this.#globList.slice(1).join('/') : this.#globList.join('/') : this.#globList.slice(this.#index).join('/'));
            }
            hasMore() {
                return this.length > this.#index + 1;
            }
            rest() {
                if (void 0 !== this.#rest) return this.#rest;
                if (!this.hasMore()) return this.#rest = null;
                this.#rest = new Pattern(this.#patternList, this.#globList, this.#index + 1, this.#platform);
                this.#rest.#isAbsolute = this.#isAbsolute;
                this.#rest.#isUNC = this.#isUNC;
                this.#rest.#isDrive = this.#isDrive;
                return this.#rest;
            }
            isUNC() {
                const pl = this.#patternList;
                return void 0 !== this.#isUNC ? this.#isUNC : this.#isUNC = 'win32' === this.#platform && 0 === this.#index && '' === pl[0] && '' === pl[1] && 'string' == typeof pl[2] && !!pl[2] && 'string' == typeof pl[3] && !!pl[3];
            }
            isDrive() {
                const pl = this.#patternList;
                return void 0 !== this.#isDrive ? this.#isDrive : this.#isDrive = 'win32' === this.#platform && 0 === this.#index && this.length > 1 && 'string' == typeof pl[0] && /^[a-z]:$/i.test(pl[0]);
            }
            isAbsolute() {
                const pl = this.#patternList;
                return void 0 !== this.#isAbsolute ? this.#isAbsolute : this.#isAbsolute = '' === pl[0] && pl.length > 1 || this.isDrive() || this.isUNC();
            }
            root() {
                const p = this.#patternList[0];
                return 'string' == typeof p && this.isAbsolute() && 0 === this.#index ? p : '';
            }
            checkFollowGlobstar() {
                return !(0 === this.#index || !this.isGlobstar() || !this.#followGlobstar);
            }
            markFollowGlobstar() {
                if (0 === this.#index || !this.isGlobstar() || !this.#followGlobstar) return false;
                this.#followGlobstar = false;
                return true;
            }
        }
        const ignore_defaultPlatform = 'object' == typeof process && process && 'string' == typeof process.platform ? process.platform : 'linux';
        class Ignore {
            relative;
            relativeChildren;
            absolute;
            absoluteChildren;
            platform;
            mmopts;
            constructor(ignored, { nobrace, nocase, noext, noglobstar, platform = ignore_defaultPlatform }){
                this.relative = [];
                this.absolute = [];
                this.relativeChildren = [];
                this.absoluteChildren = [];
                this.platform = platform;
                this.mmopts = {
                    dot: true,
                    nobrace,
                    nocase,
                    noext,
                    noglobstar,
                    optimizationLevel: 2,
                    platform,
                    nocomment: true,
                    nonegate: true
                };
                for (const ign of ignored)this.add(ign);
            }
            add(ign) {
                const mm = new esm_Minimatch(ign, this.mmopts);
                for(let i = 0; i < mm.set.length; i++){
                    const parsed = mm.set[i];
                    const globParts = mm.globParts[i];
                    if (!parsed || !globParts) throw new Error('invalid pattern object');
                    while('.' === parsed[0] && '.' === globParts[0]){
                        parsed.shift();
                        globParts.shift();
                    }
                    const p = new Pattern(parsed, globParts, 0, this.platform);
                    const m = new esm_Minimatch(p.globString(), this.mmopts);
                    const children = '**' === globParts[globParts.length - 1];
                    const absolute = p.isAbsolute();
                    if (absolute) this.absolute.push(m);
                    else this.relative.push(m);
                    if (children) if (absolute) this.absoluteChildren.push(m);
                    else this.relativeChildren.push(m);
                }
            }
            ignored(p) {
                const fullpath = p.fullpath();
                const fullpaths = `${fullpath}/`;
                const relative = p.relative() || '.';
                const relatives = `${relative}/`;
                for (const m of this.relative)if (m.match(relative) || m.match(relatives)) return true;
                for (const m of this.absolute)if (m.match(fullpath) || m.match(fullpaths)) return true;
                return false;
            }
            childrenIgnored(p) {
                const fullpath = p.fullpath() + '/';
                const relative = (p.relative() || '.') + '/';
                for (const m of this.relativeChildren)if (m.match(relative)) return true;
                for (const m of this.absoluteChildren)if (m.match(fullpath)) return true;
                return false;
            }
        }
        class HasWalkedCache {
            store;
            constructor(store = new Map()){
                this.store = store;
            }
            copy() {
                return new HasWalkedCache(new Map(this.store));
            }
            hasWalked(target, pattern) {
                return this.store.get(target.fullpath())?.has(pattern.globString());
            }
            storeWalked(target, pattern) {
                const fullpath = target.fullpath();
                const cached = this.store.get(fullpath);
                if (cached) cached.add(pattern.globString());
                else this.store.set(fullpath, new Set([
                    pattern.globString()
                ]));
            }
        }
        class MatchRecord {
            store = new Map();
            add(target, absolute, ifDir) {
                const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);
                const current = this.store.get(target);
                this.store.set(target, void 0 === current ? n : n & current);
            }
            entries() {
                return [
                    ...this.store.entries()
                ].map(([path, n])=>[
                        path,
                        !!(2 & n),
                        !!(1 & n)
                    ]);
            }
        }
        class SubWalks {
            store = new Map();
            add(target, pattern) {
                if (!target.canReaddir()) return;
                const subs = this.store.get(target);
                if (subs) {
                    if (!subs.find((p)=>p.globString() === pattern.globString())) subs.push(pattern);
                } else this.store.set(target, [
                    pattern
                ]);
            }
            get(target) {
                const subs = this.store.get(target);
                if (!subs) throw new Error('attempting to walk unknown path');
                return subs;
            }
            entries() {
                return this.keys().map((k)=>[
                        k,
                        this.store.get(k)
                    ]);
            }
            keys() {
                return [
                    ...this.store.keys()
                ].filter((t1)=>t1.canReaddir());
            }
        }
        class Processor {
            hasWalkedCache;
            matches = new MatchRecord();
            subwalks = new SubWalks();
            patterns;
            follow;
            dot;
            opts;
            constructor(opts, hasWalkedCache){
                this.opts = opts;
                this.follow = !!opts.follow;
                this.dot = !!opts.dot;
                this.hasWalkedCache = hasWalkedCache ? hasWalkedCache.copy() : new HasWalkedCache();
            }
            processPatterns(target, patterns) {
                this.patterns = patterns;
                const processingSet = patterns.map((p)=>[
                        target,
                        p
                    ]);
                for (let [t1, pattern] of processingSet){
                    this.hasWalkedCache.storeWalked(t1, pattern);
                    const root = pattern.root();
                    const absolute = pattern.isAbsolute() && false !== this.opts.absolute;
                    if (root) {
                        t1 = t1.resolve('/' === root && void 0 !== this.opts.root ? this.opts.root : root);
                        const rest = pattern.rest();
                        if (rest) pattern = rest;
                        else {
                            this.matches.add(t1, true, false);
                            continue;
                        }
                    }
                    if (t1.isENOENT()) continue;
                    let p;
                    let rest;
                    let changed = false;
                    while('string' == typeof (p = pattern.pattern()) && (rest = pattern.rest())){
                        const c = t1.resolve(p);
                        t1 = c;
                        pattern = rest;
                        changed = true;
                    }
                    p = pattern.pattern();
                    rest = pattern.rest();
                    if (changed) {
                        if (this.hasWalkedCache.hasWalked(t1, pattern)) continue;
                        this.hasWalkedCache.storeWalked(t1, pattern);
                    }
                    if ('string' == typeof p) {
                        const ifDir = '..' === p || '' === p || '.' === p;
                        this.matches.add(t1.resolve(p), absolute, ifDir);
                        continue;
                    }
                    if (p === GLOBSTAR) {
                        if (!t1.isSymbolicLink() || this.follow || pattern.checkFollowGlobstar()) this.subwalks.add(t1, pattern);
                        const rp = rest?.pattern();
                        const rrest = rest?.rest();
                        if (rest && ('' !== rp && '.' !== rp || rrest)) {
                            if ('..' === rp) {
                                const tp = t1.parent || t1;
                                if (rrest) {
                                    if (!this.hasWalkedCache.hasWalked(tp, rrest)) this.subwalks.add(tp, rrest);
                                } else this.matches.add(tp, absolute, true);
                            }
                        } else this.matches.add(t1, absolute, '' === rp || '.' === rp);
                    } else if (p instanceof RegExp) this.subwalks.add(t1, pattern);
                }
                return this;
            }
            subwalkTargets() {
                return this.subwalks.keys();
            }
            child() {
                return new Processor(this.opts, this.hasWalkedCache);
            }
            filterEntries(parent, entries) {
                const patterns = this.subwalks.get(parent);
                const results = this.child();
                for (const e1 of entries)for (const pattern of patterns){
                    const absolute = pattern.isAbsolute();
                    const p = pattern.pattern();
                    const rest = pattern.rest();
                    if (p === GLOBSTAR) results.testGlobstar(e1, pattern, rest, absolute);
                    else if (p instanceof RegExp) results.testRegExp(e1, p, rest, absolute);
                    else results.testString(e1, p, rest, absolute);
                }
                return results;
            }
            testGlobstar(e1, pattern, rest, absolute) {
                if (this.dot || !e1.name.startsWith('.')) {
                    if (!pattern.hasMore()) this.matches.add(e1, absolute, false);
                    if (e1.canReaddir()) {
                        if (this.follow || !e1.isSymbolicLink()) this.subwalks.add(e1, pattern);
                        else if (e1.isSymbolicLink()) {
                            if (rest && pattern.checkFollowGlobstar()) this.subwalks.add(e1, rest);
                            else if (pattern.markFollowGlobstar()) this.subwalks.add(e1, pattern);
                        }
                    }
                }
                if (rest) {
                    const rp = rest.pattern();
                    if ('string' == typeof rp && '..' !== rp && '' !== rp && '.' !== rp) this.testString(e1, rp, rest.rest(), absolute);
                    else if ('..' === rp) {
                        const ep = e1.parent || e1;
                        this.subwalks.add(ep, rest);
                    } else if (rp instanceof RegExp) this.testRegExp(e1, rp, rest.rest(), absolute);
                }
            }
            testRegExp(e1, p, rest, absolute) {
                if (!p.test(e1.name)) return;
                if (rest) this.subwalks.add(e1, rest);
                else this.matches.add(e1, absolute, false);
            }
            testString(e1, p, rest, absolute) {
                if (!e1.isNamed(p)) return;
                if (rest) this.subwalks.add(e1, rest);
                else this.matches.add(e1, absolute, false);
            }
        }
        const makeIgnore = (ignore, opts)=>'string' == typeof ignore ? new Ignore([
                ignore
            ], opts) : Array.isArray(ignore) ? new Ignore(ignore, opts) : ignore;
        class GlobUtil {
            path;
            patterns;
            opts;
            seen = new Set();
            paused = false;
            aborted = false;
            #onResume = [];
            #ignore;
            #sep;
            signal;
            maxDepth;
            includeChildMatches;
            constructor(patterns, path, opts){
                this.patterns = patterns;
                this.path = path;
                this.opts = opts;
                this.#sep = opts.posix || 'win32' !== opts.platform ? '/' : '\\';
                this.includeChildMatches = false !== opts.includeChildMatches;
                if (opts.ignore || !this.includeChildMatches) {
                    this.#ignore = makeIgnore(opts.ignore ?? [], opts);
                    if (!this.includeChildMatches && 'function' != typeof this.#ignore.add) {
                        const m = 'cannot ignore child matches, ignore lacks add() method.';
                        throw new Error(m);
                    }
                }
                this.maxDepth = opts.maxDepth || 1 / 0;
                if (opts.signal) {
                    this.signal = opts.signal;
                    this.signal.addEventListener('abort', ()=>{
                        this.#onResume.length = 0;
                    });
                }
            }
            #ignored(path) {
                return this.seen.has(path) || !!this.#ignore?.ignored?.(path);
            }
            #childrenIgnored(path) {
                return !!this.#ignore?.childrenIgnored?.(path);
            }
            pause() {
                this.paused = true;
            }
            resume() {
                if (this.signal?.aborted) return;
                this.paused = false;
                let fn;
                while(!this.paused && (fn = this.#onResume.shift()))fn();
            }
            onResume(fn) {
                if (this.signal?.aborted) return;
                if (this.paused) this.#onResume.push(fn);
                else fn();
            }
            async matchCheck(e1, ifDir) {
                if (ifDir && this.opts.nodir) return;
                let rpc;
                if (this.opts.realpath) {
                    rpc = e1.realpathCached() || await e1.realpath();
                    if (!rpc) return;
                    e1 = rpc;
                }
                const needStat = e1.isUnknown() || this.opts.stat;
                const s = needStat ? await e1.lstat() : e1;
                if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
                    const target = await s.realpath();
                    if (target && (target.isUnknown() || this.opts.stat)) await target.lstat();
                }
                return this.matchCheckTest(s, ifDir);
            }
            matchCheckTest(e1, ifDir) {
                return e1 && (this.maxDepth === 1 / 0 || e1.depth() <= this.maxDepth) && (!ifDir || e1.canReaddir()) && (!this.opts.nodir || !e1.isDirectory()) && (!this.opts.nodir || !this.opts.follow || !e1.isSymbolicLink() || !e1.realpathCached()?.isDirectory()) && !this.#ignored(e1) ? e1 : void 0;
            }
            matchCheckSync(e1, ifDir) {
                if (ifDir && this.opts.nodir) return;
                let rpc;
                if (this.opts.realpath) {
                    rpc = e1.realpathCached() || e1.realpathSync();
                    if (!rpc) return;
                    e1 = rpc;
                }
                const needStat = e1.isUnknown() || this.opts.stat;
                const s = needStat ? e1.lstatSync() : e1;
                if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
                    const target = s.realpathSync();
                    if (target && (target?.isUnknown() || this.opts.stat)) target.lstatSync();
                }
                return this.matchCheckTest(s, ifDir);
            }
            matchFinish(e1, absolute) {
                if (this.#ignored(e1)) return;
                if (!this.includeChildMatches && this.#ignore?.add) {
                    const ign = `${e1.relativePosix()}/**`;
                    this.#ignore.add(ign);
                }
                const abs = void 0 === this.opts.absolute ? absolute : this.opts.absolute;
                this.seen.add(e1);
                const mark = this.opts.mark && e1.isDirectory() ? this.#sep : '';
                if (this.opts.withFileTypes) this.matchEmit(e1);
                else if (abs) {
                    const abs = this.opts.posix ? e1.fullpathPosix() : e1.fullpath();
                    this.matchEmit(abs + mark);
                } else {
                    const rel = this.opts.posix ? e1.relativePosix() : e1.relative();
                    const pre = this.opts.dotRelative && !rel.startsWith('..' + this.#sep) ? '.' + this.#sep : '';
                    this.matchEmit(rel ? pre + rel + mark : '.' + mark);
                }
            }
            async match(e1, absolute, ifDir) {
                const p = await this.matchCheck(e1, ifDir);
                if (p) this.matchFinish(p, absolute);
            }
            matchSync(e1, absolute, ifDir) {
                const p = this.matchCheckSync(e1, ifDir);
                if (p) this.matchFinish(p, absolute);
            }
            walkCB(target, patterns, cb) {
                if (this.signal?.aborted) cb();
                this.walkCB2(target, patterns, new Processor(this.opts), cb);
            }
            walkCB2(target, patterns, processor, cb) {
                if (this.#childrenIgnored(target)) return cb();
                if (this.signal?.aborted) cb();
                if (this.paused) return void this.onResume(()=>this.walkCB2(target, patterns, processor, cb));
                processor.processPatterns(target, patterns);
                let tasks = 1;
                const next = ()=>{
                    if (0 === --tasks) cb();
                };
                for (const [m, absolute, ifDir] of processor.matches.entries())if (!this.#ignored(m)) {
                    tasks++;
                    this.match(m, absolute, ifDir).then(()=>next());
                }
                for (const t1 of processor.subwalkTargets()){
                    if (this.maxDepth !== 1 / 0 && t1.depth() >= this.maxDepth) continue;
                    tasks++;
                    const childrenCached = t1.readdirCached();
                    if (t1.calledReaddir()) this.walkCB3(t1, childrenCached, processor, next);
                    else t1.readdirCB((_, entries)=>this.walkCB3(t1, entries, processor, next), true);
                }
                next();
            }
            walkCB3(target, entries, processor, cb) {
                processor = processor.filterEntries(target, entries);
                let tasks = 1;
                const next = ()=>{
                    if (0 === --tasks) cb();
                };
                for (const [m, absolute, ifDir] of processor.matches.entries())if (!this.#ignored(m)) {
                    tasks++;
                    this.match(m, absolute, ifDir).then(()=>next());
                }
                for (const [target, patterns] of processor.subwalks.entries()){
                    tasks++;
                    this.walkCB2(target, patterns, processor.child(), next);
                }
                next();
            }
            walkCBSync(target, patterns, cb) {
                if (this.signal?.aborted) cb();
                this.walkCB2Sync(target, patterns, new Processor(this.opts), cb);
            }
            walkCB2Sync(target, patterns, processor, cb) {
                if (this.#childrenIgnored(target)) return cb();
                if (this.signal?.aborted) cb();
                if (this.paused) return void this.onResume(()=>this.walkCB2Sync(target, patterns, processor, cb));
                processor.processPatterns(target, patterns);
                let tasks = 1;
                const next = ()=>{
                    if (0 === --tasks) cb();
                };
                for (const [m, absolute, ifDir] of processor.matches.entries())if (!this.#ignored(m)) this.matchSync(m, absolute, ifDir);
                for (const t1 of processor.subwalkTargets()){
                    if (this.maxDepth !== 1 / 0 && t1.depth() >= this.maxDepth) continue;
                    tasks++;
                    const children = t1.readdirSync();
                    this.walkCB3Sync(t1, children, processor, next);
                }
                next();
            }
            walkCB3Sync(target, entries, processor, cb) {
                processor = processor.filterEntries(target, entries);
                let tasks = 1;
                const next = ()=>{
                    if (0 === --tasks) cb();
                };
                for (const [m, absolute, ifDir] of processor.matches.entries())if (!this.#ignored(m)) this.matchSync(m, absolute, ifDir);
                for (const [target, patterns] of processor.subwalks.entries()){
                    tasks++;
                    this.walkCB2Sync(target, patterns, processor.child(), next);
                }
                next();
            }
        }
        class GlobWalker extends GlobUtil {
            matches = new Set();
            constructor(patterns, path, opts){
                super(patterns, path, opts);
            }
            matchEmit(e1) {
                this.matches.add(e1);
            }
            async walk() {
                if (this.signal?.aborted) throw this.signal.reason;
                if (this.path.isUnknown()) await this.path.lstat();
                await new Promise((res, rej)=>{
                    this.walkCB(this.path, this.patterns, ()=>{
                        if (this.signal?.aborted) rej(this.signal.reason);
                        else res(this.matches);
                    });
                });
                return this.matches;
            }
            walkSync() {
                if (this.signal?.aborted) throw this.signal.reason;
                if (this.path.isUnknown()) this.path.lstatSync();
                this.walkCBSync(this.path, this.patterns, ()=>{
                    if (this.signal?.aborted) throw this.signal.reason;
                });
                return this.matches;
            }
        }
        class GlobStream extends GlobUtil {
            results;
            constructor(patterns, path, opts){
                super(patterns, path, opts);
                this.results = new Minipass({
                    signal: this.signal,
                    objectMode: true
                });
                this.results.on('drain', ()=>this.resume());
                this.results.on('resume', ()=>this.resume());
            }
            matchEmit(e1) {
                this.results.write(e1);
                if (!this.results.flowing) this.pause();
            }
            stream() {
                const target = this.path;
                if (target.isUnknown()) target.lstat().then(()=>{
                    this.walkCB(target, this.patterns, ()=>this.results.end());
                });
                else this.walkCB(target, this.patterns, ()=>this.results.end());
                return this.results;
            }
            streamSync() {
                if (this.path.isUnknown()) this.path.lstatSync();
                this.walkCBSync(this.path, this.patterns, ()=>this.results.end());
                return this.results;
            }
        }
        const glob_defaultPlatform = 'object' == typeof process && process && 'string' == typeof process.platform ? process.platform : 'linux';
        class Glob {
            absolute;
            cwd;
            root;
            dot;
            dotRelative;
            follow;
            ignore;
            magicalBraces;
            mark;
            matchBase;
            maxDepth;
            nobrace;
            nocase;
            nodir;
            noext;
            noglobstar;
            pattern;
            platform;
            realpath;
            scurry;
            stat;
            signal;
            windowsPathsNoEscape;
            withFileTypes;
            includeChildMatches;
            opts;
            patterns;
            constructor(pattern, opts){
                if (!opts) throw new TypeError('glob options required');
                this.withFileTypes = !!opts.withFileTypes;
                this.signal = opts.signal;
                this.follow = !!opts.follow;
                this.dot = !!opts.dot;
                this.dotRelative = !!opts.dotRelative;
                this.nodir = !!opts.nodir;
                this.mark = !!opts.mark;
                if (opts.cwd) {
                    if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) opts.cwd = (0, external_node_url_namespaceObject.fileURLToPath)(opts.cwd);
                } else this.cwd = '';
                this.cwd = opts.cwd || '';
                this.root = opts.root;
                this.magicalBraces = !!opts.magicalBraces;
                this.nobrace = !!opts.nobrace;
                this.noext = !!opts.noext;
                this.realpath = !!opts.realpath;
                this.absolute = opts.absolute;
                this.includeChildMatches = false !== opts.includeChildMatches;
                this.noglobstar = !!opts.noglobstar;
                this.matchBase = !!opts.matchBase;
                this.maxDepth = 'number' == typeof opts.maxDepth ? opts.maxDepth : 1 / 0;
                this.stat = !!opts.stat;
                this.ignore = opts.ignore;
                if (this.withFileTypes && void 0 !== this.absolute) throw new Error('cannot set absolute and withFileTypes:true');
                if ('string' == typeof pattern) pattern = [
                    pattern
                ];
                this.windowsPathsNoEscape = !!opts.windowsPathsNoEscape || false === opts.allowWindowsEscape;
                if (this.windowsPathsNoEscape) pattern = pattern.map((p)=>p.replace(/\\/g, '/'));
                if (this.matchBase) {
                    if (opts.noglobstar) throw new TypeError('base matching requires globstar');
                    pattern = pattern.map((p)=>p.includes('/') ? p : `./**/${p}`);
                }
                this.pattern = pattern;
                this.platform = opts.platform || glob_defaultPlatform;
                this.opts = {
                    ...opts,
                    platform: this.platform
                };
                if (opts.scurry) {
                    this.scurry = opts.scurry;
                    if (void 0 !== opts.nocase && opts.nocase !== opts.scurry.nocase) throw new Error('nocase option contradicts provided scurry option');
                } else {
                    const Scurry = 'win32' === opts.platform ? PathScurryWin32 : 'darwin' === opts.platform ? PathScurryDarwin : opts.platform ? PathScurryPosix : PathScurry;
                    this.scurry = new Scurry(this.cwd, {
                        nocase: opts.nocase,
                        fs: opts.fs
                    });
                }
                this.nocase = this.scurry.nocase;
                const nocaseMagicOnly = 'darwin' === this.platform || 'win32' === this.platform;
                const mmo = {
                    ...opts,
                    dot: this.dot,
                    matchBase: this.matchBase,
                    nobrace: this.nobrace,
                    nocase: this.nocase,
                    nocaseMagicOnly,
                    nocomment: true,
                    noext: this.noext,
                    nonegate: true,
                    optimizationLevel: 2,
                    platform: this.platform,
                    windowsPathsNoEscape: this.windowsPathsNoEscape,
                    debug: !!this.opts.debug
                };
                const mms = this.pattern.map((p)=>new esm_Minimatch(p, mmo));
                const [matchSet, globParts] = mms.reduce((set, m)=>{
                    set[0].push(...m.set);
                    set[1].push(...m.globParts);
                    return set;
                }, [
                    [],
                    []
                ]);
                this.patterns = matchSet.map((set, i)=>{
                    const g = globParts[i];
                    if (!g) throw new Error('invalid pattern object');
                    return new Pattern(set, g, 0, this.platform);
                });
            }
            async walk() {
                return [
                    ...await new GlobWalker(this.patterns, this.scurry.cwd, {
                        ...this.opts,
                        maxDepth: this.maxDepth !== 1 / 0 ? this.maxDepth + this.scurry.cwd.depth() : 1 / 0,
                        platform: this.platform,
                        nocase: this.nocase,
                        includeChildMatches: this.includeChildMatches
                    }).walk()
                ];
            }
            walkSync() {
                return [
                    ...new GlobWalker(this.patterns, this.scurry.cwd, {
                        ...this.opts,
                        maxDepth: this.maxDepth !== 1 / 0 ? this.maxDepth + this.scurry.cwd.depth() : 1 / 0,
                        platform: this.platform,
                        nocase: this.nocase,
                        includeChildMatches: this.includeChildMatches
                    }).walkSync()
                ];
            }
            stream() {
                return new GlobStream(this.patterns, this.scurry.cwd, {
                    ...this.opts,
                    maxDepth: this.maxDepth !== 1 / 0 ? this.maxDepth + this.scurry.cwd.depth() : 1 / 0,
                    platform: this.platform,
                    nocase: this.nocase,
                    includeChildMatches: this.includeChildMatches
                }).stream();
            }
            streamSync() {
                return new GlobStream(this.patterns, this.scurry.cwd, {
                    ...this.opts,
                    maxDepth: this.maxDepth !== 1 / 0 ? this.maxDepth + this.scurry.cwd.depth() : 1 / 0,
                    platform: this.platform,
                    nocase: this.nocase,
                    includeChildMatches: this.includeChildMatches
                }).streamSync();
            }
            iterateSync() {
                return this.streamSync()[Symbol.iterator]();
            }
            [Symbol.iterator]() {
                return this.iterateSync();
            }
            iterate() {
                return this.stream()[Symbol.asyncIterator]();
            }
            [Symbol.asyncIterator]() {
                return this.iterate();
            }
        }
        const has_magic_hasMagic = (pattern, options = {})=>{
            if (!Array.isArray(pattern)) pattern = [
                pattern
            ];
            for (const p of pattern)if (new esm_Minimatch(p, options).hasMagic()) return true;
            return false;
        };
        function globStreamSync(pattern, options = {}) {
            return new Glob(pattern, options).streamSync();
        }
        function globStream(pattern, options = {}) {
            return new Glob(pattern, options).stream();
        }
        function globSync(pattern, options = {}) {
            return new Glob(pattern, options).walkSync();
        }
        async function glob_(pattern, options = {}) {
            return new Glob(pattern, options).walk();
        }
        function globIterateSync(pattern, options = {}) {
            return new Glob(pattern, options).iterateSync();
        }
        function globIterate(pattern, options = {}) {
            return new Glob(pattern, options).iterate();
        }
        const streamSync = globStreamSync;
        const esm_stream = Object.assign(globStream, {
            sync: globStreamSync
        });
        const iterateSync = globIterateSync;
        const iterate = Object.assign(globIterate, {
            sync: globIterateSync
        });
        const esm_sync = Object.assign(globSync, {
            stream: globStreamSync,
            iterate: globIterateSync
        });
        const esm_glob = Object.assign(glob_, {
            glob: glob_,
            globSync,
            sync: esm_sync,
            globStream,
            stream: esm_stream,
            globStreamSync,
            streamSync,
            globIterate,
            iterate,
            globIterateSync,
            iterateSync,
            Glob: Glob,
            hasMagic: has_magic_hasMagic,
            escape: escape_escape,
            unescape: unescape_unescape
        });
        esm_glob.glob = esm_glob;
        function getProcessArgvBinIndex() {
            if (isBundledElectronApp()) return 0;
            return 1;
        }
        function isBundledElectronApp() {
            return isElectronApp() && !process.defaultApp;
        }
        function isElectronApp() {
            return !!process.versions.electron;
        }
        function hideBin(argv) {
            return argv.slice(getProcessArgvBinIndex() + 1);
        }
        var external_util_ = __webpack_require__("util");
        var external_path_ = __webpack_require__("path");
        /**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */ function camelCase(str) {
            const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();
            if (!isCamelCase) str = str.toLowerCase();
            if (-1 === str.indexOf('-') && -1 === str.indexOf('_')) return str;
            {
                let camelcase = '';
                let nextChrUpper = false;
                const leadingHyphens = str.match(/^-+/);
                for(let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++){
                    let chr = str.charAt(i);
                    if (nextChrUpper) {
                        nextChrUpper = false;
                        chr = chr.toUpperCase();
                    }
                    if (0 !== i && ('-' === chr || '_' === chr)) nextChrUpper = true;
                    else if ('-' !== chr && '_' !== chr) camelcase += chr;
                }
                return camelcase;
            }
        }
        function decamelize(str, joinString) {
            const lowercase = str.toLowerCase();
            joinString = joinString || '-';
            let notCamelcase = '';
            for(let i = 0; i < str.length; i++){
                const chrLower = lowercase.charAt(i);
                const chrString = str.charAt(i);
                if (chrLower !== chrString && i > 0) notCamelcase += `${joinString}${lowercase.charAt(i)}`;
                else notCamelcase += chrString;
            }
            return notCamelcase;
        }
        function looksLikeNumber(x) {
            if (null == x) return false;
            if ('number' == typeof x) return true;
            if (/^0x[0-9a-f]+$/i.test(x)) return true;
            if (/^0[^.]/.test(x)) return false;
            return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
        }
        /**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */ function tokenizeArgString(argString) {
            if (Array.isArray(argString)) return argString.map((e1)=>'string' != typeof e1 ? e1 + '' : e1);
            argString = argString.trim();
            let i = 0;
            let prevC = null;
            let c = null;
            let opening = null;
            const args = [];
            for(let ii = 0; ii < argString.length; ii++){
                prevC = c;
                c = argString.charAt(ii);
                if (' ' === c && !opening) {
                    if (' ' !== prevC) i++;
                    continue;
                }
                if (c === opening) opening = null;
                else if (("'" === c || '"' === c) && !opening) opening = c;
                if (!args[i]) args[i] = '';
                args[i] += c;
            }
            return args;
        }
        /**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */ var yargs_parser_types_DefaultValuesForTypeKey;
        (function(DefaultValuesForTypeKey) {
            DefaultValuesForTypeKey["BOOLEAN"] = "boolean";
            DefaultValuesForTypeKey["STRING"] = "string";
            DefaultValuesForTypeKey["NUMBER"] = "number";
            DefaultValuesForTypeKey["ARRAY"] = "array";
        })(yargs_parser_types_DefaultValuesForTypeKey || (yargs_parser_types_DefaultValuesForTypeKey = {}));
        /**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */ let mixin;
        class YargsParser {
            constructor(_mixin){
                mixin = _mixin;
            }
            parse(argsInput, options) {
                const opts = Object.assign({
                    alias: void 0,
                    array: void 0,
                    boolean: void 0,
                    config: void 0,
                    configObjects: void 0,
                    configuration: void 0,
                    coerce: void 0,
                    count: void 0,
                    default: void 0,
                    envPrefix: void 0,
                    narg: void 0,
                    normalize: void 0,
                    string: void 0,
                    number: void 0,
                    __: void 0,
                    key: void 0
                }, options);
                const args = tokenizeArgString(argsInput);
                const inputIsString = 'string' == typeof argsInput;
                const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));
                const configuration = Object.assign({
                    'boolean-negation': true,
                    'camel-case-expansion': true,
                    'combine-arrays': false,
                    'dot-notation': true,
                    'duplicate-arguments-array': true,
                    'flatten-duplicate-arrays': true,
                    'greedy-arrays': true,
                    'halt-at-non-option': false,
                    'nargs-eats-options': false,
                    'negation-prefix': 'no-',
                    'parse-numbers': true,
                    'parse-positional-numbers': true,
                    'populate--': false,
                    'set-placeholder-key': false,
                    'short-option-groups': true,
                    'strip-aliased': false,
                    'strip-dashed': false,
                    'unknown-options-as-args': false
                }, opts.configuration);
                const defaults = Object.assign(Object.create(null), opts.default);
                const configObjects = opts.configObjects || [];
                const envPrefix = opts.envPrefix;
                const notFlagsOption = configuration['populate--'];
                const notFlagsArgv = notFlagsOption ? '--' : '_';
                const newAliases = Object.create(null);
                const defaulted = Object.create(null);
                const __ = opts.__ || mixin.format;
                const flags = {
                    aliases: Object.create(null),
                    arrays: Object.create(null),
                    bools: Object.create(null),
                    strings: Object.create(null),
                    numbers: Object.create(null),
                    counts: Object.create(null),
                    normalize: Object.create(null),
                    configs: Object.create(null),
                    nargs: Object.create(null),
                    coercions: Object.create(null),
                    keys: []
                };
                const negative = /^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/;
                const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');
                [].concat(opts.array || []).filter(Boolean).forEach(function(opt) {
                    const key = 'object' == typeof opt ? opt.key : opt;
                    const assignment = Object.keys(opt).map(function(key) {
                        const arrayFlagKeys = {
                            boolean: 'bools',
                            string: 'strings',
                            number: 'numbers'
                        };
                        return arrayFlagKeys[key];
                    }).filter(Boolean).pop();
                    if (assignment) flags[assignment][key] = true;
                    flags.arrays[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.boolean || []).filter(Boolean).forEach(function(key) {
                    flags.bools[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.string || []).filter(Boolean).forEach(function(key) {
                    flags.strings[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.number || []).filter(Boolean).forEach(function(key) {
                    flags.numbers[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.count || []).filter(Boolean).forEach(function(key) {
                    flags.counts[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.normalize || []).filter(Boolean).forEach(function(key) {
                    flags.normalize[key] = true;
                    flags.keys.push(key);
                });
                if ('object' == typeof opts.narg) Object.entries(opts.narg).forEach(([key, value])=>{
                    if ('number' == typeof value) {
                        flags.nargs[key] = value;
                        flags.keys.push(key);
                    }
                });
                if ('object' == typeof opts.coerce) Object.entries(opts.coerce).forEach(([key, value])=>{
                    if ('function' == typeof value) {
                        flags.coercions[key] = value;
                        flags.keys.push(key);
                    }
                });
                if (void 0 !== opts.config) {
                    if (Array.isArray(opts.config) || 'string' == typeof opts.config) [].concat(opts.config).filter(Boolean).forEach(function(key) {
                        flags.configs[key] = true;
                    });
                    else if ('object' == typeof opts.config) Object.entries(opts.config).forEach(([key, value])=>{
                        if ('boolean' == typeof value || 'function' == typeof value) flags.configs[key] = value;
                    });
                }
                extendAliases(opts.key, aliases, opts.default, flags.arrays);
                Object.keys(defaults).forEach(function(key) {
                    (flags.aliases[key] || []).forEach(function(alias) {
                        defaults[alias] = defaults[key];
                    });
                });
                let error = null;
                checkConfiguration();
                let notFlags = [];
                const argv = Object.assign(Object.create(null), {
                    _: []
                });
                const argvReturn = {};
                for(let i = 0; i < args.length; i++){
                    const arg = args[i];
                    const truncatedArg = arg.replace(/^-{3,}/, '---');
                    let broken;
                    let key;
                    let letters;
                    let m;
                    let next;
                    let value;
                    if ('--' !== arg && /^-/.test(arg) && isUnknownOptionAsArg(arg)) pushPositional(arg);
                    else if (truncatedArg.match(/^---+(=|$)/)) {
                        pushPositional(arg);
                        continue;
                    } else if (arg.match(/^--.+=/) || !configuration['short-option-groups'] && arg.match(/^-.+=/)) {
                        m = arg.match(/^--?([^=]+)=([\s\S]*)$/);
                        if (null !== m && Array.isArray(m) && m.length >= 3) if (checkAllAliases(m[1], flags.arrays)) i = eatArray(i, m[1], args, m[2]);
                        else if (false !== checkAllAliases(m[1], flags.nargs)) i = eatNargs(i, m[1], args, m[2]);
                        else setArg(m[1], m[2], true);
                    } else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {
                        m = arg.match(negatedBoolean);
                        if (null !== m && Array.isArray(m) && m.length >= 2) {
                            key = m[1];
                            setArg(key, checkAllAliases(key, flags.arrays) ? [
                                false
                            ] : false);
                        }
                    } else if (arg.match(/^--.+/) || !configuration['short-option-groups'] && arg.match(/^-[^-]+/)) {
                        m = arg.match(/^--?(.+)/);
                        if (null !== m && Array.isArray(m) && m.length >= 2) {
                            key = m[1];
                            if (checkAllAliases(key, flags.arrays)) i = eatArray(i, key, args);
                            else if (false !== checkAllAliases(key, flags.nargs)) i = eatNargs(i, key, args);
                            else {
                                next = args[i + 1];
                                if (void 0 !== next && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                                    setArg(key, next);
                                    i++;
                                } else if (/^(true|false)$/.test(next)) {
                                    setArg(key, next);
                                    i++;
                                } else setArg(key, defaultValue(key));
                            }
                        }
                    } else if (arg.match(/^-.\..+=/)) {
                        m = arg.match(/^-([^=]+)=([\s\S]*)$/);
                        if (null !== m && Array.isArray(m) && m.length >= 3) setArg(m[1], m[2]);
                    } else if (arg.match(/^-.\..+/) && !arg.match(negative)) {
                        next = args[i + 1];
                        m = arg.match(/^-(.\..+)/);
                        if (null !== m && Array.isArray(m) && m.length >= 2) {
                            key = m[1];
                            if (void 0 === next || next.match(/^-/) || checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) setArg(key, defaultValue(key));
                            else {
                                setArg(key, next);
                                i++;
                            }
                        }
                    } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
                        letters = arg.slice(1, -1).split('');
                        broken = false;
                        for(let j = 0; j < letters.length; j++){
                            next = arg.slice(j + 2);
                            if (letters[j + 1] && '=' === letters[j + 1]) {
                                value = arg.slice(j + 3);
                                key = letters[j];
                                if (checkAllAliases(key, flags.arrays)) i = eatArray(i, key, args, value);
                                else if (false !== checkAllAliases(key, flags.nargs)) i = eatNargs(i, key, args, value);
                                else setArg(key, value);
                                broken = true;
                                break;
                            }
                            if ('-' === next) {
                                setArg(letters[j], next);
                                continue;
                            }
                            if (/[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) && false === checkAllAliases(next, flags.bools)) {
                                setArg(letters[j], next);
                                broken = true;
                                break;
                            }
                            if (letters[j + 1] && letters[j + 1].match(/\W/)) {
                                setArg(letters[j], next);
                                broken = true;
                                break;
                            }
                            setArg(letters[j], defaultValue(letters[j]));
                        }
                        key = arg.slice(-1)[0];
                        if (!broken && '-' !== key) if (checkAllAliases(key, flags.arrays)) i = eatArray(i, key, args);
                        else if (false !== checkAllAliases(key, flags.nargs)) i = eatNargs(i, key, args);
                        else {
                            next = args[i + 1];
                            if (void 0 !== next && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                                setArg(key, next);
                                i++;
                            } else if (/^(true|false)$/.test(next)) {
                                setArg(key, next);
                                i++;
                            } else setArg(key, defaultValue(key));
                        }
                    } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {
                        key = arg.slice(1);
                        setArg(key, defaultValue(key));
                    } else if ('--' === arg) {
                        notFlags = args.slice(i + 1);
                        break;
                    } else if (configuration['halt-at-non-option']) {
                        notFlags = args.slice(i);
                        break;
                    } else pushPositional(arg);
                }
                applyEnvVars(argv, true);
                applyEnvVars(argv, false);
                setConfig(argv);
                setConfigObjects();
                applyDefaultsAndAliases(argv, flags.aliases, defaults, true);
                applyCoercions(argv);
                if (configuration['set-placeholder-key']) setPlaceholderKeys(argv);
                Object.keys(flags.counts).forEach(function(key) {
                    if (!hasKey(argv, key.split('.'))) setArg(key, 0);
                });
                if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = [];
                notFlags.forEach(function(key) {
                    argv[notFlagsArgv].push(key);
                });
                if (configuration['camel-case-expansion'] && configuration['strip-dashed']) Object.keys(argv).filter((key)=>'--' !== key && key.includes('-')).forEach((key)=>{
                    delete argv[key];
                });
                if (configuration['strip-aliased']) [].concat(...Object.keys(aliases).map((k)=>aliases[k])).forEach((alias)=>{
                    if (configuration['camel-case-expansion'] && alias.includes('-')) delete argv[alias.split('.').map((prop)=>camelCase(prop)).join('.')];
                    delete argv[alias];
                });
                function pushPositional(arg) {
                    const maybeCoercedNumber = maybeCoerceNumber('_', arg);
                    if ('string' == typeof maybeCoercedNumber || 'number' == typeof maybeCoercedNumber) argv._.push(maybeCoercedNumber);
                }
                function eatNargs(i, key, args, argAfterEqualSign) {
                    let ii;
                    let toEat = checkAllAliases(key, flags.nargs);
                    toEat = 'number' != typeof toEat || isNaN(toEat) ? 1 : toEat;
                    if (0 === toEat) {
                        if (!isUndefined(argAfterEqualSign)) error = Error(__('Argument unexpected for: %s', key));
                        setArg(key, defaultValue(key));
                        return i;
                    }
                    let available = isUndefined(argAfterEqualSign) ? 0 : 1;
                    if (configuration['nargs-eats-options']) {
                        if (args.length - (i + 1) + available < toEat) error = Error(__('Not enough arguments following: %s', key));
                        available = toEat;
                    } else {
                        for(ii = i + 1; ii < args.length; ii++)if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii])) available++;
                        else break;
                        if (available < toEat) error = Error(__('Not enough arguments following: %s', key));
                    }
                    let consumed = Math.min(available, toEat);
                    if (!isUndefined(argAfterEqualSign) && consumed > 0) {
                        setArg(key, argAfterEqualSign);
                        consumed--;
                    }
                    for(ii = i + 1; ii < consumed + i + 1; ii++)setArg(key, args[ii]);
                    return i + consumed;
                }
                function eatArray(i, key, args, argAfterEqualSign) {
                    let argsToSet = [];
                    let next = argAfterEqualSign || args[i + 1];
                    const nargsCount = checkAllAliases(key, flags.nargs);
                    if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) argsToSet.push(true);
                    else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {
                        if (void 0 !== defaults[key]) {
                            const defVal = defaults[key];
                            argsToSet = Array.isArray(defVal) ? defVal : [
                                defVal
                            ];
                        }
                    } else {
                        if (!isUndefined(argAfterEqualSign)) argsToSet.push(processValue(key, argAfterEqualSign, true));
                        for(let ii = i + 1; ii < args.length; ii++){
                            if (!configuration['greedy-arrays'] && argsToSet.length > 0 || nargsCount && 'number' == typeof nargsCount && argsToSet.length >= nargsCount) break;
                            next = args[ii];
                            if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) break;
                            i = ii;
                            argsToSet.push(processValue(key, next, inputIsString));
                        }
                    }
                    if ('number' == typeof nargsCount && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && 0 === argsToSet.length)) error = Error(__('Not enough arguments following: %s', key));
                    setArg(key, argsToSet);
                    return i;
                }
                function setArg(key, val, shouldStripQuotes = inputIsString) {
                    if (/-/.test(key) && configuration['camel-case-expansion']) {
                        const alias = key.split('.').map(function(prop) {
                            return camelCase(prop);
                        }).join('.');
                        addNewAlias(key, alias);
                    }
                    const value = processValue(key, val, shouldStripQuotes);
                    const splitKey = key.split('.');
                    setKey(argv, splitKey, value);
                    if (flags.aliases[key]) flags.aliases[key].forEach(function(x) {
                        const keyProperties = x.split('.');
                        setKey(argv, keyProperties, value);
                    });
                    if (splitKey.length > 1 && configuration['dot-notation']) (flags.aliases[splitKey[0]] || []).forEach(function(x) {
                        let keyProperties = x.split('.');
                        const a = [].concat(splitKey);
                        a.shift();
                        keyProperties = keyProperties.concat(a);
                        if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) setKey(argv, keyProperties, value);
                    });
                    if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {
                        const keys = [
                            key
                        ].concat(flags.aliases[key] || []);
                        keys.forEach(function(key) {
                            Object.defineProperty(argvReturn, key, {
                                enumerable: true,
                                get () {
                                    return val;
                                },
                                set (value) {
                                    val = 'string' == typeof value ? mixin.normalize(value) : value;
                                }
                            });
                        });
                    }
                }
                function addNewAlias(key, alias) {
                    if (!(flags.aliases[key] && flags.aliases[key].length)) {
                        flags.aliases[key] = [
                            alias
                        ];
                        newAliases[alias] = true;
                    }
                    if (!(flags.aliases[alias] && flags.aliases[alias].length)) addNewAlias(alias, key);
                }
                function processValue(key, val, shouldStripQuotes) {
                    if (shouldStripQuotes) val = stripQuotes(val);
                    if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {
                        if ('string' == typeof val) val = 'true' === val;
                    }
                    let value = Array.isArray(val) ? val.map(function(v) {
                        return maybeCoerceNumber(key, v);
                    }) : maybeCoerceNumber(key, val);
                    if (checkAllAliases(key, flags.counts) && (isUndefined(value) || 'boolean' == typeof value)) value = increment();
                    if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) value = Array.isArray(val) ? val.map((val)=>mixin.normalize(val)) : mixin.normalize(val);
                    return value;
                }
                function maybeCoerceNumber(key, value) {
                    if (!configuration['parse-positional-numbers'] && '_' === key) return value;
                    if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {
                        const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));
                        if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) value = Number(value);
                    }
                    return value;
                }
                function setConfig(argv) {
                    const configLookup = Object.create(null);
                    applyDefaultsAndAliases(configLookup, flags.aliases, defaults);
                    Object.keys(flags.configs).forEach(function(configKey) {
                        const configPath = argv[configKey] || configLookup[configKey];
                        if (configPath) try {
                            let config = null;
                            const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);
                            const resolveConfig = flags.configs[configKey];
                            if ('function' == typeof resolveConfig) {
                                try {
                                    config = resolveConfig(resolvedConfigPath);
                                } catch (e1) {
                                    config = e1;
                                }
                                if (config instanceof Error) {
                                    error = config;
                                    return;
                                }
                            } else config = mixin.require(resolvedConfigPath);
                            setConfigObject(config);
                        } catch (ex) {
                            if ('PermissionDenied' === ex.name) error = ex;
                            else if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath));
                        }
                    });
                }
                function setConfigObject(config, prev) {
                    Object.keys(config).forEach(function(key) {
                        const value = config[key];
                        const fullKey = prev ? prev + '.' + key : key;
                        if ('object' == typeof value && null !== value && !Array.isArray(value) && configuration['dot-notation']) setConfigObject(value, fullKey);
                        else if (!hasKey(argv, fullKey.split('.')) || checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays']) setArg(fullKey, value);
                    });
                }
                function setConfigObjects() {
                    if (void 0 !== configObjects) configObjects.forEach(function(configObject) {
                        setConfigObject(configObject);
                    });
                }
                function applyEnvVars(argv, configOnly) {
                    if (void 0 === envPrefix) return;
                    const prefix = 'string' == typeof envPrefix ? envPrefix : '';
                    const env = mixin.env();
                    Object.keys(env).forEach(function(envVar) {
                        if ('' === prefix || 0 === envVar.lastIndexOf(prefix, 0)) {
                            const keys = envVar.split('__').map(function(key, i) {
                                if (0 === i) key = key.substring(prefix.length);
                                return camelCase(key);
                            });
                            if ((configOnly && flags.configs[keys.join('.')] || !configOnly) && !hasKey(argv, keys)) setArg(keys.join('.'), env[envVar]);
                        }
                    });
                }
                function applyCoercions(argv) {
                    let coerce;
                    const applied = new Set();
                    Object.keys(argv).forEach(function(key) {
                        if (!applied.has(key)) {
                            coerce = checkAllAliases(key, flags.coercions);
                            if ('function' == typeof coerce) try {
                                const value = maybeCoerceNumber(key, coerce(argv[key]));
                                [].concat(flags.aliases[key] || [], key).forEach((ali)=>{
                                    applied.add(ali);
                                    argv[ali] = value;
                                });
                            } catch (err) {
                                error = err;
                            }
                        }
                    });
                }
                function setPlaceholderKeys(argv) {
                    flags.keys.forEach((key)=>{
                        if (~key.indexOf('.')) return;
                        if (void 0 === argv[key]) argv[key] = void 0;
                    });
                    return argv;
                }
                function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {
                    Object.keys(defaults).forEach(function(key) {
                        if (!hasKey(obj, key.split('.'))) {
                            setKey(obj, key.split('.'), defaults[key]);
                            if (canLog) defaulted[key] = true;
                            (aliases[key] || []).forEach(function(x) {
                                if (hasKey(obj, x.split('.'))) return;
                                setKey(obj, x.split('.'), defaults[key]);
                            });
                        }
                    });
                }
                function hasKey(obj, keys) {
                    let o = obj;
                    if (!configuration['dot-notation']) keys = [
                        keys.join('.')
                    ];
                    keys.slice(0, -1).forEach(function(key) {
                        o = o[key] || {};
                    });
                    const key = keys[keys.length - 1];
                    if ('object' != typeof o) return false;
                    return key in o;
                }
                function setKey(obj, keys, value) {
                    let o = obj;
                    if (!configuration['dot-notation']) keys = [
                        keys.join('.')
                    ];
                    keys.slice(0, -1).forEach(function(key) {
                        key = sanitizeKey(key);
                        if ('object' == typeof o && void 0 === o[key]) o[key] = {};
                        if ('object' != typeof o[key] || Array.isArray(o[key])) {
                            if (Array.isArray(o[key])) o[key].push({});
                            else o[key] = [
                                o[key],
                                {}
                            ];
                            o = o[key][o[key].length - 1];
                        } else o = o[key];
                    });
                    const key = sanitizeKey(keys[keys.length - 1]);
                    const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);
                    const isValueArray = Array.isArray(value);
                    let duplicate = configuration['duplicate-arguments-array'];
                    if (!duplicate && checkAllAliases(key, flags.nargs)) {
                        duplicate = true;
                        if (!isUndefined(o[key]) && 1 === flags.nargs[key] || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) o[key] = void 0;
                    }
                    if (value === increment()) o[key] = increment(o[key]);
                    else if (Array.isArray(o[key])) if (duplicate && isTypeArray && isValueArray) o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [
                        o[key]
                    ]).concat([
                        value
                    ]);
                    else if (duplicate || Boolean(isTypeArray) !== Boolean(isValueArray)) o[key] = o[key].concat([
                        value
                    ]);
                    else o[key] = value;
                    else if (void 0 === o[key] && isTypeArray) o[key] = isValueArray ? value : [
                        value
                    ];
                    else if (duplicate && !(void 0 === o[key] || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) o[key] = [
                        o[key],
                        value
                    ];
                    else o[key] = value;
                }
                function extendAliases(...args) {
                    args.forEach(function(obj) {
                        Object.keys(obj || {}).forEach(function(key) {
                            if (flags.aliases[key]) return;
                            flags.aliases[key] = [].concat(aliases[key] || []);
                            flags.aliases[key].concat(key).forEach(function(x) {
                                if (/-/.test(x) && configuration['camel-case-expansion']) {
                                    const c = camelCase(x);
                                    if (c !== key && -1 === flags.aliases[key].indexOf(c)) {
                                        flags.aliases[key].push(c);
                                        newAliases[c] = true;
                                    }
                                }
                            });
                            flags.aliases[key].concat(key).forEach(function(x) {
                                if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {
                                    const c = decamelize(x, '-');
                                    if (c !== key && -1 === flags.aliases[key].indexOf(c)) {
                                        flags.aliases[key].push(c);
                                        newAliases[c] = true;
                                    }
                                }
                            });
                            flags.aliases[key].forEach(function(x) {
                                flags.aliases[x] = [
                                    key
                                ].concat(flags.aliases[key].filter(function(y) {
                                    return x !== y;
                                }));
                            });
                        });
                    });
                }
                function checkAllAliases(key, flag) {
                    const toCheck = [].concat(flags.aliases[key] || [], key);
                    const keys = Object.keys(flag);
                    const setAlias = toCheck.find((key)=>keys.includes(key));
                    return setAlias ? flag[setAlias] : false;
                }
                function hasAnyFlag(key) {
                    const flagsKeys = Object.keys(flags);
                    const toCheck = [].concat(flagsKeys.map((k)=>flags[k]));
                    return toCheck.some(function(flag) {
                        return Array.isArray(flag) ? flag.includes(key) : flag[key];
                    });
                }
                function hasFlagsMatching(arg, ...patterns) {
                    const toCheck = [].concat(...patterns);
                    return toCheck.some(function(pattern) {
                        const match = arg.match(pattern);
                        return match && hasAnyFlag(match[1]);
                    });
                }
                function hasAllShortFlags(arg) {
                    if (arg.match(negative) || !arg.match(/^-[^-]+/)) return false;
                    let hasAllFlags = true;
                    let next;
                    const letters = arg.slice(1).split('');
                    for(let j = 0; j < letters.length; j++){
                        next = arg.slice(j + 2);
                        if (!hasAnyFlag(letters[j])) {
                            hasAllFlags = false;
                            break;
                        }
                        if (letters[j + 1] && '=' === letters[j + 1] || '-' === next || /[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\W/)) break;
                    }
                    return hasAllFlags;
                }
                function isUnknownOptionAsArg(arg) {
                    return configuration['unknown-options-as-args'] && isUnknownOption(arg);
                }
                function isUnknownOption(arg) {
                    arg = arg.replace(/^-{3,}/, '--');
                    if (arg.match(negative)) return false;
                    if (hasAllShortFlags(arg)) return false;
                    const flagWithEquals = /^-+([^=]+?)=[\s\S]*$/;
                    const normalFlag = /^-+([^=]+?)$/;
                    const flagEndingInHyphen = /^-+([^=]+?)-$/;
                    const flagEndingInDigits = /^-+([^=]+?\d+)$/;
                    const flagEndingInNonWordCharacters = /^-+([^=]+?)\W+.*$/;
                    return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);
                }
                function defaultValue(key) {
                    if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) return defaults[key];
                    return defaultForType(guessType(key));
                }
                function defaultForType(type) {
                    const def = {
                        [yargs_parser_types_DefaultValuesForTypeKey.BOOLEAN]: true,
                        [yargs_parser_types_DefaultValuesForTypeKey.STRING]: '',
                        [yargs_parser_types_DefaultValuesForTypeKey.NUMBER]: void 0,
                        [yargs_parser_types_DefaultValuesForTypeKey.ARRAY]: []
                    };
                    return def[type];
                }
                function guessType(key) {
                    let type = yargs_parser_types_DefaultValuesForTypeKey.BOOLEAN;
                    if (checkAllAliases(key, flags.strings)) type = yargs_parser_types_DefaultValuesForTypeKey.STRING;
                    else if (checkAllAliases(key, flags.numbers)) type = yargs_parser_types_DefaultValuesForTypeKey.NUMBER;
                    else if (checkAllAliases(key, flags.bools)) type = yargs_parser_types_DefaultValuesForTypeKey.BOOLEAN;
                    else if (checkAllAliases(key, flags.arrays)) type = yargs_parser_types_DefaultValuesForTypeKey.ARRAY;
                    return type;
                }
                function isUndefined(num) {
                    return void 0 === num;
                }
                function checkConfiguration() {
                    Object.keys(flags.counts).find((key)=>{
                        if (checkAllAliases(key, flags.arrays)) {
                            error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));
                            return true;
                        }
                        if (checkAllAliases(key, flags.nargs)) {
                            error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));
                            return true;
                        }
                        return false;
                    });
                }
                return {
                    aliases: Object.assign({}, flags.aliases),
                    argv: Object.assign(argvReturn, argv),
                    configuration: configuration,
                    defaulted: Object.assign({}, defaulted),
                    error: error,
                    newAliases: Object.assign({}, newAliases)
                };
            }
        }
        function combineAliases(aliases) {
            const aliasArrays = [];
            const combined = Object.create(null);
            let change = true;
            Object.keys(aliases).forEach(function(key) {
                aliasArrays.push([].concat(aliases[key], key));
            });
            while(change){
                change = false;
                for(let i = 0; i < aliasArrays.length; i++)for(let ii = i + 1; ii < aliasArrays.length; ii++){
                    const intersect = aliasArrays[i].filter(function(v) {
                        return -1 !== aliasArrays[ii].indexOf(v);
                    });
                    if (intersect.length) {
                        aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);
                        aliasArrays.splice(ii, 1);
                        change = true;
                        break;
                    }
                }
            }
            aliasArrays.forEach(function(aliasArray) {
                aliasArray = aliasArray.filter(function(v, i, self) {
                    return self.indexOf(v) === i;
                });
                const lastAlias = aliasArray.pop();
                if (void 0 !== lastAlias && 'string' == typeof lastAlias) combined[lastAlias] = aliasArray;
            });
            return combined;
        }
        function increment(orig) {
            return void 0 !== orig ? orig + 1 : 1;
        }
        function sanitizeKey(key) {
            if ('__proto__' === key) return '___proto___';
            return key;
        }
        function stripQuotes(val) {
            return 'string' == typeof val && ("'" === val[0] || '"' === val[0]) && val[val.length - 1] === val[0] ? val.substring(1, val.length - 1) : val;
        }
        /**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 * CJS and ESM environments.
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */ var lib_a, _b, _c;
        const minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;
        const nodeVersion = null != (_b = null == (lib_a = null == process ? void 0 : process.versions) ? void 0 : lib_a.node) ? _b : null == (_c = null == process ? void 0 : process.version) ? void 0 : _c.slice(1);
        if (nodeVersion) {
            const major = Number(nodeVersion.match(/^([^.]+)/)[1]);
            if (major < minNodeVersion) throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);
        }
        const lib_env = process ? process.env : {};
        const parser = new YargsParser({
            cwd: process.cwd,
            env: ()=>lib_env,
            format: external_util_.format,
            normalize: external_path_.normalize,
            resolve: external_path_.resolve,
            require: (path)=>{
                if ('undefined' != typeof require) return require(path);
                if (path.match(/\.json$/)) return JSON.parse((0, external_fs_.readFileSync)(path, 'utf8'));
                throw Error('only .json config files are supported in ESM');
            }
        });
        const yargsParser = function(args, opts) {
            const result = parser.parse(args.slice(), opts);
            return result.argv;
        };
        yargsParser.detailed = function(args, opts) {
            return parser.parse(args.slice(), opts);
        };
        yargsParser.camelCase = camelCase;
        yargsParser.decamelize = decamelize;
        yargsParser.looksLikeNumber = looksLikeNumber;
        var external_assert_ = __webpack_require__("assert");
        new RegExp("\x1b(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)", 'g');
        const external_url_namespaceObject = require("url");
        const platform_shims_node = {
            fs: {
                readFileSync: external_fs_.readFileSync,
                writeFile: external_fs_.writeFile
            },
            format: external_util_.format,
            resolve: external_path_.resolve,
            exists: (file)=>{
                try {
                    return (0, external_fs_.statSync)(file).isFile();
                } catch (err) {
                    return false;
                }
            }
        };
        let lib_shim;
        class Y18N {
            constructor(opts){
                opts = opts || {};
                this.directory = opts.directory || './locales';
                this.updateFiles = 'boolean' == typeof opts.updateFiles ? opts.updateFiles : true;
                this.locale = opts.locale || 'en';
                this.fallbackToLanguage = 'boolean' == typeof opts.fallbackToLanguage ? opts.fallbackToLanguage : true;
                this.cache = Object.create(null);
                this.writeQueue = [];
            }
            __(...args) {
                if ('string' != typeof arguments[0]) return this._taggedLiteral(arguments[0], ...arguments);
                const str = args.shift();
                let cb = function() {};
                if ('function' == typeof args[args.length - 1]) cb = args.pop();
                cb = cb || function() {};
                if (!this.cache[this.locale]) this._readLocaleFile();
                if (!this.cache[this.locale][str] && this.updateFiles) {
                    this.cache[this.locale][str] = str;
                    this._enqueueWrite({
                        directory: this.directory,
                        locale: this.locale,
                        cb
                    });
                } else cb();
                return lib_shim.format.apply(lib_shim.format, [
                    this.cache[this.locale][str] || str
                ].concat(args));
            }
            __n() {
                const args = Array.prototype.slice.call(arguments);
                const singular = args.shift();
                const plural = args.shift();
                const quantity = args.shift();
                let cb = function() {};
                if ('function' == typeof args[args.length - 1]) cb = args.pop();
                if (!this.cache[this.locale]) this._readLocaleFile();
                let str = 1 === quantity ? singular : plural;
                if (this.cache[this.locale][singular]) {
                    const entry = this.cache[this.locale][singular];
                    str = entry[1 === quantity ? 'one' : 'other'];
                }
                if (!this.cache[this.locale][singular] && this.updateFiles) {
                    this.cache[this.locale][singular] = {
                        one: singular,
                        other: plural
                    };
                    this._enqueueWrite({
                        directory: this.directory,
                        locale: this.locale,
                        cb
                    });
                } else cb();
                const values = [
                    str
                ];
                if (~str.indexOf('%d')) values.push(quantity);
                return lib_shim.format.apply(lib_shim.format, values.concat(args));
            }
            setLocale(locale) {
                this.locale = locale;
            }
            getLocale() {
                return this.locale;
            }
            updateLocale(obj) {
                if (!this.cache[this.locale]) this._readLocaleFile();
                for(const key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) this.cache[this.locale][key] = obj[key];
            }
            _taggedLiteral(parts, ...args) {
                let str = '';
                parts.forEach(function(part, i) {
                    const arg = args[i + 1];
                    str += part;
                    if (void 0 !== arg) str += '%s';
                });
                return this.__.apply(this, [
                    str
                ].concat([].slice.call(args, 1)));
            }
            _enqueueWrite(work) {
                this.writeQueue.push(work);
                if (1 === this.writeQueue.length) this._processWriteQueue();
            }
            _processWriteQueue() {
                const _this = this;
                const work = this.writeQueue[0];
                const directory = work.directory;
                const locale = work.locale;
                const cb = work.cb;
                const languageFile = this._resolveLocaleFile(directory, locale);
                const serializedLocale = JSON.stringify(this.cache[locale], null, 2);
                lib_shim.fs.writeFile(languageFile, serializedLocale, 'utf-8', function(err) {
                    _this.writeQueue.shift();
                    if (_this.writeQueue.length > 0) _this._processWriteQueue();
                    cb(err);
                });
            }
            _readLocaleFile() {
                let localeLookup = {};
                const languageFile = this._resolveLocaleFile(this.directory, this.locale);
                try {
                    if (lib_shim.fs.readFileSync) localeLookup = JSON.parse(lib_shim.fs.readFileSync(languageFile, 'utf-8'));
                } catch (err) {
                    if (err instanceof SyntaxError) err.message = 'syntax error in ' + languageFile;
                    if ('ENOENT' === err.code) localeLookup = {};
                    else throw err;
                }
                this.cache[this.locale] = localeLookup;
            }
            _resolveLocaleFile(directory, locale) {
                let file = lib_shim.resolve(directory, './', locale + '.json');
                if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf('_')) {
                    const languageFile = lib_shim.resolve(directory, './', locale.split('_')[0] + '.json');
                    if (this._fileExistsSync(languageFile)) file = languageFile;
                }
                return file;
            }
            _fileExistsSync(file) {
                return lib_shim.exists(file);
            }
        }
        function lib_y18n(opts, _shim) {
            lib_shim = _shim;
            const y18n = new Y18N(opts);
            return {
                __: y18n.__.bind(y18n),
                __n: y18n.__n.bind(y18n),
                setLocale: y18n.setLocale.bind(y18n),
                getLocale: y18n.getLocale.bind(y18n),
                updateLocale: y18n.updateLocale.bind(y18n),
                locale: y18n.locale
            };
        }
        const y18n_y18n = (opts)=>lib_y18n(opts, platform_shims_node);
        const node_modules_y18n = y18n_y18n;
        let esm_dirname;
        try {
            esm_dirname = (0, external_url_namespaceObject.fileURLToPath)({});
        } catch (e1) {
            esm_dirname = process.cwd();
        }
        const mainFilename = esm_dirname.substring(0, esm_dirname.lastIndexOf('node_modules'));
        external_assert_.notStrictEqual, external_assert_.strictEqual, external_util_.inspect, mainFilename || process.cwd(), external_path_.basename, external_path_.dirname, external_path_.extname, external_path_.relative, external_path_.resolve, process.cwd, process.exit, process.nextTick, void 0 !== process.stdout.columns && process.stdout.columns, external_fs_.readFileSync, node_modules_y18n({
            directory: (0, external_path_.resolve)(esm_dirname, '../../../locales'),
            updateFiles: false
        });
        var build = __webpack_require__("../../node_modules/.pnpm/yargs@17.7.2/node_modules/yargs/build/index.cjs");
        const { applyExtends: yargs_applyExtends, cjsPlatformShim, Parser: yargs_Parser, processArgv, Yargs } = build;
        Yargs.applyExtends = (config, cwd, mergeExtends)=>yargs_applyExtends(config, cwd, mergeExtends, cjsPlatformShim);
        Yargs.hideBin = processArgv.hideBin;
        Yargs.Parser = yargs_Parser;
        const yargs = Yargs;
        /*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */ function isNothing(subject) {
            return null == subject;
        }
        function js_yaml_isObject(subject) {
            return 'object' == typeof subject && null !== subject;
        }
        function toArray(sequence) {
            if (Array.isArray(sequence)) return sequence;
            if (isNothing(sequence)) return [];
            return [
                sequence
            ];
        }
        function js_yaml_extend(target, source) {
            var index, length, key, sourceKeys;
            if (source) {
                sourceKeys = Object.keys(source);
                for(index = 0, length = sourceKeys.length; index < length; index += 1){
                    key = sourceKeys[index];
                    target[key] = source[key];
                }
            }
            return target;
        }
        function repeat(string, count) {
            var result = '', cycle;
            for(cycle = 0; cycle < count; cycle += 1)result += string;
            return result;
        }
        function isNegativeZero(number) {
            return 0 === number && -1 / 0 === 1 / number;
        }
        var isNothing_1 = isNothing;
        var isObject_1 = js_yaml_isObject;
        var toArray_1 = toArray;
        var repeat_1 = repeat;
        var isNegativeZero_1 = isNegativeZero;
        var extend_1 = js_yaml_extend;
        var common = {
            isNothing: isNothing_1,
            isObject: isObject_1,
            toArray: toArray_1,
            repeat: repeat_1,
            isNegativeZero: isNegativeZero_1,
            extend: extend_1
        };
        function formatError(exception, compact) {
            var where = '', message = exception.reason || '(unknown reason)';
            if (!exception.mark) return message;
            if (exception.mark.name) where += 'in "' + exception.mark.name + '" ';
            where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';
            if (!compact && exception.mark.snippet) where += '\n\n' + exception.mark.snippet;
            return message + ' ' + where;
        }
        function YAMLException$1(reason, mark) {
            Error.call(this);
            this.name = 'YAMLException';
            this.reason = reason;
            this.mark = mark;
            this.message = formatError(this, false);
            if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
            else this.stack = new Error().stack || '';
        }
        YAMLException$1.prototype = Object.create(Error.prototype);
        YAMLException$1.prototype.constructor = YAMLException$1;
        YAMLException$1.prototype.toString = function(compact) {
            return this.name + ': ' + formatError(this, compact);
        };
        var js_yaml_exception = YAMLException$1;
        function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
            var head = '';
            var tail = '';
            var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
            if (position - lineStart > maxHalfLength) {
                head = ' ... ';
                lineStart = position - maxHalfLength + head.length;
            }
            if (lineEnd - position > maxHalfLength) {
                tail = ' ...';
                lineEnd = position + maxHalfLength - tail.length;
            }
            return {
                str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
                pos: position - lineStart + head.length
            };
        }
        function padStart(string, max) {
            return common.repeat(' ', max - string.length) + string;
        }
        function makeSnippet(mark, options) {
            options = Object.create(options || null);
            if (!mark.buffer) return null;
            if (!options.maxLength) options.maxLength = 79;
            if ('number' != typeof options.indent) options.indent = 1;
            if ('number' != typeof options.linesBefore) options.linesBefore = 3;
            if ('number' != typeof options.linesAfter) options.linesAfter = 2;
            var re = /\r?\n|\r|\0/g;
            var lineStarts = [
                0
            ];
            var lineEnds = [];
            var match;
            var foundLineNo = -1;
            while(match = re.exec(mark.buffer)){
                lineEnds.push(match.index);
                lineStarts.push(match.index + match[0].length);
                if (mark.position <= match.index && foundLineNo < 0) foundLineNo = lineStarts.length - 2;
            }
            if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
            var result = '', i, line;
            var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
            var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
            for(i = 1; i <= options.linesBefore; i++){
                if (foundLineNo - i < 0) break;
                line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
                result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n' + result;
            }
            line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
            result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
            result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + "^\n";
            for(i = 1; i <= options.linesAfter; i++){
                if (foundLineNo + i >= lineEnds.length) break;
                line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
                result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
            }
            return result.replace(/\n$/, '');
        }
        var snippet = makeSnippet;
        var TYPE_CONSTRUCTOR_OPTIONS = [
            'kind',
            'multi',
            'resolve',
            'construct',
            'instanceOf',
            'predicate',
            'represent',
            'representName',
            'defaultStyle',
            'styleAliases'
        ];
        var YAML_NODE_KINDS = [
            'scalar',
            'sequence',
            'mapping'
        ];
        function compileStyleAliases(map) {
            var result = {};
            if (null !== map) Object.keys(map).forEach(function(style) {
                map[style].forEach(function(alias) {
                    result[String(alias)] = style;
                });
            });
            return result;
        }
        function Type$1(tag, options) {
            options = options || {};
            Object.keys(options).forEach(function(name) {
                if (-1 === TYPE_CONSTRUCTOR_OPTIONS.indexOf(name)) throw new js_yaml_exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
            });
            this.options = options;
            this.tag = tag;
            this.kind = options['kind'] || null;
            this.resolve = options['resolve'] || function() {
                return true;
            };
            this.construct = options['construct'] || function(data) {
                return data;
            };
            this.instanceOf = options['instanceOf'] || null;
            this.predicate = options['predicate'] || null;
            this.represent = options['represent'] || null;
            this.representName = options['representName'] || null;
            this.defaultStyle = options['defaultStyle'] || null;
            this.multi = options['multi'] || false;
            this.styleAliases = compileStyleAliases(options['styleAliases'] || null);
            if (-1 === YAML_NODE_KINDS.indexOf(this.kind)) throw new js_yaml_exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
        }
        var js_yaml_type = Type$1;
        function compileList(schema, name) {
            var result = [];
            schema[name].forEach(function(currentType) {
                var newIndex = result.length;
                result.forEach(function(previousType, previousIndex) {
                    if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) newIndex = previousIndex;
                });
                result[newIndex] = currentType;
            });
            return result;
        }
        function compileMap() {
            var result = {
                scalar: {},
                sequence: {},
                mapping: {},
                fallback: {},
                multi: {
                    scalar: [],
                    sequence: [],
                    mapping: [],
                    fallback: []
                }
            }, index, length;
            function collectType(type) {
                if (type.multi) {
                    result.multi[type.kind].push(type);
                    result.multi['fallback'].push(type);
                } else result[type.kind][type.tag] = result['fallback'][type.tag] = type;
            }
            for(index = 0, length = arguments.length; index < length; index += 1)arguments[index].forEach(collectType);
            return result;
        }
        function Schema$1(definition) {
            return this.extend(definition);
        }
        Schema$1.prototype.extend = function(definition) {
            var implicit = [];
            var explicit = [];
            if (definition instanceof js_yaml_type) explicit.push(definition);
            else if (Array.isArray(definition)) explicit = explicit.concat(definition);
            else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
                if (definition.implicit) implicit = implicit.concat(definition.implicit);
                if (definition.explicit) explicit = explicit.concat(definition.explicit);
            } else throw new js_yaml_exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
            implicit.forEach(function(type$1) {
                if (!(type$1 instanceof js_yaml_type)) throw new js_yaml_exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
                if (type$1.loadKind && 'scalar' !== type$1.loadKind) throw new js_yaml_exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
                if (type$1.multi) throw new js_yaml_exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
            });
            explicit.forEach(function(type$1) {
                if (!(type$1 instanceof js_yaml_type)) throw new js_yaml_exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
            });
            var result = Object.create(Schema$1.prototype);
            result.implicit = (this.implicit || []).concat(implicit);
            result.explicit = (this.explicit || []).concat(explicit);
            result.compiledImplicit = compileList(result, 'implicit');
            result.compiledExplicit = compileList(result, 'explicit');
            result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
            return result;
        };
        var js_yaml_schema = Schema$1;
        var js_yaml_str = new js_yaml_type('tag:yaml.org,2002:str', {
            kind: 'scalar',
            construct: function(data) {
                return null !== data ? data : '';
            }
        });
        var seq = new js_yaml_type('tag:yaml.org,2002:seq', {
            kind: 'sequence',
            construct: function(data) {
                return null !== data ? data : [];
            }
        });
        var js_yaml_map = new js_yaml_type('tag:yaml.org,2002:map', {
            kind: 'mapping',
            construct: function(data) {
                return null !== data ? data : {};
            }
        });
        var failsafe = new js_yaml_schema({
            explicit: [
                js_yaml_str,
                seq,
                js_yaml_map
            ]
        });
        function resolveYamlNull(data) {
            if (null === data) return true;
            var max = data.length;
            return 1 === max && '~' === data || 4 === max && ('null' === data || 'Null' === data || 'NULL' === data);
        }
        function constructYamlNull() {
            return null;
        }
        function isNull(object) {
            return null === object;
        }
        var _null = new js_yaml_type('tag:yaml.org,2002:null', {
            kind: 'scalar',
            resolve: resolveYamlNull,
            construct: constructYamlNull,
            predicate: isNull,
            represent: {
                canonical: function() {
                    return '~';
                },
                lowercase: function() {
                    return 'null';
                },
                uppercase: function() {
                    return 'NULL';
                },
                camelcase: function() {
                    return 'Null';
                },
                empty: function() {
                    return '';
                }
            },
            defaultStyle: 'lowercase'
        });
        function resolveYamlBoolean(data) {
            if (null === data) return false;
            var max = data.length;
            return 4 === max && ('true' === data || 'True' === data || 'TRUE' === data) || 5 === max && ('false' === data || 'False' === data || 'FALSE' === data);
        }
        function constructYamlBoolean(data) {
            return 'true' === data || 'True' === data || 'TRUE' === data;
        }
        function isBoolean(object) {
            return '[object Boolean]' === Object.prototype.toString.call(object);
        }
        var bool = new js_yaml_type('tag:yaml.org,2002:bool', {
            kind: 'scalar',
            resolve: resolveYamlBoolean,
            construct: constructYamlBoolean,
            predicate: isBoolean,
            represent: {
                lowercase: function(object) {
                    return object ? 'true' : 'false';
                },
                uppercase: function(object) {
                    return object ? 'TRUE' : 'FALSE';
                },
                camelcase: function(object) {
                    return object ? 'True' : 'False';
                }
            },
            defaultStyle: 'lowercase'
        });
        function isHexCode(c) {
            return 0x30 <= c && c <= 0x39 || 0x41 <= c && c <= 0x46 || 0x61 <= c && c <= 0x66;
        }
        function isOctCode(c) {
            return 0x30 <= c && c <= 0x37;
        }
        function isDecCode(c) {
            return 0x30 <= c && c <= 0x39;
        }
        function resolveYamlInteger(data) {
            if (null === data) return false;
            var max = data.length, index = 0, hasDigits = false, ch;
            if (!max) return false;
            ch = data[index];
            if ('-' === ch || '+' === ch) ch = data[++index];
            if ('0' === ch) {
                if (index + 1 === max) return true;
                ch = data[++index];
                if ('b' === ch) {
                    index++;
                    for(; index < max; index++){
                        ch = data[index];
                        if ('_' !== ch) {
                            if ('0' !== ch && '1' !== ch) return false;
                            hasDigits = true;
                        }
                    }
                    return hasDigits && '_' !== ch;
                }
                if ('x' === ch) {
                    index++;
                    for(; index < max; index++){
                        ch = data[index];
                        if ('_' !== ch) {
                            if (!isHexCode(data.charCodeAt(index))) return false;
                            hasDigits = true;
                        }
                    }
                    return hasDigits && '_' !== ch;
                }
                if ('o' === ch) {
                    index++;
                    for(; index < max; index++){
                        ch = data[index];
                        if ('_' !== ch) {
                            if (!isOctCode(data.charCodeAt(index))) return false;
                            hasDigits = true;
                        }
                    }
                    return hasDigits && '_' !== ch;
                }
            }
            if ('_' === ch) return false;
            for(; index < max; index++){
                ch = data[index];
                if ('_' !== ch) {
                    if (!isDecCode(data.charCodeAt(index))) return false;
                    hasDigits = true;
                }
            }
            if (!hasDigits || '_' === ch) return false;
            return true;
        }
        function constructYamlInteger(data) {
            var value = data, sign = 1, ch;
            if (-1 !== value.indexOf('_')) value = value.replace(/_/g, '');
            ch = value[0];
            if ('-' === ch || '+' === ch) {
                if ('-' === ch) sign = -1;
                value = value.slice(1);
                ch = value[0];
            }
            if ('0' === value) return 0;
            if ('0' === ch) {
                if ('b' === value[1]) return sign * parseInt(value.slice(2), 2);
                if ('x' === value[1]) return sign * parseInt(value.slice(2), 16);
                if ('o' === value[1]) return sign * parseInt(value.slice(2), 8);
            }
            return sign * parseInt(value, 10);
        }
        function isInteger(object) {
            return '[object Number]' === Object.prototype.toString.call(object) && object % 1 === 0 && !common.isNegativeZero(object);
        }
        var js_yaml_int = new js_yaml_type('tag:yaml.org,2002:int', {
            kind: 'scalar',
            resolve: resolveYamlInteger,
            construct: constructYamlInteger,
            predicate: isInteger,
            represent: {
                binary: function(obj) {
                    return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
                },
                octal: function(obj) {
                    return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);
                },
                decimal: function(obj) {
                    return obj.toString(10);
                },
                hexadecimal: function(obj) {
                    return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
                }
            },
            defaultStyle: 'decimal',
            styleAliases: {
                binary: [
                    2,
                    'bin'
                ],
                octal: [
                    8,
                    'oct'
                ],
                decimal: [
                    10,
                    'dec'
                ],
                hexadecimal: [
                    16,
                    'hex'
                ]
            }
        });
        var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
        function resolveYamlFloat(data) {
            if (null === data) return false;
            if (!YAML_FLOAT_PATTERN.test(data) || '_' === data[data.length - 1]) return false;
            return true;
        }
        function constructYamlFloat(data) {
            var value, sign;
            value = data.replace(/_/g, '').toLowerCase();
            sign = '-' === value[0] ? -1 : 1;
            if ('+-'.indexOf(value[0]) >= 0) value = value.slice(1);
            if ('.inf' === value) return 1 === sign ? 1 / 0 : -1 / 0;
            if ('.nan' === value) return NaN;
            return sign * parseFloat(value, 10);
        }
        var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
        function representYamlFloat(object, style) {
            var res;
            if (isNaN(object)) switch(style){
                case 'lowercase':
                    return '.nan';
                case 'uppercase':
                    return '.NAN';
                case 'camelcase':
                    return '.NaN';
            }
            else if (1 / 0 === object) switch(style){
                case 'lowercase':
                    return '.inf';
                case 'uppercase':
                    return '.INF';
                case 'camelcase':
                    return '.Inf';
            }
            else if (-1 / 0 === object) switch(style){
                case 'lowercase':
                    return '-.inf';
                case 'uppercase':
                    return '-.INF';
                case 'camelcase':
                    return '-.Inf';
            }
            else if (common.isNegativeZero(object)) return '-0.0';
            res = object.toString(10);
            return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
        }
        function isFloat(object) {
            return '[object Number]' === Object.prototype.toString.call(object) && (object % 1 !== 0 || common.isNegativeZero(object));
        }
        var js_yaml_float = new js_yaml_type('tag:yaml.org,2002:float', {
            kind: 'scalar',
            resolve: resolveYamlFloat,
            construct: constructYamlFloat,
            predicate: isFloat,
            represent: representYamlFloat,
            defaultStyle: 'lowercase'
        });
        var json = failsafe.extend({
            implicit: [
                _null,
                bool,
                js_yaml_int,
                js_yaml_float
            ]
        });
        var core = json;
        var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
        var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
        function resolveYamlTimestamp(data) {
            if (null === data) return false;
            if (null !== YAML_DATE_REGEXP.exec(data)) return true;
            if (null !== YAML_TIMESTAMP_REGEXP.exec(data)) return true;
            return false;
        }
        function constructYamlTimestamp(data) {
            var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
            match = YAML_DATE_REGEXP.exec(data);
            if (null === match) match = YAML_TIMESTAMP_REGEXP.exec(data);
            if (null === match) throw new Error('Date resolve error');
            year = +match[1];
            month = match[2] - 1;
            day = +match[3];
            if (!match[4]) return new Date(Date.UTC(year, month, day));
            hour = +match[4];
            minute = +match[5];
            second = +match[6];
            if (match[7]) {
                fraction = match[7].slice(0, 3);
                while(fraction.length < 3)fraction += '0';
                fraction *= 1;
            }
            if (match[9]) {
                tz_hour = +match[10];
                tz_minute = +(match[11] || 0);
                delta = (60 * tz_hour + tz_minute) * 60000;
                if ('-' === match[9]) delta = -delta;
            }
            date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
            if (delta) date.setTime(date.getTime() - delta);
            return date;
        }
        function representYamlTimestamp(object) {
            return object.toISOString();
        }
        var js_yaml_timestamp = new js_yaml_type('tag:yaml.org,2002:timestamp', {
            kind: 'scalar',
            resolve: resolveYamlTimestamp,
            construct: constructYamlTimestamp,
            instanceOf: Date,
            represent: representYamlTimestamp
        });
        function resolveYamlMerge(data) {
            return '<<' === data || null === data;
        }
        var merge = new js_yaml_type('tag:yaml.org,2002:merge', {
            kind: 'scalar',
            resolve: resolveYamlMerge
        });
        var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';
        function resolveYamlBinary(data) {
            if (null === data) return false;
            var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
            for(idx = 0; idx < max; idx++){
                code = map.indexOf(data.charAt(idx));
                if (!(code > 64)) {
                    if (code < 0) return false;
                    bitlen += 6;
                }
            }
            return bitlen % 8 === 0;
        }
        function constructYamlBinary(data) {
            var idx, tailbits, input = data.replace(/[\r\n=]/g, ''), max = input.length, map = BASE64_MAP, bits = 0, result = [];
            for(idx = 0; idx < max; idx++){
                if (idx % 4 === 0 && idx) {
                    result.push(bits >> 16 & 0xFF);
                    result.push(bits >> 8 & 0xFF);
                    result.push(0xFF & bits);
                }
                bits = bits << 6 | map.indexOf(input.charAt(idx));
            }
            tailbits = max % 4 * 6;
            if (0 === tailbits) {
                result.push(bits >> 16 & 0xFF);
                result.push(bits >> 8 & 0xFF);
                result.push(0xFF & bits);
            } else if (18 === tailbits) {
                result.push(bits >> 10 & 0xFF);
                result.push(bits >> 2 & 0xFF);
            } else if (12 === tailbits) result.push(bits >> 4 & 0xFF);
            return new Uint8Array(result);
        }
        function representYamlBinary(object) {
            var result = '', bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
            for(idx = 0; idx < max; idx++){
                if (idx % 3 === 0 && idx) {
                    result += map[bits >> 18 & 0x3F];
                    result += map[bits >> 12 & 0x3F];
                    result += map[bits >> 6 & 0x3F];
                    result += map[0x3F & bits];
                }
                bits = (bits << 8) + object[idx];
            }
            tail = max % 3;
            if (0 === tail) {
                result += map[bits >> 18 & 0x3F];
                result += map[bits >> 12 & 0x3F];
                result += map[bits >> 6 & 0x3F];
                result += map[0x3F & bits];
            } else if (2 === tail) {
                result += map[bits >> 10 & 0x3F];
                result += map[bits >> 4 & 0x3F];
                result += map[bits << 2 & 0x3F];
                result += map[64];
            } else if (1 === tail) {
                result += map[bits >> 2 & 0x3F];
                result += map[bits << 4 & 0x3F];
                result += map[64];
                result += map[64];
            }
            return result;
        }
        function isBinary(obj) {
            return '[object Uint8Array]' === Object.prototype.toString.call(obj);
        }
        var binary = new js_yaml_type('tag:yaml.org,2002:binary', {
            kind: 'scalar',
            resolve: resolveYamlBinary,
            construct: constructYamlBinary,
            predicate: isBinary,
            represent: representYamlBinary
        });
        var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
        var _toString$2 = Object.prototype.toString;
        function resolveYamlOmap(data) {
            if (null === data) return true;
            var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
            for(index = 0, length = object.length; index < length; index += 1){
                pair = object[index];
                pairHasKey = false;
                if ('[object Object]' !== _toString$2.call(pair)) return false;
                for(pairKey in pair)if (_hasOwnProperty$3.call(pair, pairKey)) if (pairHasKey) return false;
                else pairHasKey = true;
                if (!pairHasKey) return false;
                if (-1 !== objectKeys.indexOf(pairKey)) return false;
                objectKeys.push(pairKey);
            }
            return true;
        }
        function constructYamlOmap(data) {
            return null !== data ? data : [];
        }
        var omap = new js_yaml_type('tag:yaml.org,2002:omap', {
            kind: 'sequence',
            resolve: resolveYamlOmap,
            construct: constructYamlOmap
        });
        var _toString$1 = Object.prototype.toString;
        function resolveYamlPairs(data) {
            if (null === data) return true;
            var index, length, pair, keys, result, object = data;
            result = new Array(object.length);
            for(index = 0, length = object.length; index < length; index += 1){
                pair = object[index];
                if ('[object Object]' !== _toString$1.call(pair)) return false;
                keys = Object.keys(pair);
                if (1 !== keys.length) return false;
                result[index] = [
                    keys[0],
                    pair[keys[0]]
                ];
            }
            return true;
        }
        function constructYamlPairs(data) {
            if (null === data) return [];
            var index, length, pair, keys, result, object = data;
            result = new Array(object.length);
            for(index = 0, length = object.length; index < length; index += 1){
                pair = object[index];
                keys = Object.keys(pair);
                result[index] = [
                    keys[0],
                    pair[keys[0]]
                ];
            }
            return result;
        }
        var pairs = new js_yaml_type('tag:yaml.org,2002:pairs', {
            kind: 'sequence',
            resolve: resolveYamlPairs,
            construct: constructYamlPairs
        });
        var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function resolveYamlSet(data) {
            if (null === data) return true;
            var key, object = data;
            for(key in object)if (_hasOwnProperty$2.call(object, key)) {
                if (null !== object[key]) return false;
            }
            return true;
        }
        function constructYamlSet(data) {
            return null !== data ? data : {};
        }
        var js_yaml_set = new js_yaml_type('tag:yaml.org,2002:set', {
            kind: 'mapping',
            resolve: resolveYamlSet,
            construct: constructYamlSet
        });
        var _default = core.extend({
            implicit: [
                js_yaml_timestamp,
                merge
            ],
            explicit: [
                binary,
                omap,
                pairs,
                js_yaml_set
            ]
        });
        var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        var CONTEXT_FLOW_IN = 1;
        var CONTEXT_FLOW_OUT = 2;
        var CONTEXT_BLOCK_IN = 3;
        var CONTEXT_BLOCK_OUT = 4;
        var CHOMPING_CLIP = 1;
        var CHOMPING_STRIP = 2;
        var CHOMPING_KEEP = 3;
        var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
        var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
        var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
        var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
        var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
        function _class(obj) {
            return Object.prototype.toString.call(obj);
        }
        function is_EOL(c) {
            return 0x0A === c || 0x0D === c;
        }
        function is_WHITE_SPACE(c) {
            return 0x09 === c || 0x20 === c;
        }
        function is_WS_OR_EOL(c) {
            return 0x09 === c || 0x20 === c || 0x0A === c || 0x0D === c;
        }
        function is_FLOW_INDICATOR(c) {
            return 0x2C === c || 0x5B === c || 0x5D === c || 0x7B === c || 0x7D === c;
        }
        function fromHexCode(c) {
            var lc;
            if (0x30 <= c && c <= 0x39) return c - 0x30;
            lc = 0x20 | c;
            if (0x61 <= lc && lc <= 0x66) return lc - 0x61 + 10;
            return -1;
        }
        function escapedHexLen(c) {
            if (0x78 === c) return 2;
            if (0x75 === c) return 4;
            if (0x55 === c) return 8;
            return 0;
        }
        function fromDecimalCode(c) {
            if (0x30 <= c && c <= 0x39) return c - 0x30;
            return -1;
        }
        function simpleEscapeSequence(c) {
            return 0x30 === c ? '\x00' : 0x61 === c ? '\x07' : 0x62 === c ? '\x08' : 0x74 === c ? '\x09' : 0x09 === c ? '\x09' : 0x6E === c ? '\x0A' : 0x76 === c ? '\x0B' : 0x66 === c ? '\x0C' : 0x72 === c ? '\x0D' : 0x65 === c ? '\x1B' : 0x20 === c ? ' ' : 0x22 === c ? '\x22' : 0x2F === c ? '/' : 0x5C === c ? '\x5C' : 0x4E === c ? '\x85' : 0x5F === c ? '\xA0' : 0x4C === c ? '\u2028' : 0x50 === c ? '\u2029' : '';
        }
        function charFromCodepoint(c) {
            if (c <= 0xFFFF) return String.fromCharCode(c);
            return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
        }
        var simpleEscapeCheck = new Array(256);
        var simpleEscapeMap = new Array(256);
        for(var js_yaml_i = 0; js_yaml_i < 256; js_yaml_i++){
            simpleEscapeCheck[js_yaml_i] = simpleEscapeSequence(js_yaml_i) ? 1 : 0;
            simpleEscapeMap[js_yaml_i] = simpleEscapeSequence(js_yaml_i);
        }
        function State$1(input, options) {
            this.input = input;
            this.filename = options['filename'] || null;
            this.schema = options['schema'] || _default;
            this.onWarning = options['onWarning'] || null;
            this.legacy = options['legacy'] || false;
            this.json = options['json'] || false;
            this.listener = options['listener'] || null;
            this.implicitTypes = this.schema.compiledImplicit;
            this.typeMap = this.schema.compiledTypeMap;
            this.length = input.length;
            this.position = 0;
            this.line = 0;
            this.lineStart = 0;
            this.lineIndent = 0;
            this.firstTabInLine = -1;
            this.documents = [];
        }
        function generateError(state, message) {
            var mark = {
                name: state.filename,
                buffer: state.input.slice(0, -1),
                position: state.position,
                line: state.line,
                column: state.position - state.lineStart
            };
            mark.snippet = snippet(mark);
            return new js_yaml_exception(message, mark);
        }
        function throwError(state, message) {
            throw generateError(state, message);
        }
        function throwWarning(state, message) {
            if (state.onWarning) state.onWarning.call(null, generateError(state, message));
        }
        var directiveHandlers = {
            YAML: function(state, name, args) {
                var match, major, minor;
                if (null !== state.version) throwError(state, 'duplication of %YAML directive');
                if (1 !== args.length) throwError(state, 'YAML directive accepts exactly one argument');
                match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
                if (null === match) throwError(state, 'ill-formed argument of the YAML directive');
                major = parseInt(match[1], 10);
                minor = parseInt(match[2], 10);
                if (1 !== major) throwError(state, 'unacceptable YAML version of the document');
                state.version = args[0];
                state.checkLineBreaks = minor < 2;
                if (1 !== minor && 2 !== minor) throwWarning(state, 'unsupported YAML version of the document');
            },
            TAG: function(state, name, args) {
                var handle, prefix;
                if (2 !== args.length) throwError(state, 'TAG directive accepts exactly two arguments');
                handle = args[0];
                prefix = args[1];
                if (!PATTERN_TAG_HANDLE.test(handle)) throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
                if (_hasOwnProperty$1.call(state.tagMap, handle)) throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
                if (!PATTERN_TAG_URI.test(prefix)) throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
                try {
                    prefix = decodeURIComponent(prefix);
                } catch (err) {
                    throwError(state, 'tag prefix is malformed: ' + prefix);
                }
                state.tagMap[handle] = prefix;
            }
        };
        function captureSegment(state, start, end, checkJson) {
            var _position, _length, _character, _result;
            if (start < end) {
                _result = state.input.slice(start, end);
                if (checkJson) for(_position = 0, _length = _result.length; _position < _length; _position += 1){
                    _character = _result.charCodeAt(_position);
                    if (!(0x09 === _character || 0x20 <= _character && _character <= 0x10FFFF)) throwError(state, 'expected valid JSON character');
                }
                else if (PATTERN_NON_PRINTABLE.test(_result)) throwError(state, 'the stream contains non-printable characters');
                state.result += _result;
            }
        }
        function mergeMappings(state, destination, source, overridableKeys) {
            var sourceKeys, key, index, quantity;
            if (!common.isObject(source)) throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
            sourceKeys = Object.keys(source);
            for(index = 0, quantity = sourceKeys.length; index < quantity; index += 1){
                key = sourceKeys[index];
                if (!_hasOwnProperty$1.call(destination, key)) {
                    destination[key] = source[key];
                    overridableKeys[key] = true;
                }
            }
        }
        function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
            var index, quantity;
            if (Array.isArray(keyNode)) {
                keyNode = Array.prototype.slice.call(keyNode);
                for(index = 0, quantity = keyNode.length; index < quantity; index += 1){
                    if (Array.isArray(keyNode[index])) throwError(state, 'nested arrays are not supported inside keys');
                    if ('object' == typeof keyNode && '[object Object]' === _class(keyNode[index])) keyNode[index] = '[object Object]';
                }
            }
            if ('object' == typeof keyNode && '[object Object]' === _class(keyNode)) keyNode = '[object Object]';
            keyNode = String(keyNode);
            if (null === _result) _result = {};
            if ('tag:yaml.org,2002:merge' === keyTag) if (Array.isArray(valueNode)) for(index = 0, quantity = valueNode.length; index < quantity; index += 1)mergeMappings(state, _result, valueNode[index], overridableKeys);
            else mergeMappings(state, _result, valueNode, overridableKeys);
            else {
                if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
                    state.line = startLine || state.line;
                    state.lineStart = startLineStart || state.lineStart;
                    state.position = startPos || state.position;
                    throwError(state, 'duplicated mapping key');
                }
                if ('__proto__' === keyNode) Object.defineProperty(_result, keyNode, {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: valueNode
                });
                else _result[keyNode] = valueNode;
                delete overridableKeys[keyNode];
            }
            return _result;
        }
        function readLineBreak(state) {
            var ch;
            ch = state.input.charCodeAt(state.position);
            if (0x0A === ch) state.position++;
            else if (0x0D === ch) {
                state.position++;
                if (0x0A === state.input.charCodeAt(state.position)) state.position++;
            } else throwError(state, 'a line break is expected');
            state.line += 1;
            state.lineStart = state.position;
            state.firstTabInLine = -1;
        }
        function skipSeparationSpace(state, allowComments, checkIndent) {
            var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
            while(0 !== ch){
                while(is_WHITE_SPACE(ch)){
                    if (0x09 === ch && -1 === state.firstTabInLine) state.firstTabInLine = state.position;
                    ch = state.input.charCodeAt(++state.position);
                }
                if (allowComments && 0x23 === ch) do ch = state.input.charCodeAt(++state.position);
                while (0x0A !== ch && 0x0D !== ch && 0 !== ch);
                if (is_EOL(ch)) {
                    readLineBreak(state);
                    ch = state.input.charCodeAt(state.position);
                    lineBreaks++;
                    state.lineIndent = 0;
                    while(0x20 === ch){
                        state.lineIndent++;
                        ch = state.input.charCodeAt(++state.position);
                    }
                } else break;
            }
            if (-1 !== checkIndent && 0 !== lineBreaks && state.lineIndent < checkIndent) throwWarning(state, 'deficient indentation');
            return lineBreaks;
        }
        function testDocumentSeparator(state) {
            var _position = state.position, ch;
            ch = state.input.charCodeAt(_position);
            if ((0x2D === ch || 0x2E === ch) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
                _position += 3;
                ch = state.input.charCodeAt(_position);
                if (0 === ch || is_WS_OR_EOL(ch)) return true;
            }
            return false;
        }
        function writeFoldedLines(state, count) {
            if (1 === count) state.result += ' ';
            else if (count > 1) state.result += common.repeat('\n', count - 1);
        }
        function readPlainScalar(state, nodeIndent, withinFlowCollection) {
            var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
            ch = state.input.charCodeAt(state.position);
            if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || 0x23 === ch || 0x26 === ch || 0x2A === ch || 0x21 === ch || 0x7C === ch || 0x3E === ch || 0x27 === ch || 0x22 === ch || 0x25 === ch || 0x40 === ch || 0x60 === ch) return false;
            if (0x3F === ch || 0x2D === ch) {
                following = state.input.charCodeAt(state.position + 1);
                if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) return false;
            }
            state.kind = 'scalar';
            state.result = '';
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
            while(0 !== ch){
                if (0x3A === ch) {
                    following = state.input.charCodeAt(state.position + 1);
                    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) break;
                } else if (0x23 === ch) {
                    preceding = state.input.charCodeAt(state.position - 1);
                    if (is_WS_OR_EOL(preceding)) break;
                } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) break;
                else if (is_EOL(ch)) {
                    _line = state.line;
                    _lineStart = state.lineStart;
                    _lineIndent = state.lineIndent;
                    skipSeparationSpace(state, false, -1);
                    if (state.lineIndent >= nodeIndent) {
                        hasPendingContent = true;
                        ch = state.input.charCodeAt(state.position);
                        continue;
                    }
                    state.position = captureEnd;
                    state.line = _line;
                    state.lineStart = _lineStart;
                    state.lineIndent = _lineIndent;
                    break;
                }
                if (hasPendingContent) {
                    captureSegment(state, captureStart, captureEnd, false);
                    writeFoldedLines(state, state.line - _line);
                    captureStart = captureEnd = state.position;
                    hasPendingContent = false;
                }
                if (!is_WHITE_SPACE(ch)) captureEnd = state.position + 1;
                ch = state.input.charCodeAt(++state.position);
            }
            captureSegment(state, captureStart, captureEnd, false);
            if (state.result) return true;
            state.kind = _kind;
            state.result = _result;
            return false;
        }
        function readSingleQuotedScalar(state, nodeIndent) {
            var ch, captureStart, captureEnd;
            ch = state.input.charCodeAt(state.position);
            if (0x27 !== ch) return false;
            state.kind = 'scalar';
            state.result = '';
            state.position++;
            captureStart = captureEnd = state.position;
            while(0 !== (ch = state.input.charCodeAt(state.position)))if (0x27 === ch) {
                captureSegment(state, captureStart, state.position, true);
                ch = state.input.charCodeAt(++state.position);
                if (0x27 !== ch) return true;
                captureStart = state.position;
                state.position++;
                captureEnd = state.position;
            } else if (is_EOL(ch)) {
                captureSegment(state, captureStart, captureEnd, true);
                writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
                captureStart = captureEnd = state.position;
            } else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, 'unexpected end of the document within a single quoted scalar');
            else {
                state.position++;
                captureEnd = state.position;
            }
            throwError(state, 'unexpected end of the stream within a single quoted scalar');
        }
        function readDoubleQuotedScalar(state, nodeIndent) {
            var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x22 !== ch) return false;
            state.kind = 'scalar';
            state.result = '';
            state.position++;
            captureStart = captureEnd = state.position;
            while(0 !== (ch = state.input.charCodeAt(state.position)))if (0x22 === ch) {
                captureSegment(state, captureStart, state.position, true);
                state.position++;
                return true;
            } else if (0x5C === ch) {
                captureSegment(state, captureStart, state.position, true);
                ch = state.input.charCodeAt(++state.position);
                if (is_EOL(ch)) skipSeparationSpace(state, false, nodeIndent);
                else if (ch < 256 && simpleEscapeCheck[ch]) {
                    state.result += simpleEscapeMap[ch];
                    state.position++;
                } else if ((tmp = escapedHexLen(ch)) > 0) {
                    hexLength = tmp;
                    hexResult = 0;
                    for(; hexLength > 0; hexLength--){
                        ch = state.input.charCodeAt(++state.position);
                        if ((tmp = fromHexCode(ch)) >= 0) hexResult = (hexResult << 4) + tmp;
                        else throwError(state, 'expected hexadecimal character');
                    }
                    state.result += charFromCodepoint(hexResult);
                    state.position++;
                } else throwError(state, 'unknown escape sequence');
                captureStart = captureEnd = state.position;
            } else if (is_EOL(ch)) {
                captureSegment(state, captureStart, captureEnd, true);
                writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
                captureStart = captureEnd = state.position;
            } else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, 'unexpected end of the document within a double quoted scalar');
            else {
                state.position++;
                captureEnd = state.position;
            }
            throwError(state, 'unexpected end of the stream within a double quoted scalar');
        }
        function readFlowCollection(state, nodeIndent) {
            var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x5B === ch) {
                terminator = 0x5D;
                isMapping = false;
                _result = [];
            } else {
                if (0x7B !== ch) return false;
                terminator = 0x7D;
                isMapping = true;
                _result = {};
            }
            if (null !== state.anchor) state.anchorMap[state.anchor] = _result;
            ch = state.input.charCodeAt(++state.position);
            while(0 !== ch){
                skipSeparationSpace(state, true, nodeIndent);
                ch = state.input.charCodeAt(state.position);
                if (ch === terminator) {
                    state.position++;
                    state.tag = _tag;
                    state.anchor = _anchor;
                    state.kind = isMapping ? 'mapping' : 'sequence';
                    state.result = _result;
                    return true;
                }
                if (readNext) {
                    if (0x2C === ch) throwError(state, "expected the node content, but found ','");
                } else throwError(state, 'missed comma between flow collection entries');
                keyTag = keyNode = valueNode = null;
                isPair = isExplicitPair = false;
                if (0x3F === ch) {
                    following = state.input.charCodeAt(state.position + 1);
                    if (is_WS_OR_EOL(following)) {
                        isPair = isExplicitPair = true;
                        state.position++;
                        skipSeparationSpace(state, true, nodeIndent);
                    }
                }
                _line = state.line;
                _lineStart = state.lineStart;
                _pos = state.position;
                composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
                keyTag = state.tag;
                keyNode = state.result;
                skipSeparationSpace(state, true, nodeIndent);
                ch = state.input.charCodeAt(state.position);
                if ((isExplicitPair || state.line === _line) && 0x3A === ch) {
                    isPair = true;
                    ch = state.input.charCodeAt(++state.position);
                    skipSeparationSpace(state, true, nodeIndent);
                    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
                    valueNode = state.result;
                }
                if (isMapping) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
                else if (isPair) _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
                else _result.push(keyNode);
                skipSeparationSpace(state, true, nodeIndent);
                ch = state.input.charCodeAt(state.position);
                if (0x2C === ch) {
                    readNext = true;
                    ch = state.input.charCodeAt(++state.position);
                } else readNext = false;
            }
            throwError(state, 'unexpected end of the stream within a flow collection');
        }
        function readBlockScalar(state, nodeIndent) {
            var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x7C === ch) folding = false;
            else {
                if (0x3E !== ch) return false;
                folding = true;
            }
            state.kind = 'scalar';
            state.result = '';
            while(0 !== ch){
                ch = state.input.charCodeAt(++state.position);
                if (0x2B === ch || 0x2D === ch) if (CHOMPING_CLIP === chomping) chomping = 0x2B === ch ? CHOMPING_KEEP : CHOMPING_STRIP;
                else throwError(state, 'repeat of a chomping mode identifier');
                else if ((tmp = fromDecimalCode(ch)) >= 0) if (0 === tmp) throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
                else if (detectedIndent) throwError(state, 'repeat of an indentation width identifier');
                else {
                    textIndent = nodeIndent + tmp - 1;
                    detectedIndent = true;
                }
                else break;
            }
            if (is_WHITE_SPACE(ch)) {
                do ch = state.input.charCodeAt(++state.position);
                while (is_WHITE_SPACE(ch));
                if (0x23 === ch) do ch = state.input.charCodeAt(++state.position);
                while (!is_EOL(ch) && 0 !== ch);
            }
            while(0 !== ch){
                readLineBreak(state);
                state.lineIndent = 0;
                ch = state.input.charCodeAt(state.position);
                while((!detectedIndent || state.lineIndent < textIndent) && 0x20 === ch){
                    state.lineIndent++;
                    ch = state.input.charCodeAt(++state.position);
                }
                if (!detectedIndent && state.lineIndent > textIndent) textIndent = state.lineIndent;
                if (is_EOL(ch)) {
                    emptyLines++;
                    continue;
                }
                if (state.lineIndent < textIndent) {
                    if (chomping === CHOMPING_KEEP) state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
                    else if (chomping === CHOMPING_CLIP) {
                        if (didReadContent) state.result += '\n';
                    }
                    break;
                }
                if (folding) if (is_WHITE_SPACE(ch)) {
                    atMoreIndented = true;
                    state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
                } else if (atMoreIndented) {
                    atMoreIndented = false;
                    state.result += common.repeat('\n', emptyLines + 1);
                } else if (0 === emptyLines) {
                    if (didReadContent) state.result += ' ';
                } else state.result += common.repeat('\n', emptyLines);
                else state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
                didReadContent = true;
                detectedIndent = true;
                emptyLines = 0;
                captureStart = state.position;
                while(!is_EOL(ch) && 0 !== ch)ch = state.input.charCodeAt(++state.position);
                captureSegment(state, captureStart, state.position, false);
            }
            return true;
        }
        function readBlockSequence(state, nodeIndent) {
            var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
            if (-1 !== state.firstTabInLine) return false;
            if (null !== state.anchor) state.anchorMap[state.anchor] = _result;
            ch = state.input.charCodeAt(state.position);
            while(0 !== ch){
                if (-1 !== state.firstTabInLine) {
                    state.position = state.firstTabInLine;
                    throwError(state, 'tab characters must not be used in indentation');
                }
                if (0x2D !== ch) break;
                following = state.input.charCodeAt(state.position + 1);
                if (!is_WS_OR_EOL(following)) break;
                detected = true;
                state.position++;
                if (skipSeparationSpace(state, true, -1)) {
                    if (state.lineIndent <= nodeIndent) {
                        _result.push(null);
                        ch = state.input.charCodeAt(state.position);
                        continue;
                    }
                }
                _line = state.line;
                composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
                _result.push(state.result);
                skipSeparationSpace(state, true, -1);
                ch = state.input.charCodeAt(state.position);
                if ((state.line === _line || state.lineIndent > nodeIndent) && 0 !== ch) throwError(state, 'bad indentation of a sequence entry');
                else if (state.lineIndent < nodeIndent) break;
            }
            if (detected) {
                state.tag = _tag;
                state.anchor = _anchor;
                state.kind = 'sequence';
                state.result = _result;
                return true;
            }
            return false;
        }
        function readBlockMapping(state, nodeIndent, flowIndent) {
            var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
            if (-1 !== state.firstTabInLine) return false;
            if (null !== state.anchor) state.anchorMap[state.anchor] = _result;
            ch = state.input.charCodeAt(state.position);
            while(0 !== ch){
                if (!atExplicitKey && -1 !== state.firstTabInLine) {
                    state.position = state.firstTabInLine;
                    throwError(state, 'tab characters must not be used in indentation');
                }
                following = state.input.charCodeAt(state.position + 1);
                _line = state.line;
                if ((0x3F === ch || 0x3A === ch) && is_WS_OR_EOL(following)) {
                    if (0x3F === ch) {
                        if (atExplicitKey) {
                            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                            keyTag = keyNode = valueNode = null;
                        }
                        detected = true;
                        atExplicitKey = true;
                        allowCompact = true;
                    } else if (atExplicitKey) {
                        atExplicitKey = false;
                        allowCompact = true;
                    } else throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
                    state.position += 1;
                    ch = following;
                } else {
                    _keyLine = state.line;
                    _keyLineStart = state.lineStart;
                    _keyPos = state.position;
                    if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) break;
                    if (state.line === _line) {
                        ch = state.input.charCodeAt(state.position);
                        while(is_WHITE_SPACE(ch))ch = state.input.charCodeAt(++state.position);
                        if (0x3A === ch) {
                            ch = state.input.charCodeAt(++state.position);
                            if (!is_WS_OR_EOL(ch)) throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
                            if (atExplicitKey) {
                                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                                keyTag = keyNode = valueNode = null;
                            }
                            detected = true;
                            atExplicitKey = false;
                            allowCompact = false;
                            keyTag = state.tag;
                            keyNode = state.result;
                        } else if (detected) throwError(state, 'can not read an implicit mapping pair; a colon is missed');
                        else {
                            state.tag = _tag;
                            state.anchor = _anchor;
                            return true;
                        }
                    } else if (detected) throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
                    else {
                        state.tag = _tag;
                        state.anchor = _anchor;
                        return true;
                    }
                }
                if (state.line === _line || state.lineIndent > nodeIndent) {
                    if (atExplicitKey) {
                        _keyLine = state.line;
                        _keyLineStart = state.lineStart;
                        _keyPos = state.position;
                    }
                    if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) if (atExplicitKey) keyNode = state.result;
                    else valueNode = state.result;
                    if (!atExplicitKey) {
                        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
                        keyTag = keyNode = valueNode = null;
                    }
                    skipSeparationSpace(state, true, -1);
                    ch = state.input.charCodeAt(state.position);
                }
                if ((state.line === _line || state.lineIndent > nodeIndent) && 0 !== ch) throwError(state, 'bad indentation of a mapping entry');
                else if (state.lineIndent < nodeIndent) break;
            }
            if (atExplicitKey) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            if (detected) {
                state.tag = _tag;
                state.anchor = _anchor;
                state.kind = 'mapping';
                state.result = _result;
            }
            return detected;
        }
        function readTagProperty(state) {
            var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x21 !== ch) return false;
            if (null !== state.tag) throwError(state, 'duplication of a tag property');
            ch = state.input.charCodeAt(++state.position);
            if (0x3C === ch) {
                isVerbatim = true;
                ch = state.input.charCodeAt(++state.position);
            } else if (0x21 === ch) {
                isNamed = true;
                tagHandle = '!!';
                ch = state.input.charCodeAt(++state.position);
            } else tagHandle = '!';
            _position = state.position;
            if (isVerbatim) {
                do ch = state.input.charCodeAt(++state.position);
                while (0 !== ch && 0x3E !== ch);
                if (state.position < state.length) {
                    tagName = state.input.slice(_position, state.position);
                    ch = state.input.charCodeAt(++state.position);
                } else throwError(state, 'unexpected end of the stream within a verbatim tag');
            } else {
                while(0 !== ch && !is_WS_OR_EOL(ch)){
                    if (0x21 === ch) if (isNamed) throwError(state, 'tag suffix cannot contain exclamation marks');
                    else {
                        tagHandle = state.input.slice(_position - 1, state.position + 1);
                        if (!PATTERN_TAG_HANDLE.test(tagHandle)) throwError(state, 'named tag handle cannot contain such characters');
                        isNamed = true;
                        _position = state.position + 1;
                    }
                    ch = state.input.charCodeAt(++state.position);
                }
                tagName = state.input.slice(_position, state.position);
                if (PATTERN_FLOW_INDICATORS.test(tagName)) throwError(state, 'tag suffix cannot contain flow indicator characters');
            }
            if (tagName && !PATTERN_TAG_URI.test(tagName)) throwError(state, 'tag name cannot contain such characters: ' + tagName);
            try {
                tagName = decodeURIComponent(tagName);
            } catch (err) {
                throwError(state, 'tag name is malformed: ' + tagName);
            }
            if (isVerbatim) state.tag = tagName;
            else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) state.tag = state.tagMap[tagHandle] + tagName;
            else if ('!' === tagHandle) state.tag = '!' + tagName;
            else if ('!!' === tagHandle) state.tag = 'tag:yaml.org,2002:' + tagName;
            else throwError(state, 'undeclared tag handle "' + tagHandle + '"');
            return true;
        }
        function readAnchorProperty(state) {
            var _position, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x26 !== ch) return false;
            if (null !== state.anchor) throwError(state, 'duplication of an anchor property');
            ch = state.input.charCodeAt(++state.position);
            _position = state.position;
            while(0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch))ch = state.input.charCodeAt(++state.position);
            if (state.position === _position) throwError(state, 'name of an anchor node must contain at least one character');
            state.anchor = state.input.slice(_position, state.position);
            return true;
        }
        function readAlias(state) {
            var _position, alias, ch;
            ch = state.input.charCodeAt(state.position);
            if (0x2A !== ch) return false;
            ch = state.input.charCodeAt(++state.position);
            _position = state.position;
            while(0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch))ch = state.input.charCodeAt(++state.position);
            if (state.position === _position) throwError(state, 'name of an alias node must contain at least one character');
            alias = state.input.slice(_position, state.position);
            if (!_hasOwnProperty$1.call(state.anchorMap, alias)) throwError(state, 'unidentified alias "' + alias + '"');
            state.result = state.anchorMap[alias];
            skipSeparationSpace(state, true, -1);
            return true;
        }
        function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
            var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
            if (null !== state.listener) state.listener('open', state);
            state.tag = null;
            state.anchor = null;
            state.kind = null;
            state.result = null;
            allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
            if (allowToSeek) {
                if (skipSeparationSpace(state, true, -1)) {
                    atNewLine = true;
                    if (state.lineIndent > parentIndent) indentStatus = 1;
                    else if (state.lineIndent === parentIndent) indentStatus = 0;
                    else if (state.lineIndent < parentIndent) indentStatus = -1;
                }
            }
            if (1 === indentStatus) while(readTagProperty(state) || readAnchorProperty(state))if (skipSeparationSpace(state, true, -1)) {
                atNewLine = true;
                allowBlockCollections = allowBlockStyles;
                if (state.lineIndent > parentIndent) indentStatus = 1;
                else if (state.lineIndent === parentIndent) indentStatus = 0;
                else if (state.lineIndent < parentIndent) indentStatus = -1;
            } else allowBlockCollections = false;
            if (allowBlockCollections) allowBlockCollections = atNewLine || allowCompact;
            if (1 === indentStatus || CONTEXT_BLOCK_OUT === nodeContext) {
                flowIndent = CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext ? parentIndent : parentIndent + 1;
                blockIndent = state.position - state.lineStart;
                if (1 === indentStatus) if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) hasContent = true;
                else {
                    if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) hasContent = true;
                    else if (readAlias(state)) {
                        hasContent = true;
                        if (null !== state.tag || null !== state.anchor) throwError(state, 'alias node should not have any properties');
                    } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                        hasContent = true;
                        if (null === state.tag) state.tag = '?';
                    }
                    if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
                }
                else if (0 === indentStatus) hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
            }
            if (null === state.tag) {
                if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
            } else if ('?' === state.tag) {
                if (null !== state.result && 'scalar' !== state.kind) throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
                for(typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1){
                    type = state.implicitTypes[typeIndex];
                    if (type.resolve(state.result)) {
                        state.result = type.construct(state.result);
                        state.tag = type.tag;
                        if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
                        break;
                    }
                }
            } else if ('!' !== state.tag) {
                if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) type = state.typeMap[state.kind || 'fallback'][state.tag];
                else {
                    type = null;
                    typeList = state.typeMap.multi[state.kind || 'fallback'];
                    for(typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1)if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
                        type = typeList[typeIndex];
                        break;
                    }
                }
                if (!type) throwError(state, 'unknown tag !<' + state.tag + '>');
                if (null !== state.result && type.kind !== state.kind) throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
                if (type.resolve(state.result, state.tag)) {
                    state.result = type.construct(state.result, state.tag);
                    if (null !== state.anchor) state.anchorMap[state.anchor] = state.result;
                } else throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
            }
            if (null !== state.listener) state.listener('close', state);
            return null !== state.tag || null !== state.anchor || hasContent;
        }
        function readDocument(state) {
            var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
            state.version = null;
            state.checkLineBreaks = state.legacy;
            state.tagMap = Object.create(null);
            state.anchorMap = Object.create(null);
            while(0 !== (ch = state.input.charCodeAt(state.position))){
                skipSeparationSpace(state, true, -1);
                ch = state.input.charCodeAt(state.position);
                if (state.lineIndent > 0 || 0x25 !== ch) break;
                hasDirectives = true;
                ch = state.input.charCodeAt(++state.position);
                _position = state.position;
                while(0 !== ch && !is_WS_OR_EOL(ch))ch = state.input.charCodeAt(++state.position);
                directiveName = state.input.slice(_position, state.position);
                directiveArgs = [];
                if (directiveName.length < 1) throwError(state, 'directive name must not be less than one character in length');
                while(0 !== ch){
                    while(is_WHITE_SPACE(ch))ch = state.input.charCodeAt(++state.position);
                    if (0x23 === ch) {
                        do ch = state.input.charCodeAt(++state.position);
                        while (0 !== ch && !is_EOL(ch));
                        break;
                    }
                    if (is_EOL(ch)) break;
                    _position = state.position;
                    while(0 !== ch && !is_WS_OR_EOL(ch))ch = state.input.charCodeAt(++state.position);
                    directiveArgs.push(state.input.slice(_position, state.position));
                }
                if (0 !== ch) readLineBreak(state);
                if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) directiveHandlers[directiveName](state, directiveName, directiveArgs);
                else throwWarning(state, 'unknown document directive "' + directiveName + '"');
            }
            skipSeparationSpace(state, true, -1);
            if (0 === state.lineIndent && 0x2D === state.input.charCodeAt(state.position) && 0x2D === state.input.charCodeAt(state.position + 1) && 0x2D === state.input.charCodeAt(state.position + 2)) {
                state.position += 3;
                skipSeparationSpace(state, true, -1);
            } else if (hasDirectives) throwError(state, 'directives end mark is expected');
            composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
            skipSeparationSpace(state, true, -1);
            if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) throwWarning(state, 'non-ASCII line breaks are interpreted as content');
            state.documents.push(state.result);
            if (state.position === state.lineStart && testDocumentSeparator(state)) {
                if (0x2E === state.input.charCodeAt(state.position)) {
                    state.position += 3;
                    skipSeparationSpace(state, true, -1);
                }
                return;
            }
            if (!(state.position < state.length - 1)) return;
            throwError(state, 'end of the stream or a document separator is expected');
        }
        function loadDocuments(input, options) {
            input = String(input);
            options = options || {};
            if (0 !== input.length) {
                if (0x0A !== input.charCodeAt(input.length - 1) && 0x0D !== input.charCodeAt(input.length - 1)) input += '\n';
                if (0xFEFF === input.charCodeAt(0)) input = input.slice(1);
            }
            var state = new State$1(input, options);
            var nullpos = input.indexOf('\0');
            if (-1 !== nullpos) {
                state.position = nullpos;
                throwError(state, 'null byte is not allowed in input');
            }
            state.input += '\0';
            while(0x20 === state.input.charCodeAt(state.position)){
                state.lineIndent += 1;
                state.position += 1;
            }
            while(state.position < state.length - 1)readDocument(state);
            return state.documents;
        }
        function loadAll$1(input, iterator, options) {
            if (null !== iterator && 'object' == typeof iterator && void 0 === options) {
                options = iterator;
                iterator = null;
            }
            var documents = loadDocuments(input, options);
            if ('function' != typeof iterator) return documents;
            for(var index = 0, length = documents.length; index < length; index += 1)iterator(documents[index]);
        }
        function load$1(input, options) {
            var documents = loadDocuments(input, options);
            if (0 === documents.length) return;
            if (1 === documents.length) return documents[0];
            throw new js_yaml_exception('expected a single document in the stream, but found more');
        }
        var loadAll_1 = loadAll$1;
        var load_1 = load$1;
        var loader = {
            loadAll: loadAll_1,
            load: load_1
        };
        var _toString = Object.prototype.toString;
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var CHAR_BOM = 0xFEFF;
        var CHAR_TAB = 0x09;
        var CHAR_LINE_FEED = 0x0A;
        var CHAR_CARRIAGE_RETURN = 0x0D;
        var CHAR_SPACE = 0x20;
        var CHAR_EXCLAMATION = 0x21;
        var CHAR_DOUBLE_QUOTE = 0x22;
        var CHAR_SHARP = 0x23;
        var CHAR_PERCENT = 0x25;
        var CHAR_AMPERSAND = 0x26;
        var CHAR_SINGLE_QUOTE = 0x27;
        var CHAR_ASTERISK = 0x2A;
        var CHAR_COMMA = 0x2C;
        var CHAR_MINUS = 0x2D;
        var CHAR_COLON = 0x3A;
        var CHAR_EQUALS = 0x3D;
        var CHAR_GREATER_THAN = 0x3E;
        var CHAR_QUESTION = 0x3F;
        var CHAR_COMMERCIAL_AT = 0x40;
        var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
        var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
        var CHAR_GRAVE_ACCENT = 0x60;
        var CHAR_LEFT_CURLY_BRACKET = 0x7B;
        var CHAR_VERTICAL_LINE = 0x7C;
        var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
        var ESCAPE_SEQUENCES = {};
        ESCAPE_SEQUENCES[0x00] = '\\0';
        ESCAPE_SEQUENCES[0x07] = '\\a';
        ESCAPE_SEQUENCES[0x08] = '\\b';
        ESCAPE_SEQUENCES[0x09] = '\\t';
        ESCAPE_SEQUENCES[0x0A] = '\\n';
        ESCAPE_SEQUENCES[0x0B] = '\\v';
        ESCAPE_SEQUENCES[0x0C] = '\\f';
        ESCAPE_SEQUENCES[0x0D] = '\\r';
        ESCAPE_SEQUENCES[0x1B] = '\\e';
        ESCAPE_SEQUENCES[0x22] = '\\"';
        ESCAPE_SEQUENCES[0x5C] = '\\\\';
        ESCAPE_SEQUENCES[0x85] = '\\N';
        ESCAPE_SEQUENCES[0xA0] = '\\_';
        ESCAPE_SEQUENCES[0x2028] = '\\L';
        ESCAPE_SEQUENCES[0x2029] = '\\P';
        var DEPRECATED_BOOLEANS_SYNTAX = [
            'y',
            'Y',
            'yes',
            'Yes',
            'YES',
            'on',
            'On',
            'ON',
            'n',
            'N',
            'no',
            'No',
            'NO',
            'off',
            'Off',
            'OFF'
        ];
        var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
        function compileStyleMap(schema, map) {
            var result, keys, index, length, tag, style, type;
            if (null === map) return {};
            result = {};
            keys = Object.keys(map);
            for(index = 0, length = keys.length; index < length; index += 1){
                tag = keys[index];
                style = String(map[tag]);
                if ('!!' === tag.slice(0, 2)) tag = 'tag:yaml.org,2002:' + tag.slice(2);
                type = schema.compiledTypeMap['fallback'][tag];
                if (type && _hasOwnProperty.call(type.styleAliases, style)) style = type.styleAliases[style];
                result[tag] = style;
            }
            return result;
        }
        function encodeHex(character) {
            var string, handle, length;
            string = character.toString(16).toUpperCase();
            if (character <= 0xFF) {
                handle = 'x';
                length = 2;
            } else if (character <= 0xFFFF) {
                handle = 'u';
                length = 4;
            } else if (character <= 0xFFFFFFFF) {
                handle = 'U';
                length = 8;
            } else throw new js_yaml_exception('code point within a string may not be greater than 0xFFFFFFFF');
            return '\\' + handle + common.repeat('0', length - string.length) + string;
        }
        var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
        function State(options) {
            this.schema = options['schema'] || _default;
            this.indent = Math.max(1, options['indent'] || 2);
            this.noArrayIndent = options['noArrayIndent'] || false;
            this.skipInvalid = options['skipInvalid'] || false;
            this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
            this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
            this.sortKeys = options['sortKeys'] || false;
            this.lineWidth = options['lineWidth'] || 80;
            this.noRefs = options['noRefs'] || false;
            this.noCompatMode = options['noCompatMode'] || false;
            this.condenseFlow = options['condenseFlow'] || false;
            this.quotingType = '"' === options['quotingType'] ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
            this.forceQuotes = options['forceQuotes'] || false;
            this.replacer = 'function' == typeof options['replacer'] ? options['replacer'] : null;
            this.implicitTypes = this.schema.compiledImplicit;
            this.explicitTypes = this.schema.compiledExplicit;
            this.tag = null;
            this.result = '';
            this.duplicates = [];
            this.usedDuplicates = null;
        }
        function indentString(string, spaces) {
            var ind = common.repeat(' ', spaces), position = 0, next = -1, result = '', line, length = string.length;
            while(position < length){
                next = string.indexOf('\n', position);
                if (-1 === next) {
                    line = string.slice(position);
                    position = length;
                } else {
                    line = string.slice(position, next + 1);
                    position = next + 1;
                }
                if (line.length && '\n' !== line) result += ind;
                result += line;
            }
            return result;
        }
        function generateNextLine(state, level) {
            return '\n' + common.repeat(' ', state.indent * level);
        }
        function testImplicitResolving(state, str) {
            var index, length, type;
            for(index = 0, length = state.implicitTypes.length; index < length; index += 1){
                type = state.implicitTypes[index];
                if (type.resolve(str)) return true;
            }
            return false;
        }
        function isWhitespace(c) {
            return c === CHAR_SPACE || c === CHAR_TAB;
        }
        function isPrintable(c) {
            return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && 0x2028 !== c && 0x2029 !== c || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;
        }
        function isNsCharOrWhitespace(c) {
            return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
        }
        function isPlainSafe(c, prev, inblock) {
            var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
            var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
            return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
        }
        function isPlainSafeFirst(c) {
            return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
        }
        function isPlainSafeLast(c) {
            return !isWhitespace(c) && c !== CHAR_COLON;
        }
        function codePointAt(string, pos) {
            var first = string.charCodeAt(pos), second;
            if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
                second = string.charCodeAt(pos + 1);
                if (second >= 0xDC00 && second <= 0xDFFF) return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
            return first;
        }
        function needIndentIndicator(string) {
            var leadingSpaceRe = /^\n* /;
            return leadingSpaceRe.test(string);
        }
        var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
        function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
            var i;
            var char = 0;
            var prevChar = null;
            var hasLineBreak = false;
            var hasFoldableLine = false;
            var shouldTrackWidth = -1 !== lineWidth;
            var previousLineBreak = -1;
            var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
            if (singleLineOnly || forceQuotes) for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){
                char = codePointAt(string, i);
                if (!isPrintable(char)) return STYLE_DOUBLE;
                plain = plain && isPlainSafe(char, prevChar, inblock);
                prevChar = char;
            }
            else {
                for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){
                    char = codePointAt(string, i);
                    if (char === CHAR_LINE_FEED) {
                        hasLineBreak = true;
                        if (shouldTrackWidth) {
                            hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && ' ' !== string[previousLineBreak + 1];
                            previousLineBreak = i;
                        }
                    } else if (!isPrintable(char)) return STYLE_DOUBLE;
                    plain = plain && isPlainSafe(char, prevChar, inblock);
                    prevChar = char;
                }
                hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && ' ' !== string[previousLineBreak + 1];
            }
            if (!hasLineBreak && !hasFoldableLine) {
                if (plain && !forceQuotes && !testAmbiguousType(string)) return STYLE_PLAIN;
                return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
            }
            if (indentPerLevel > 9 && needIndentIndicator(string)) return STYLE_DOUBLE;
            if (!forceQuotes) return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
            return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
        }
        function writeScalar(state, string, level, iskey, inblock) {
            state.dump = function() {
                if (0 === string.length) return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
                if (!state.noCompatMode) {
                    if (-1 !== DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) || DEPRECATED_BASE60_SYNTAX.test(string)) return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
                }
                var indent = state.indent * Math.max(1, level);
                var lineWidth = -1 === state.lineWidth ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
                var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
                function testAmbiguity(string) {
                    return testImplicitResolving(state, string);
                }
                switch(chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)){
                    case STYLE_PLAIN:
                        return string;
                    case STYLE_SINGLE:
                        return "'" + string.replace(/'/g, "''") + "'";
                    case STYLE_LITERAL:
                        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
                    case STYLE_FOLDED:
                        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
                    case STYLE_DOUBLE:
                        return '"' + escapeString(string) + '"';
                    default:
                        throw new js_yaml_exception('impossible error: invalid scalar style');
                }
            }();
        }
        function blockHeader(string, indentPerLevel) {
            var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';
            var clip = '\n' === string[string.length - 1];
            var keep = clip && ('\n' === string[string.length - 2] || '\n' === string);
            var chomp = keep ? '+' : clip ? '' : '-';
            return indentIndicator + chomp + '\n';
        }
        function dropEndingNewline(string) {
            return '\n' === string[string.length - 1] ? string.slice(0, -1) : string;
        }
        function foldString(string, width) {
            var lineRe = /(\n+)([^\n]*)/g;
            var result = function() {
                var nextLF = string.indexOf('\n');
                nextLF = -1 !== nextLF ? nextLF : string.length;
                lineRe.lastIndex = nextLF;
                return foldLine(string.slice(0, nextLF), width);
            }();
            var prevMoreIndented = '\n' === string[0] || ' ' === string[0];
            var moreIndented;
            var match;
            while(match = lineRe.exec(string)){
                var prefix = match[1], line = match[2];
                moreIndented = ' ' === line[0];
                result += prefix + (prevMoreIndented || moreIndented || '' === line ? '' : '\n') + foldLine(line, width);
                prevMoreIndented = moreIndented;
            }
            return result;
        }
        function foldLine(line, width) {
            if ('' === line || ' ' === line[0]) return line;
            var breakRe = / [^ ]/g;
            var match;
            var start = 0, end, curr = 0, next = 0;
            var result = '';
            while(match = breakRe.exec(line)){
                next = match.index;
                if (next - start > width) {
                    end = curr > start ? curr : next;
                    result += '\n' + line.slice(start, end);
                    start = end + 1;
                }
                curr = next;
            }
            result += '\n';
            if (line.length - start > width && curr > start) result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
            else result += line.slice(start);
            return result.slice(1);
        }
        function escapeString(string) {
            var result = '';
            var char = 0;
            var escapeSeq;
            for(var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){
                char = codePointAt(string, i);
                escapeSeq = ESCAPE_SEQUENCES[char];
                if (!escapeSeq && isPrintable(char)) {
                    result += string[i];
                    if (char >= 0x10000) result += string[i + 1];
                } else result += escapeSeq || encodeHex(char);
            }
            return result;
        }
        function writeFlowSequence(state, level, object) {
            var _result = '', _tag = state.tag, index, length, value;
            for(index = 0, length = object.length; index < length; index += 1){
                value = object[index];
                if (state.replacer) value = state.replacer.call(object, String(index), value);
                if (writeNode(state, level, value, false, false) || void 0 === value && writeNode(state, level, null, false, false)) {
                    if ('' !== _result) _result += ',' + (state.condenseFlow ? '' : ' ');
                    _result += state.dump;
                }
            }
            state.tag = _tag;
            state.dump = '[' + _result + ']';
        }
        function writeBlockSequence(state, level, object, compact) {
            var _result = '', _tag = state.tag, index, length, value;
            for(index = 0, length = object.length; index < length; index += 1){
                value = object[index];
                if (state.replacer) value = state.replacer.call(object, String(index), value);
                if (writeNode(state, level + 1, value, true, true, false, true) || void 0 === value && writeNode(state, level + 1, null, true, true, false, true)) {
                    if (!compact || '' !== _result) _result += generateNextLine(state, level);
                    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) _result += '-';
                    else _result += '- ';
                    _result += state.dump;
                }
            }
            state.tag = _tag;
            state.dump = _result || '[]';
        }
        function writeFlowMapping(state, level, object) {
            var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
            for(index = 0, length = objectKeyList.length; index < length; index += 1){
                pairBuffer = '';
                if ('' !== _result) pairBuffer += ', ';
                if (state.condenseFlow) pairBuffer += '"';
                objectKey = objectKeyList[index];
                objectValue = object[objectKey];
                if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
                if (writeNode(state, level, objectKey, false, false)) {
                    if (state.dump.length > 1024) pairBuffer += '? ';
                    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');
                    if (writeNode(state, level, objectValue, false, false)) {
                        pairBuffer += state.dump;
                        _result += pairBuffer;
                    }
                }
            }
            state.tag = _tag;
            state.dump = '{' + _result + '}';
        }
        function writeBlockMapping(state, level, object, compact) {
            var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
            if (true === state.sortKeys) objectKeyList.sort();
            else if ('function' == typeof state.sortKeys) objectKeyList.sort(state.sortKeys);
            else if (state.sortKeys) throw new js_yaml_exception('sortKeys must be a boolean or a function');
            for(index = 0, length = objectKeyList.length; index < length; index += 1){
                pairBuffer = '';
                if (!compact || '' !== _result) pairBuffer += generateNextLine(state, level);
                objectKey = objectKeyList[index];
                objectValue = object[objectKey];
                if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
                if (writeNode(state, level + 1, objectKey, true, true, true)) {
                    explicitPair = null !== state.tag && '?' !== state.tag || state.dump && state.dump.length > 1024;
                    if (explicitPair) if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += '?';
                    else pairBuffer += '? ';
                    pairBuffer += state.dump;
                    if (explicitPair) pairBuffer += generateNextLine(state, level);
                    if (writeNode(state, level + 1, objectValue, true, explicitPair)) {
                        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += ':';
                        else pairBuffer += ': ';
                        pairBuffer += state.dump;
                        _result += pairBuffer;
                    }
                }
            }
            state.tag = _tag;
            state.dump = _result || '{}';
        }
        function detectType(state, object, explicit) {
            var _result, typeList, index, length, type, style;
            typeList = explicit ? state.explicitTypes : state.implicitTypes;
            for(index = 0, length = typeList.length; index < length; index += 1){
                type = typeList[index];
                if ((type.instanceOf || type.predicate) && (!type.instanceOf || 'object' == typeof object && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
                    if (explicit) if (type.multi && type.representName) state.tag = type.representName(object);
                    else state.tag = type.tag;
                    else state.tag = '?';
                    if (type.represent) {
                        style = state.styleMap[type.tag] || type.defaultStyle;
                        if ('[object Function]' === _toString.call(type.represent)) _result = type.represent(object, style);
                        else if (_hasOwnProperty.call(type.represent, style)) _result = type.represent[style](object, style);
                        else throw new js_yaml_exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
                        state.dump = _result;
                    }
                    return true;
                }
            }
            return false;
        }
        function writeNode(state, level, object, block, compact, iskey, isblockseq) {
            state.tag = null;
            state.dump = object;
            if (!detectType(state, object, false)) detectType(state, object, true);
            var type = _toString.call(state.dump);
            var inblock = block;
            var tagStr;
            if (block) block = state.flowLevel < 0 || state.flowLevel > level;
            var objectOrArray = '[object Object]' === type || '[object Array]' === type, duplicateIndex, duplicate;
            if (objectOrArray) {
                duplicateIndex = state.duplicates.indexOf(object);
                duplicate = -1 !== duplicateIndex;
            }
            if (null !== state.tag && '?' !== state.tag || duplicate || 2 !== state.indent && level > 0) compact = false;
            if (duplicate && state.usedDuplicates[duplicateIndex]) state.dump = '*ref_' + duplicateIndex;
            else {
                if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) state.usedDuplicates[duplicateIndex] = true;
                if ('[object Object]' === type) if (block && 0 !== Object.keys(state.dump).length) {
                    writeBlockMapping(state, level, state.dump, compact);
                    if (duplicate) state.dump = '&ref_' + duplicateIndex + state.dump;
                } else {
                    writeFlowMapping(state, level, state.dump);
                    if (duplicate) state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
                }
                else if ('[object Array]' === type) if (block && 0 !== state.dump.length) {
                    state.noArrayIndent && !isblockseq && level > 0 ? writeBlockSequence(state, level - 1, state.dump, compact) : writeBlockSequence(state, level, state.dump, compact);
                    if (duplicate) state.dump = '&ref_' + duplicateIndex + state.dump;
                } else {
                    writeFlowSequence(state, level, state.dump);
                    if (duplicate) state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
                }
                else if ('[object String]' === type) {
                    if ('?' !== state.tag) writeScalar(state, state.dump, level, iskey, inblock);
                } else {
                    if ('[object Undefined]' === type) return false;
                    if (state.skipInvalid) return false;
                    throw new js_yaml_exception('unacceptable kind of an object to dump ' + type);
                }
                if (null !== state.tag && '?' !== state.tag) {
                    tagStr = encodeURI('!' === state.tag[0] ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');
                    tagStr = '!' === state.tag[0] ? '!' + tagStr : 'tag:yaml.org,2002:' === tagStr.slice(0, 18) ? '!!' + tagStr.slice(18) : '!<' + tagStr + '>';
                    state.dump = tagStr + ' ' + state.dump;
                }
            }
            return true;
        }
        function getDuplicateReferences(object, state) {
            var objects = [], duplicatesIndexes = [], index, length;
            inspectNode(object, objects, duplicatesIndexes);
            for(index = 0, length = duplicatesIndexes.length; index < length; index += 1)state.duplicates.push(objects[duplicatesIndexes[index]]);
            state.usedDuplicates = new Array(length);
        }
        function inspectNode(object, objects, duplicatesIndexes) {
            var objectKeyList, index, length;
            if (null !== object && 'object' == typeof object) {
                index = objects.indexOf(object);
                if (-1 !== index) {
                    if (-1 === duplicatesIndexes.indexOf(index)) duplicatesIndexes.push(index);
                } else {
                    objects.push(object);
                    if (Array.isArray(object)) for(index = 0, length = object.length; index < length; index += 1)inspectNode(object[index], objects, duplicatesIndexes);
                    else {
                        objectKeyList = Object.keys(object);
                        for(index = 0, length = objectKeyList.length; index < length; index += 1)inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
                    }
                }
            }
        }
        function dump$1(input, options) {
            options = options || {};
            var state = new State(options);
            if (!state.noRefs) getDuplicateReferences(input, state);
            var value = input;
            if (state.replacer) value = state.replacer.call({
                '': value
            }, '', value);
            if (writeNode(state, 0, value, true, true)) return state.dump + '\n';
            return '';
        }
        var dump_1 = dump$1;
        var dumper = {
            dump: dump_1
        };
        function renamed(from, to) {
            return function() {
                throw new Error('Function yaml.' + from + " is removed in js-yaml 4. Use yaml." + to + ' instead, which is now safe by default.');
            };
        }
        var js_yaml_load = loader.load;
        loader.loadAll;
        dumper.dump;
        renamed('safeLoad', 'load');
        renamed('safeLoadAll', 'loadAll');
        renamed('safeDump', 'dump');
        const config_factory_defaultConfig = {
            concurrent: 1,
            continueOnError: false,
            shareBrowserContext: false,
            headed: false,
            keepWindow: false,
            dotenvOverride: false,
            dotenvDebug: false
        };
        async function expandFilePatterns(patterns, basePath) {
            const allFiles = [];
            const seenFiles = new Set();
            for (const pattern of patterns)try {
                const yamlFiles = await matchYamlFiles(pattern, {
                    cwd: basePath
                });
                for (const file of yamlFiles)if (!seenFiles.has(file)) {
                    seenFiles.add(file);
                    allFiles.push(file);
                }
            } catch (error) {
                console.warn(`Warning: Failed to expand pattern "${pattern}":`, error);
            }
            return allFiles;
        }
        async function parseConfigYaml(configYamlPath) {
            const basePath = (0, external_node_path_namespaceObject.dirname)((0, external_node_path_namespaceObject.resolve)(configYamlPath));
            const configContent = (0, external_node_fs_namespaceObject.readFileSync)(configYamlPath, 'utf8');
            const interpolatedContent = (0, yaml_namespaceObject.interpolateEnvVars)(configContent);
            let configYaml;
            try {
                configYaml = js_yaml_load(interpolatedContent);
            } catch (error) {
                throw new Error(`Failed to parse config YAML: ${error}`);
            }
            if (!(null == configYaml ? void 0 : configYaml.files) || !Array.isArray(null == configYaml ? void 0 : configYaml.files)) throw new Error('Config YAML must contain a "files" array');
            const files = await expandFilePatterns(null == configYaml ? void 0 : configYaml.files, basePath);
            if (0 === files.length) throw new Error('No YAML files found matching the patterns in "files"');
            const configFileName = (0, external_node_path_namespaceObject.basename)(configYamlPath, (0, external_node_path_namespaceObject.extname)(configYamlPath));
            const timestamp = Date.now();
            const defaultSummary = `${configFileName}-${timestamp}.json`;
            const config = {
                concurrent: configYaml.concurrent ?? config_factory_defaultConfig.concurrent,
                continueOnError: configYaml.continueOnError ?? config_factory_defaultConfig.continueOnError,
                summary: configYaml.summary ?? defaultSummary,
                shareBrowserContext: configYaml.shareBrowserContext ?? config_factory_defaultConfig.shareBrowserContext,
                web: configYaml.web,
                android: configYaml.android,
                patterns: configYaml.files,
                files,
                headed: configYaml.headed ?? config_factory_defaultConfig.headed,
                keepWindow: configYaml.keepWindow ?? config_factory_defaultConfig.keepWindow,
                dotenvOverride: configYaml.dotenvOverride ?? config_factory_defaultConfig.dotenvOverride,
                dotenvDebug: configYaml.dotenvDebug ?? config_factory_defaultConfig.dotenvDebug
            };
            return config;
        }
        async function createConfig(configYamlPath, options) {
            const parsedConfig = await parseConfigYaml(configYamlPath);
            const globalConfig = external_lodash_merge_default()({
                web: parsedConfig.web,
                android: parsedConfig.android,
                target: parsedConfig.target
            }, {
                web: null == options ? void 0 : options.web,
                android: null == options ? void 0 : options.android
            });
            const keepWindow = (null == options ? void 0 : options.keepWindow) ?? parsedConfig.keepWindow;
            const headed = (null == options ? void 0 : options.headed) ?? parsedConfig.headed;
            const finalHeaded = keepWindow || headed;
            return {
                files: parsedConfig.files,
                concurrent: (null == options ? void 0 : options.concurrent) ?? parsedConfig.concurrent,
                continueOnError: (null == options ? void 0 : options.continueOnError) ?? parsedConfig.continueOnError,
                summary: (null == options ? void 0 : options.summary) ?? parsedConfig.summary,
                shareBrowserContext: (null == options ? void 0 : options.shareBrowserContext) ?? parsedConfig.shareBrowserContext,
                headed: finalHeaded,
                keepWindow: keepWindow,
                dotenvOverride: (null == options ? void 0 : options.dotenvOverride) ?? parsedConfig.dotenvOverride,
                dotenvDebug: (null == options ? void 0 : options.dotenvDebug) ?? parsedConfig.dotenvDebug,
                globalConfig
            };
        }
        async function createFilesConfig(patterns, options = {}) {
            const files = await expandFilePatterns(patterns, (0, external_node_process_namespaceObject.cwd)());
            const timestamp = Date.now();
            const defaultSummary = `summary-${timestamp}.json`;
            const keepWindow = options.keepWindow ?? config_factory_defaultConfig.keepWindow;
            const headed = options.headed ?? config_factory_defaultConfig.headed;
            const finalHeaded = keepWindow || headed;
            return {
                files,
                concurrent: options.concurrent ?? config_factory_defaultConfig.concurrent,
                continueOnError: options.continueOnError ?? config_factory_defaultConfig.continueOnError,
                summary: options.summary ?? defaultSummary,
                shareBrowserContext: options.shareBrowserContext ?? config_factory_defaultConfig.shareBrowserContext,
                headed: finalHeaded,
                keepWindow: keepWindow,
                dotenvOverride: options.dotenvOverride ?? config_factory_defaultConfig.dotenvOverride,
                dotenvDebug: options.dotenvDebug ?? config_factory_defaultConfig.dotenvDebug,
                globalConfig: {
                    web: options.web,
                    android: options.android
                }
            };
        }
        const debug = (0, logger_namespaceObject.getDebug)('midscene:cli');
        const parseProcessArgs = async ()=>{
            const args = yargs(hideBin(process.argv)).usage(`Midscene.js helps you automate browser actions, assertions, and data extraction by AI. 
Homepage: https://midscenejs.com
Github: https://github.com/web-infra-dev/midscene

Usage: 
      $0 [options] <path-to-yaml-script-file-or-directory>
      $0 [options] --files <yaml-file1> <yaml-file2 ...>
      $0 [options] --config <path-to-config-yaml-file>`).options({
                files: {
                    type: 'array',
                    string: true,
                    description: 'A list of yaml files to run, separated by space'
                },
                config: {
                    type: 'string',
                    description: 'Path to a configuration file. Options in this file are used as defaults.'
                },
                summary: {
                    type: 'string',
                    description: 'Path for the summary output file'
                },
                concurrent: {
                    type: 'number',
                    description: `Number of concurrent executions, default is ${config_factory_defaultConfig.concurrent}`
                },
                'continue-on-error': {
                    type: 'boolean',
                    description: `Continue execution even if some tasks fail, default is ${config_factory_defaultConfig.continueOnError}`
                },
                headed: {
                    type: 'boolean',
                    description: `Run the browser in headed mode to see the browser UI, default is ${config_factory_defaultConfig.headed}`
                },
                'keep-window': {
                    type: 'boolean',
                    description: `Keep the browser window open after the script finishes. This option automatically enables --headed mode. This is useful when debugging, but will consume more resources, default is ${config_factory_defaultConfig.keepWindow}`
                },
                'share-browser-context': {
                    type: 'boolean',
                    description: `Share browser context across multiple yaml files, default is ${config_factory_defaultConfig.shareBrowserContext}`
                },
                'dotenv-override': {
                    type: 'boolean',
                    description: `Whether the variables in the .env file override the global variables, the default is ${config_factory_defaultConfig.dotenvOverride}`
                },
                'dotenv-debug': {
                    type: 'boolean',
                    description: `Turn on logging to help debug why certain keys or values are not being set as you expect, default is ${config_factory_defaultConfig.dotenvDebug}`
                },
                'web.user-agent': {
                    alias: 'web.userAgent',
                    type: 'string',
                    description: 'Override user agent for web environments.'
                },
                'web.viewport-width': {
                    alias: 'web.viewportWidth',
                    type: 'number',
                    description: 'Override viewport width for web environments.'
                },
                'web.viewport-height': {
                    alias: 'web.viewportHeight',
                    type: 'number',
                    description: 'Override viewport height for web environments.'
                },
                'android.device-id': {
                    alias: 'android.deviceId',
                    type: 'string',
                    description: 'Override device ID for Android environments.'
                }
            }).version('version', 'Show version number', "0.27.6").help().wrap(yargs().terminalWidth());
            const argv = await args.argv;
            debug('argv', argv);
            return {
                path: argv._[0],
                files: argv.files,
                options: argv
            };
        };
        async function matchYamlFiles(fileGlob, options) {
            if ((0, external_node_fs_namespaceObject.existsSync)(fileGlob) && (0, external_node_fs_namespaceObject.statSync)(fileGlob).isDirectory()) fileGlob = (0, external_node_path_namespaceObject.join)(fileGlob, '**/*.{yml,yaml}');
            const { cwd } = options || {};
            const ignore = [
                '**/node_modules/**'
            ];
            const files = await esm_glob(fileGlob, {
                nodir: true,
                windowsPathsNoEscape: true,
                absolute: true,
                ignore,
                cwd
            });
            return files.filter((file)=>file.endsWith('.yml') || file.endsWith('.yaml')).sort();
        }
        Promise.resolve((async ()=>{
            const { options, path, files: cmdFiles } = await parseProcessArgs();
            const welcome = `\nWelcome to @midscene/cli v${package_namespaceObject.i8}\n`;
            console.log(welcome);
            if (options.url) {
                console.error("the cli mode is no longer supported, please use yaml file instead. See https://midscenejs.com/automate-with-scripts-in-yaml for more information. Sorry for the inconvenience.");
                process.exit(1);
            }
            const configFile = options.config;
            if (!configFile && !path && !(cmdFiles && cmdFiles.length > 0)) {
                console.error("No script path, files, or config provided");
                process.exit(1);
            }
            const configOptions = {
                concurrent: options.concurrent,
                continueOnError: options['continue-on-error'],
                summary: options.summary,
                shareBrowserContext: options['share-browser-context'],
                headed: options.headed,
                keepWindow: options['keep-window'],
                dotenvOverride: options['dotenv-override'],
                dotenvDebug: options['dotenv-debug'],
                web: options.web,
                android: options.android
            };
            let config;
            if (configFile) {
                config = await createConfig(configFile, configOptions);
                console.log(`   Config file: ${configFile}`);
            } else if (cmdFiles && cmdFiles.length > 0) {
                console.log('   Executing YAML files from --files argument...');
                config = await createFilesConfig(cmdFiles, configOptions);
            } else if (path) {
                const files = await matchYamlFiles(path);
                if (0 === files.length) {
                    console.error(`No yaml files found in ${path}`);
                    process.exit(1);
                }
                console.log('   Executing YAML files...');
                config = await createFilesConfig(files, configOptions);
            }
            if (!config) {
                console.error('Could not create a valid configuration.');
                process.exit(1);
            }
            const dotEnvConfigFile = (0, external_node_path_namespaceObject.join)(process.cwd(), '.env');
            if ((0, external_node_fs_namespaceObject.existsSync)(dotEnvConfigFile)) {
                console.log(`   Env file: ${dotEnvConfigFile}`);
                main_default().config({
                    path: dotEnvConfigFile,
                    debug: config.dotenvDebug,
                    override: config.dotenvOverride
                });
            }
            const executor = new BatchRunner(config);
            await executor.run();
            const success = executor.printExecutionSummary();
            if (config.keepWindow) setInterval(()=>{
                console.log('browser is still running, use ctrl+c to stop it');
            }, 5000);
            else {
                if (!success) process.exit(1);
                process.exit(0);
            }
        })().catch((e1)=>{
            console.error(e1);
            process.exit(1);
        }));
    },
    assert: function(module) {
        "use strict";
        module.exports = require("assert");
    },
    crypto: function(module) {
        "use strict";
        module.exports = require("crypto");
    },
    fs: function(module) {
        "use strict";
        module.exports = require("fs");
    },
    os: function(module) {
        "use strict";
        module.exports = require("os");
    },
    path: function(module) {
        "use strict";
        module.exports = require("path");
    },
    tty: function(module) {
        "use strict";
        module.exports = require("tty");
    },
    util: function(module) {
        "use strict";
        module.exports = require("util");
    },
    "../../node_modules/.pnpm/cliui@8.0.1/node_modules/cliui/build/index.cjs": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        const align = {
            right: alignRight,
            center: alignCenter
        };
        const top = 0;
        const right = 1;
        const bottom = 2;
        const left = 3;
        class UI {
            constructor(opts){
                var _a;
                this.width = opts.width;
                this.wrap = null != (_a = opts.wrap) ? _a : true;
                this.rows = [];
            }
            span(...args) {
                const cols = this.div(...args);
                cols.span = true;
            }
            resetOutput() {
                this.rows = [];
            }
            div(...args) {
                if (0 === args.length) this.div('');
                if (this.wrap && this.shouldApplyLayoutDSL(...args) && 'string' == typeof args[0]) return this.applyLayoutDSL(args[0]);
                const cols = args.map((arg)=>{
                    if ('string' == typeof arg) return this.colFromString(arg);
                    return arg;
                });
                this.rows.push(cols);
                return cols;
            }
            shouldApplyLayoutDSL(...args) {
                return 1 === args.length && 'string' == typeof args[0] && /[\t\n]/.test(args[0]);
            }
            applyLayoutDSL(str) {
                const rows = str.split('\n').map((row)=>row.split('\t'));
                let leftColumnWidth = 0;
                rows.forEach((columns)=>{
                    if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) leftColumnWidth = Math.min(Math.floor(0.5 * this.width), mixin.stringWidth(columns[0]));
                });
                rows.forEach((columns)=>{
                    this.div(...columns.map((r, i)=>({
                            text: r.trim(),
                            padding: this.measurePadding(r),
                            width: 0 === i && columns.length > 1 ? leftColumnWidth : void 0
                        })));
                });
                return this.rows[this.rows.length - 1];
            }
            colFromString(text) {
                return {
                    text,
                    padding: this.measurePadding(text)
                };
            }
            measurePadding(str) {
                const noAnsi = mixin.stripAnsi(str);
                return [
                    0,
                    noAnsi.match(/\s*$/)[0].length,
                    0,
                    noAnsi.match(/^\s*/)[0].length
                ];
            }
            toString() {
                const lines = [];
                this.rows.forEach((row)=>{
                    this.rowToString(row, lines);
                });
                return lines.filter((line)=>!line.hidden).map((line)=>line.text).join('\n');
            }
            rowToString(row, lines) {
                this.rasterize(row).forEach((rrow, r)=>{
                    let str = '';
                    rrow.forEach((col, c)=>{
                        const { width } = row[c];
                        const wrapWidth = this.negatePadding(row[c]);
                        let ts = col;
                        if (wrapWidth > mixin.stringWidth(col)) ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));
                        if (row[c].align && 'left' !== row[c].align && this.wrap) {
                            const fn = align[row[c].align];
                            ts = fn(ts, wrapWidth);
                            if (mixin.stringWidth(ts) < wrapWidth) ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);
                        }
                        const padding = row[c].padding || [
                            0,
                            0,
                            0,
                            0
                        ];
                        if (padding[left]) str += ' '.repeat(padding[left]);
                        str += addBorder(row[c], ts, '| ');
                        str += ts;
                        str += addBorder(row[c], ts, ' |');
                        if (padding[right]) str += ' '.repeat(padding[right]);
                        if (0 === r && lines.length > 0) str = this.renderInline(str, lines[lines.length - 1]);
                    });
                    lines.push({
                        text: str.replace(/ +$/, ''),
                        span: row.span
                    });
                });
                return lines;
            }
            renderInline(source, previousLine) {
                const match = source.match(/^ */);
                const leadingWhitespace = match ? match[0].length : 0;
                const target = previousLine.text;
                const targetTextWidth = mixin.stringWidth(target.trimRight());
                if (!previousLine.span) return source;
                if (!this.wrap) {
                    previousLine.hidden = true;
                    return target + source;
                }
                if (leadingWhitespace < targetTextWidth) return source;
                previousLine.hidden = true;
                return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();
            }
            rasterize(row) {
                const rrows = [];
                const widths = this.columnWidths(row);
                let wrapped;
                row.forEach((col, c)=>{
                    col.width = widths[c];
                    wrapped = this.wrap ? mixin.wrap(col.text, this.negatePadding(col), {
                        hard: true
                    }).split('\n') : col.text.split('\n');
                    if (col.border) {
                        wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');
                        wrapped.push("'" + '-'.repeat(this.negatePadding(col) + 2) + "'");
                    }
                    if (col.padding) {
                        wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));
                        wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));
                    }
                    wrapped.forEach((str, r)=>{
                        if (!rrows[r]) rrows.push([]);
                        const rrow = rrows[r];
                        for(let i = 0; i < c; i++)if (void 0 === rrow[i]) rrow.push('');
                        rrow.push(str);
                    });
                });
                return rrows;
            }
            negatePadding(col) {
                let wrapWidth = col.width || 0;
                if (col.padding) wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);
                if (col.border) wrapWidth -= 4;
                return wrapWidth;
            }
            columnWidths(row) {
                if (!this.wrap) return row.map((col)=>col.width || mixin.stringWidth(col.text));
                let unset = row.length;
                let remainingWidth = this.width;
                const widths = row.map((col)=>{
                    if (col.width) {
                        unset--;
                        remainingWidth -= col.width;
                        return col.width;
                    }
                });
                const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;
                return widths.map((w, i)=>{
                    if (void 0 === w) return Math.max(unsetWidth, _minWidth(row[i]));
                    return w;
                });
            }
        }
        function addBorder(col, ts, style) {
            if (col.border) {
                if (/[.']-+[.']/.test(ts)) return '';
                if (0 !== ts.trim().length) return style;
                return '  ';
            }
            return '';
        }
        function _minWidth(col) {
            const padding = col.padding || [];
            const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);
            if (col.border) return minWidth + 4;
            return minWidth;
        }
        function getWindowWidth() {
            if ('object' == typeof process && process.stdout && process.stdout.columns) return process.stdout.columns;
            return 80;
        }
        function alignRight(str, width) {
            str = str.trim();
            const strWidth = mixin.stringWidth(str);
            if (strWidth < width) return ' '.repeat(width - strWidth) + str;
            return str;
        }
        function alignCenter(str, width) {
            str = str.trim();
            const strWidth = mixin.stringWidth(str);
            if (strWidth >= width) return str;
            return ' '.repeat(width - strWidth >> 1) + str;
        }
        let mixin;
        function cliui(opts, _mixin) {
            mixin = _mixin;
            return new UI({
                width: (null == opts ? void 0 : opts.width) || getWindowWidth(),
                wrap: null == opts ? void 0 : opts.wrap
            });
        }
        const stringWidth = __webpack_require__("../../node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js");
        const stripAnsi = __webpack_require__("../../node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js");
        const wrap = __webpack_require__("../../node_modules/.pnpm/wrap-ansi@7.0.0/node_modules/wrap-ansi/index.js");
        function ui(opts) {
            return cliui(opts, {
                stringWidth,
                stripAnsi,
                wrap
            });
        }
        module.exports = ui;
    },
    "../../node_modules/.pnpm/y18n@5.0.8/node_modules/y18n/build/index.cjs": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        var fs = __webpack_require__("fs");
        var util = __webpack_require__("util");
        var path = __webpack_require__("path");
        let shim;
        class Y18N {
            constructor(opts){
                opts = opts || {};
                this.directory = opts.directory || './locales';
                this.updateFiles = 'boolean' == typeof opts.updateFiles ? opts.updateFiles : true;
                this.locale = opts.locale || 'en';
                this.fallbackToLanguage = 'boolean' == typeof opts.fallbackToLanguage ? opts.fallbackToLanguage : true;
                this.cache = Object.create(null);
                this.writeQueue = [];
            }
            __(...args) {
                if ('string' != typeof arguments[0]) return this._taggedLiteral(arguments[0], ...arguments);
                const str = args.shift();
                let cb = function() {};
                if ('function' == typeof args[args.length - 1]) cb = args.pop();
                cb = cb || function() {};
                if (!this.cache[this.locale]) this._readLocaleFile();
                if (!this.cache[this.locale][str] && this.updateFiles) {
                    this.cache[this.locale][str] = str;
                    this._enqueueWrite({
                        directory: this.directory,
                        locale: this.locale,
                        cb
                    });
                } else cb();
                return shim.format.apply(shim.format, [
                    this.cache[this.locale][str] || str
                ].concat(args));
            }
            __n() {
                const args = Array.prototype.slice.call(arguments);
                const singular = args.shift();
                const plural = args.shift();
                const quantity = args.shift();
                let cb = function() {};
                if ('function' == typeof args[args.length - 1]) cb = args.pop();
                if (!this.cache[this.locale]) this._readLocaleFile();
                let str = 1 === quantity ? singular : plural;
                if (this.cache[this.locale][singular]) {
                    const entry = this.cache[this.locale][singular];
                    str = entry[1 === quantity ? 'one' : 'other'];
                }
                if (!this.cache[this.locale][singular] && this.updateFiles) {
                    this.cache[this.locale][singular] = {
                        one: singular,
                        other: plural
                    };
                    this._enqueueWrite({
                        directory: this.directory,
                        locale: this.locale,
                        cb
                    });
                } else cb();
                const values = [
                    str
                ];
                if (~str.indexOf('%d')) values.push(quantity);
                return shim.format.apply(shim.format, values.concat(args));
            }
            setLocale(locale) {
                this.locale = locale;
            }
            getLocale() {
                return this.locale;
            }
            updateLocale(obj) {
                if (!this.cache[this.locale]) this._readLocaleFile();
                for(const key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) this.cache[this.locale][key] = obj[key];
            }
            _taggedLiteral(parts, ...args) {
                let str = '';
                parts.forEach(function(part, i) {
                    const arg = args[i + 1];
                    str += part;
                    if (void 0 !== arg) str += '%s';
                });
                return this.__.apply(this, [
                    str
                ].concat([].slice.call(args, 1)));
            }
            _enqueueWrite(work) {
                this.writeQueue.push(work);
                if (1 === this.writeQueue.length) this._processWriteQueue();
            }
            _processWriteQueue() {
                const _this = this;
                const work = this.writeQueue[0];
                const directory = work.directory;
                const locale = work.locale;
                const cb = work.cb;
                const languageFile = this._resolveLocaleFile(directory, locale);
                const serializedLocale = JSON.stringify(this.cache[locale], null, 2);
                shim.fs.writeFile(languageFile, serializedLocale, 'utf-8', function(err) {
                    _this.writeQueue.shift();
                    if (_this.writeQueue.length > 0) _this._processWriteQueue();
                    cb(err);
                });
            }
            _readLocaleFile() {
                let localeLookup = {};
                const languageFile = this._resolveLocaleFile(this.directory, this.locale);
                try {
                    if (shim.fs.readFileSync) localeLookup = JSON.parse(shim.fs.readFileSync(languageFile, 'utf-8'));
                } catch (err) {
                    if (err instanceof SyntaxError) err.message = 'syntax error in ' + languageFile;
                    if ('ENOENT' === err.code) localeLookup = {};
                    else throw err;
                }
                this.cache[this.locale] = localeLookup;
            }
            _resolveLocaleFile(directory, locale) {
                let file = shim.resolve(directory, './', locale + '.json');
                if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf('_')) {
                    const languageFile = shim.resolve(directory, './', locale.split('_')[0] + '.json');
                    if (this._fileExistsSync(languageFile)) file = languageFile;
                }
                return file;
            }
            _fileExistsSync(file) {
                return shim.exists(file);
            }
        }
        function y18n$1(opts, _shim) {
            shim = _shim;
            const y18n = new Y18N(opts);
            return {
                __: y18n.__.bind(y18n),
                __n: y18n.__n.bind(y18n),
                setLocale: y18n.setLocale.bind(y18n),
                getLocale: y18n.getLocale.bind(y18n),
                updateLocale: y18n.updateLocale.bind(y18n),
                locale: y18n.locale
            };
        }
        var nodePlatformShim = {
            fs: {
                readFileSync: fs.readFileSync,
                writeFile: fs.writeFile
            },
            format: util.format,
            resolve: path.resolve,
            exists: (file)=>{
                try {
                    return fs.statSync(file).isFile();
                } catch (err) {
                    return false;
                }
            }
        };
        const y18n = (opts)=>y18n$1(opts, nodePlatformShim);
        module.exports = y18n;
    },
    "../../node_modules/.pnpm/yargs-parser@21.1.1/node_modules/yargs-parser/build/index.cjs": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        var util = __webpack_require__("util");
        var path = __webpack_require__("path");
        __webpack_require__("fs");
        function camelCase(str) {
            const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();
            if (!isCamelCase) str = str.toLowerCase();
            if (-1 === str.indexOf('-') && -1 === str.indexOf('_')) return str;
            {
                let camelcase = '';
                let nextChrUpper = false;
                const leadingHyphens = str.match(/^-+/);
                for(let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++){
                    let chr = str.charAt(i);
                    if (nextChrUpper) {
                        nextChrUpper = false;
                        chr = chr.toUpperCase();
                    }
                    if (0 !== i && ('-' === chr || '_' === chr)) nextChrUpper = true;
                    else if ('-' !== chr && '_' !== chr) camelcase += chr;
                }
                return camelcase;
            }
        }
        function decamelize(str, joinString) {
            const lowercase = str.toLowerCase();
            joinString = joinString || '-';
            let notCamelcase = '';
            for(let i = 0; i < str.length; i++){
                const chrLower = lowercase.charAt(i);
                const chrString = str.charAt(i);
                if (chrLower !== chrString && i > 0) notCamelcase += `${joinString}${lowercase.charAt(i)}`;
                else notCamelcase += chrString;
            }
            return notCamelcase;
        }
        function looksLikeNumber(x) {
            if (null == x) return false;
            if ('number' == typeof x) return true;
            if (/^0x[0-9a-f]+$/i.test(x)) return true;
            if (/^0[^.]/.test(x)) return false;
            return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
        }
        function tokenizeArgString(argString) {
            if (Array.isArray(argString)) return argString.map((e1)=>'string' != typeof e1 ? e1 + '' : e1);
            argString = argString.trim();
            let i = 0;
            let prevC = null;
            let c = null;
            let opening = null;
            const args = [];
            for(let ii = 0; ii < argString.length; ii++){
                prevC = c;
                c = argString.charAt(ii);
                if (' ' === c && !opening) {
                    if (' ' !== prevC) i++;
                    continue;
                }
                if (c === opening) opening = null;
                else if (("'" === c || '"' === c) && !opening) opening = c;
                if (!args[i]) args[i] = '';
                args[i] += c;
            }
            return args;
        }
        var DefaultValuesForTypeKey;
        (function(DefaultValuesForTypeKey) {
            DefaultValuesForTypeKey["BOOLEAN"] = "boolean";
            DefaultValuesForTypeKey["STRING"] = "string";
            DefaultValuesForTypeKey["NUMBER"] = "number";
            DefaultValuesForTypeKey["ARRAY"] = "array";
        })(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));
        let mixin;
        class YargsParser {
            constructor(_mixin){
                mixin = _mixin;
            }
            parse(argsInput, options) {
                const opts = Object.assign({
                    alias: void 0,
                    array: void 0,
                    boolean: void 0,
                    config: void 0,
                    configObjects: void 0,
                    configuration: void 0,
                    coerce: void 0,
                    count: void 0,
                    default: void 0,
                    envPrefix: void 0,
                    narg: void 0,
                    normalize: void 0,
                    string: void 0,
                    number: void 0,
                    __: void 0,
                    key: void 0
                }, options);
                const args = tokenizeArgString(argsInput);
                const inputIsString = 'string' == typeof argsInput;
                const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));
                const configuration = Object.assign({
                    'boolean-negation': true,
                    'camel-case-expansion': true,
                    'combine-arrays': false,
                    'dot-notation': true,
                    'duplicate-arguments-array': true,
                    'flatten-duplicate-arrays': true,
                    'greedy-arrays': true,
                    'halt-at-non-option': false,
                    'nargs-eats-options': false,
                    'negation-prefix': 'no-',
                    'parse-numbers': true,
                    'parse-positional-numbers': true,
                    'populate--': false,
                    'set-placeholder-key': false,
                    'short-option-groups': true,
                    'strip-aliased': false,
                    'strip-dashed': false,
                    'unknown-options-as-args': false
                }, opts.configuration);
                const defaults = Object.assign(Object.create(null), opts.default);
                const configObjects = opts.configObjects || [];
                const envPrefix = opts.envPrefix;
                const notFlagsOption = configuration['populate--'];
                const notFlagsArgv = notFlagsOption ? '--' : '_';
                const newAliases = Object.create(null);
                const defaulted = Object.create(null);
                const __ = opts.__ || mixin.format;
                const flags = {
                    aliases: Object.create(null),
                    arrays: Object.create(null),
                    bools: Object.create(null),
                    strings: Object.create(null),
                    numbers: Object.create(null),
                    counts: Object.create(null),
                    normalize: Object.create(null),
                    configs: Object.create(null),
                    nargs: Object.create(null),
                    coercions: Object.create(null),
                    keys: []
                };
                const negative = /^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/;
                const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');
                [].concat(opts.array || []).filter(Boolean).forEach(function(opt) {
                    const key = 'object' == typeof opt ? opt.key : opt;
                    const assignment = Object.keys(opt).map(function(key) {
                        const arrayFlagKeys = {
                            boolean: 'bools',
                            string: 'strings',
                            number: 'numbers'
                        };
                        return arrayFlagKeys[key];
                    }).filter(Boolean).pop();
                    if (assignment) flags[assignment][key] = true;
                    flags.arrays[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.boolean || []).filter(Boolean).forEach(function(key) {
                    flags.bools[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.string || []).filter(Boolean).forEach(function(key) {
                    flags.strings[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.number || []).filter(Boolean).forEach(function(key) {
                    flags.numbers[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.count || []).filter(Boolean).forEach(function(key) {
                    flags.counts[key] = true;
                    flags.keys.push(key);
                });
                [].concat(opts.normalize || []).filter(Boolean).forEach(function(key) {
                    flags.normalize[key] = true;
                    flags.keys.push(key);
                });
                if ('object' == typeof opts.narg) Object.entries(opts.narg).forEach(([key, value])=>{
                    if ('number' == typeof value) {
                        flags.nargs[key] = value;
                        flags.keys.push(key);
                    }
                });
                if ('object' == typeof opts.coerce) Object.entries(opts.coerce).forEach(([key, value])=>{
                    if ('function' == typeof value) {
                        flags.coercions[key] = value;
                        flags.keys.push(key);
                    }
                });
                if (void 0 !== opts.config) {
                    if (Array.isArray(opts.config) || 'string' == typeof opts.config) [].concat(opts.config).filter(Boolean).forEach(function(key) {
                        flags.configs[key] = true;
                    });
                    else if ('object' == typeof opts.config) Object.entries(opts.config).forEach(([key, value])=>{
                        if ('boolean' == typeof value || 'function' == typeof value) flags.configs[key] = value;
                    });
                }
                extendAliases(opts.key, aliases, opts.default, flags.arrays);
                Object.keys(defaults).forEach(function(key) {
                    (flags.aliases[key] || []).forEach(function(alias) {
                        defaults[alias] = defaults[key];
                    });
                });
                let error = null;
                checkConfiguration();
                let notFlags = [];
                const argv = Object.assign(Object.create(null), {
                    _: []
                });
                const argvReturn = {};
                for(let i = 0; i < args.length; i++){
                    const arg = args[i];
                    const truncatedArg = arg.replace(/^-{3,}/, '---');
                    let broken;
                    let key;
                    let letters;
                    let m;
                    let next;
                    let value;
                    if ('--' !== arg && /^-/.test(arg) && isUnknownOptionAsArg(arg)) pushPositional(arg);
                    else if (truncatedArg.match(/^---+(=|$)/)) {
                        pushPositional(arg);
                        continue;
                    } else if (arg.match(/^--.+=/) || !configuration['short-option-groups'] && arg.match(/^-.+=/)) {
                        m = arg.match(/^--?([^=]+)=([\s\S]*)$/);
                        if (null !== m && Array.isArray(m) && m.length >= 3) if (checkAllAliases(m[1], flags.arrays)) i = eatArray(i, m[1], args, m[2]);
                        else if (false !== checkAllAliases(m[1], flags.nargs)) i = eatNargs(i, m[1], args, m[2]);
                        else setArg(m[1], m[2], true);
                    } else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {
                        m = arg.match(negatedBoolean);
                        if (null !== m && Array.isArray(m) && m.length >= 2) {
                            key = m[1];
                            setArg(key, checkAllAliases(key, flags.arrays) ? [
                                false
                            ] : false);
                        }
                    } else if (arg.match(/^--.+/) || !configuration['short-option-groups'] && arg.match(/^-[^-]+/)) {
                        m = arg.match(/^--?(.+)/);
                        if (null !== m && Array.isArray(m) && m.length >= 2) {
                            key = m[1];
                            if (checkAllAliases(key, flags.arrays)) i = eatArray(i, key, args);
                            else if (false !== checkAllAliases(key, flags.nargs)) i = eatNargs(i, key, args);
                            else {
                                next = args[i + 1];
                                if (void 0 !== next && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                                    setArg(key, next);
                                    i++;
                                } else if (/^(true|false)$/.test(next)) {
                                    setArg(key, next);
                                    i++;
                                } else setArg(key, defaultValue(key));
                            }
                        }
                    } else if (arg.match(/^-.\..+=/)) {
                        m = arg.match(/^-([^=]+)=([\s\S]*)$/);
                        if (null !== m && Array.isArray(m) && m.length >= 3) setArg(m[1], m[2]);
                    } else if (arg.match(/^-.\..+/) && !arg.match(negative)) {
                        next = args[i + 1];
                        m = arg.match(/^-(.\..+)/);
                        if (null !== m && Array.isArray(m) && m.length >= 2) {
                            key = m[1];
                            if (void 0 === next || next.match(/^-/) || checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) setArg(key, defaultValue(key));
                            else {
                                setArg(key, next);
                                i++;
                            }
                        }
                    } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
                        letters = arg.slice(1, -1).split('');
                        broken = false;
                        for(let j = 0; j < letters.length; j++){
                            next = arg.slice(j + 2);
                            if (letters[j + 1] && '=' === letters[j + 1]) {
                                value = arg.slice(j + 3);
                                key = letters[j];
                                if (checkAllAliases(key, flags.arrays)) i = eatArray(i, key, args, value);
                                else if (false !== checkAllAliases(key, flags.nargs)) i = eatNargs(i, key, args, value);
                                else setArg(key, value);
                                broken = true;
                                break;
                            }
                            if ('-' === next) {
                                setArg(letters[j], next);
                                continue;
                            }
                            if (/[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) && false === checkAllAliases(next, flags.bools)) {
                                setArg(letters[j], next);
                                broken = true;
                                break;
                            }
                            if (letters[j + 1] && letters[j + 1].match(/\W/)) {
                                setArg(letters[j], next);
                                broken = true;
                                break;
                            }
                            setArg(letters[j], defaultValue(letters[j]));
                        }
                        key = arg.slice(-1)[0];
                        if (!broken && '-' !== key) if (checkAllAliases(key, flags.arrays)) i = eatArray(i, key, args);
                        else if (false !== checkAllAliases(key, flags.nargs)) i = eatNargs(i, key, args);
                        else {
                            next = args[i + 1];
                            if (void 0 !== next && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                                setArg(key, next);
                                i++;
                            } else if (/^(true|false)$/.test(next)) {
                                setArg(key, next);
                                i++;
                            } else setArg(key, defaultValue(key));
                        }
                    } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {
                        key = arg.slice(1);
                        setArg(key, defaultValue(key));
                    } else if ('--' === arg) {
                        notFlags = args.slice(i + 1);
                        break;
                    } else if (configuration['halt-at-non-option']) {
                        notFlags = args.slice(i);
                        break;
                    } else pushPositional(arg);
                }
                applyEnvVars(argv, true);
                applyEnvVars(argv, false);
                setConfig(argv);
                setConfigObjects();
                applyDefaultsAndAliases(argv, flags.aliases, defaults, true);
                applyCoercions(argv);
                if (configuration['set-placeholder-key']) setPlaceholderKeys(argv);
                Object.keys(flags.counts).forEach(function(key) {
                    if (!hasKey(argv, key.split('.'))) setArg(key, 0);
                });
                if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = [];
                notFlags.forEach(function(key) {
                    argv[notFlagsArgv].push(key);
                });
                if (configuration['camel-case-expansion'] && configuration['strip-dashed']) Object.keys(argv).filter((key)=>'--' !== key && key.includes('-')).forEach((key)=>{
                    delete argv[key];
                });
                if (configuration['strip-aliased']) [].concat(...Object.keys(aliases).map((k)=>aliases[k])).forEach((alias)=>{
                    if (configuration['camel-case-expansion'] && alias.includes('-')) delete argv[alias.split('.').map((prop)=>camelCase(prop)).join('.')];
                    delete argv[alias];
                });
                function pushPositional(arg) {
                    const maybeCoercedNumber = maybeCoerceNumber('_', arg);
                    if ('string' == typeof maybeCoercedNumber || 'number' == typeof maybeCoercedNumber) argv._.push(maybeCoercedNumber);
                }
                function eatNargs(i, key, args, argAfterEqualSign) {
                    let ii;
                    let toEat = checkAllAliases(key, flags.nargs);
                    toEat = 'number' != typeof toEat || isNaN(toEat) ? 1 : toEat;
                    if (0 === toEat) {
                        if (!isUndefined(argAfterEqualSign)) error = Error(__('Argument unexpected for: %s', key));
                        setArg(key, defaultValue(key));
                        return i;
                    }
                    let available = isUndefined(argAfterEqualSign) ? 0 : 1;
                    if (configuration['nargs-eats-options']) {
                        if (args.length - (i + 1) + available < toEat) error = Error(__('Not enough arguments following: %s', key));
                        available = toEat;
                    } else {
                        for(ii = i + 1; ii < args.length; ii++)if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii])) available++;
                        else break;
                        if (available < toEat) error = Error(__('Not enough arguments following: %s', key));
                    }
                    let consumed = Math.min(available, toEat);
                    if (!isUndefined(argAfterEqualSign) && consumed > 0) {
                        setArg(key, argAfterEqualSign);
                        consumed--;
                    }
                    for(ii = i + 1; ii < consumed + i + 1; ii++)setArg(key, args[ii]);
                    return i + consumed;
                }
                function eatArray(i, key, args, argAfterEqualSign) {
                    let argsToSet = [];
                    let next = argAfterEqualSign || args[i + 1];
                    const nargsCount = checkAllAliases(key, flags.nargs);
                    if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) argsToSet.push(true);
                    else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {
                        if (void 0 !== defaults[key]) {
                            const defVal = defaults[key];
                            argsToSet = Array.isArray(defVal) ? defVal : [
                                defVal
                            ];
                        }
                    } else {
                        if (!isUndefined(argAfterEqualSign)) argsToSet.push(processValue(key, argAfterEqualSign, true));
                        for(let ii = i + 1; ii < args.length; ii++){
                            if (!configuration['greedy-arrays'] && argsToSet.length > 0 || nargsCount && 'number' == typeof nargsCount && argsToSet.length >= nargsCount) break;
                            next = args[ii];
                            if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) break;
                            i = ii;
                            argsToSet.push(processValue(key, next, inputIsString));
                        }
                    }
                    if ('number' == typeof nargsCount && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && 0 === argsToSet.length)) error = Error(__('Not enough arguments following: %s', key));
                    setArg(key, argsToSet);
                    return i;
                }
                function setArg(key, val, shouldStripQuotes = inputIsString) {
                    if (/-/.test(key) && configuration['camel-case-expansion']) {
                        const alias = key.split('.').map(function(prop) {
                            return camelCase(prop);
                        }).join('.');
                        addNewAlias(key, alias);
                    }
                    const value = processValue(key, val, shouldStripQuotes);
                    const splitKey = key.split('.');
                    setKey(argv, splitKey, value);
                    if (flags.aliases[key]) flags.aliases[key].forEach(function(x) {
                        const keyProperties = x.split('.');
                        setKey(argv, keyProperties, value);
                    });
                    if (splitKey.length > 1 && configuration['dot-notation']) (flags.aliases[splitKey[0]] || []).forEach(function(x) {
                        let keyProperties = x.split('.');
                        const a = [].concat(splitKey);
                        a.shift();
                        keyProperties = keyProperties.concat(a);
                        if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) setKey(argv, keyProperties, value);
                    });
                    if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {
                        const keys = [
                            key
                        ].concat(flags.aliases[key] || []);
                        keys.forEach(function(key) {
                            Object.defineProperty(argvReturn, key, {
                                enumerable: true,
                                get () {
                                    return val;
                                },
                                set (value) {
                                    val = 'string' == typeof value ? mixin.normalize(value) : value;
                                }
                            });
                        });
                    }
                }
                function addNewAlias(key, alias) {
                    if (!(flags.aliases[key] && flags.aliases[key].length)) {
                        flags.aliases[key] = [
                            alias
                        ];
                        newAliases[alias] = true;
                    }
                    if (!(flags.aliases[alias] && flags.aliases[alias].length)) addNewAlias(alias, key);
                }
                function processValue(key, val, shouldStripQuotes) {
                    if (shouldStripQuotes) val = stripQuotes(val);
                    if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {
                        if ('string' == typeof val) val = 'true' === val;
                    }
                    let value = Array.isArray(val) ? val.map(function(v) {
                        return maybeCoerceNumber(key, v);
                    }) : maybeCoerceNumber(key, val);
                    if (checkAllAliases(key, flags.counts) && (isUndefined(value) || 'boolean' == typeof value)) value = increment();
                    if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) value = Array.isArray(val) ? val.map((val)=>mixin.normalize(val)) : mixin.normalize(val);
                    return value;
                }
                function maybeCoerceNumber(key, value) {
                    if (!configuration['parse-positional-numbers'] && '_' === key) return value;
                    if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {
                        const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));
                        if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) value = Number(value);
                    }
                    return value;
                }
                function setConfig(argv) {
                    const configLookup = Object.create(null);
                    applyDefaultsAndAliases(configLookup, flags.aliases, defaults);
                    Object.keys(flags.configs).forEach(function(configKey) {
                        const configPath = argv[configKey] || configLookup[configKey];
                        if (configPath) try {
                            let config = null;
                            const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);
                            const resolveConfig = flags.configs[configKey];
                            if ('function' == typeof resolveConfig) {
                                try {
                                    config = resolveConfig(resolvedConfigPath);
                                } catch (e1) {
                                    config = e1;
                                }
                                if (config instanceof Error) {
                                    error = config;
                                    return;
                                }
                            } else config = mixin.require(resolvedConfigPath);
                            setConfigObject(config);
                        } catch (ex) {
                            if ('PermissionDenied' === ex.name) error = ex;
                            else if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath));
                        }
                    });
                }
                function setConfigObject(config, prev) {
                    Object.keys(config).forEach(function(key) {
                        const value = config[key];
                        const fullKey = prev ? prev + '.' + key : key;
                        if ('object' == typeof value && null !== value && !Array.isArray(value) && configuration['dot-notation']) setConfigObject(value, fullKey);
                        else if (!hasKey(argv, fullKey.split('.')) || checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays']) setArg(fullKey, value);
                    });
                }
                function setConfigObjects() {
                    if (void 0 !== configObjects) configObjects.forEach(function(configObject) {
                        setConfigObject(configObject);
                    });
                }
                function applyEnvVars(argv, configOnly) {
                    if (void 0 === envPrefix) return;
                    const prefix = 'string' == typeof envPrefix ? envPrefix : '';
                    const env = mixin.env();
                    Object.keys(env).forEach(function(envVar) {
                        if ('' === prefix || 0 === envVar.lastIndexOf(prefix, 0)) {
                            const keys = envVar.split('__').map(function(key, i) {
                                if (0 === i) key = key.substring(prefix.length);
                                return camelCase(key);
                            });
                            if ((configOnly && flags.configs[keys.join('.')] || !configOnly) && !hasKey(argv, keys)) setArg(keys.join('.'), env[envVar]);
                        }
                    });
                }
                function applyCoercions(argv) {
                    let coerce;
                    const applied = new Set();
                    Object.keys(argv).forEach(function(key) {
                        if (!applied.has(key)) {
                            coerce = checkAllAliases(key, flags.coercions);
                            if ('function' == typeof coerce) try {
                                const value = maybeCoerceNumber(key, coerce(argv[key]));
                                [].concat(flags.aliases[key] || [], key).forEach((ali)=>{
                                    applied.add(ali);
                                    argv[ali] = value;
                                });
                            } catch (err) {
                                error = err;
                            }
                        }
                    });
                }
                function setPlaceholderKeys(argv) {
                    flags.keys.forEach((key)=>{
                        if (~key.indexOf('.')) return;
                        if (void 0 === argv[key]) argv[key] = void 0;
                    });
                    return argv;
                }
                function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {
                    Object.keys(defaults).forEach(function(key) {
                        if (!hasKey(obj, key.split('.'))) {
                            setKey(obj, key.split('.'), defaults[key]);
                            if (canLog) defaulted[key] = true;
                            (aliases[key] || []).forEach(function(x) {
                                if (hasKey(obj, x.split('.'))) return;
                                setKey(obj, x.split('.'), defaults[key]);
                            });
                        }
                    });
                }
                function hasKey(obj, keys) {
                    let o = obj;
                    if (!configuration['dot-notation']) keys = [
                        keys.join('.')
                    ];
                    keys.slice(0, -1).forEach(function(key) {
                        o = o[key] || {};
                    });
                    const key = keys[keys.length - 1];
                    if ('object' != typeof o) return false;
                    return key in o;
                }
                function setKey(obj, keys, value) {
                    let o = obj;
                    if (!configuration['dot-notation']) keys = [
                        keys.join('.')
                    ];
                    keys.slice(0, -1).forEach(function(key) {
                        key = sanitizeKey(key);
                        if ('object' == typeof o && void 0 === o[key]) o[key] = {};
                        if ('object' != typeof o[key] || Array.isArray(o[key])) {
                            if (Array.isArray(o[key])) o[key].push({});
                            else o[key] = [
                                o[key],
                                {}
                            ];
                            o = o[key][o[key].length - 1];
                        } else o = o[key];
                    });
                    const key = sanitizeKey(keys[keys.length - 1]);
                    const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);
                    const isValueArray = Array.isArray(value);
                    let duplicate = configuration['duplicate-arguments-array'];
                    if (!duplicate && checkAllAliases(key, flags.nargs)) {
                        duplicate = true;
                        if (!isUndefined(o[key]) && 1 === flags.nargs[key] || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) o[key] = void 0;
                    }
                    if (value === increment()) o[key] = increment(o[key]);
                    else if (Array.isArray(o[key])) if (duplicate && isTypeArray && isValueArray) o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [
                        o[key]
                    ]).concat([
                        value
                    ]);
                    else if (duplicate || Boolean(isTypeArray) !== Boolean(isValueArray)) o[key] = o[key].concat([
                        value
                    ]);
                    else o[key] = value;
                    else if (void 0 === o[key] && isTypeArray) o[key] = isValueArray ? value : [
                        value
                    ];
                    else if (duplicate && !(void 0 === o[key] || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) o[key] = [
                        o[key],
                        value
                    ];
                    else o[key] = value;
                }
                function extendAliases(...args) {
                    args.forEach(function(obj) {
                        Object.keys(obj || {}).forEach(function(key) {
                            if (flags.aliases[key]) return;
                            flags.aliases[key] = [].concat(aliases[key] || []);
                            flags.aliases[key].concat(key).forEach(function(x) {
                                if (/-/.test(x) && configuration['camel-case-expansion']) {
                                    const c = camelCase(x);
                                    if (c !== key && -1 === flags.aliases[key].indexOf(c)) {
                                        flags.aliases[key].push(c);
                                        newAliases[c] = true;
                                    }
                                }
                            });
                            flags.aliases[key].concat(key).forEach(function(x) {
                                if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {
                                    const c = decamelize(x, '-');
                                    if (c !== key && -1 === flags.aliases[key].indexOf(c)) {
                                        flags.aliases[key].push(c);
                                        newAliases[c] = true;
                                    }
                                }
                            });
                            flags.aliases[key].forEach(function(x) {
                                flags.aliases[x] = [
                                    key
                                ].concat(flags.aliases[key].filter(function(y) {
                                    return x !== y;
                                }));
                            });
                        });
                    });
                }
                function checkAllAliases(key, flag) {
                    const toCheck = [].concat(flags.aliases[key] || [], key);
                    const keys = Object.keys(flag);
                    const setAlias = toCheck.find((key)=>keys.includes(key));
                    return setAlias ? flag[setAlias] : false;
                }
                function hasAnyFlag(key) {
                    const flagsKeys = Object.keys(flags);
                    const toCheck = [].concat(flagsKeys.map((k)=>flags[k]));
                    return toCheck.some(function(flag) {
                        return Array.isArray(flag) ? flag.includes(key) : flag[key];
                    });
                }
                function hasFlagsMatching(arg, ...patterns) {
                    const toCheck = [].concat(...patterns);
                    return toCheck.some(function(pattern) {
                        const match = arg.match(pattern);
                        return match && hasAnyFlag(match[1]);
                    });
                }
                function hasAllShortFlags(arg) {
                    if (arg.match(negative) || !arg.match(/^-[^-]+/)) return false;
                    let hasAllFlags = true;
                    let next;
                    const letters = arg.slice(1).split('');
                    for(let j = 0; j < letters.length; j++){
                        next = arg.slice(j + 2);
                        if (!hasAnyFlag(letters[j])) {
                            hasAllFlags = false;
                            break;
                        }
                        if (letters[j + 1] && '=' === letters[j + 1] || '-' === next || /[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\W/)) break;
                    }
                    return hasAllFlags;
                }
                function isUnknownOptionAsArg(arg) {
                    return configuration['unknown-options-as-args'] && isUnknownOption(arg);
                }
                function isUnknownOption(arg) {
                    arg = arg.replace(/^-{3,}/, '--');
                    if (arg.match(negative)) return false;
                    if (hasAllShortFlags(arg)) return false;
                    const flagWithEquals = /^-+([^=]+?)=[\s\S]*$/;
                    const normalFlag = /^-+([^=]+?)$/;
                    const flagEndingInHyphen = /^-+([^=]+?)-$/;
                    const flagEndingInDigits = /^-+([^=]+?\d+)$/;
                    const flagEndingInNonWordCharacters = /^-+([^=]+?)\W+.*$/;
                    return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);
                }
                function defaultValue(key) {
                    if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) return defaults[key];
                    return defaultForType(guessType(key));
                }
                function defaultForType(type) {
                    const def = {
                        [DefaultValuesForTypeKey.BOOLEAN]: true,
                        [DefaultValuesForTypeKey.STRING]: '',
                        [DefaultValuesForTypeKey.NUMBER]: void 0,
                        [DefaultValuesForTypeKey.ARRAY]: []
                    };
                    return def[type];
                }
                function guessType(key) {
                    let type = DefaultValuesForTypeKey.BOOLEAN;
                    if (checkAllAliases(key, flags.strings)) type = DefaultValuesForTypeKey.STRING;
                    else if (checkAllAliases(key, flags.numbers)) type = DefaultValuesForTypeKey.NUMBER;
                    else if (checkAllAliases(key, flags.bools)) type = DefaultValuesForTypeKey.BOOLEAN;
                    else if (checkAllAliases(key, flags.arrays)) type = DefaultValuesForTypeKey.ARRAY;
                    return type;
                }
                function isUndefined(num) {
                    return void 0 === num;
                }
                function checkConfiguration() {
                    Object.keys(flags.counts).find((key)=>{
                        if (checkAllAliases(key, flags.arrays)) {
                            error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));
                            return true;
                        }
                        if (checkAllAliases(key, flags.nargs)) {
                            error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));
                            return true;
                        }
                        return false;
                    });
                }
                return {
                    aliases: Object.assign({}, flags.aliases),
                    argv: Object.assign(argvReturn, argv),
                    configuration: configuration,
                    defaulted: Object.assign({}, defaulted),
                    error: error,
                    newAliases: Object.assign({}, newAliases)
                };
            }
        }
        function combineAliases(aliases) {
            const aliasArrays = [];
            const combined = Object.create(null);
            let change = true;
            Object.keys(aliases).forEach(function(key) {
                aliasArrays.push([].concat(aliases[key], key));
            });
            while(change){
                change = false;
                for(let i = 0; i < aliasArrays.length; i++)for(let ii = i + 1; ii < aliasArrays.length; ii++){
                    const intersect = aliasArrays[i].filter(function(v) {
                        return -1 !== aliasArrays[ii].indexOf(v);
                    });
                    if (intersect.length) {
                        aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);
                        aliasArrays.splice(ii, 1);
                        change = true;
                        break;
                    }
                }
            }
            aliasArrays.forEach(function(aliasArray) {
                aliasArray = aliasArray.filter(function(v, i, self) {
                    return self.indexOf(v) === i;
                });
                const lastAlias = aliasArray.pop();
                if (void 0 !== lastAlias && 'string' == typeof lastAlias) combined[lastAlias] = aliasArray;
            });
            return combined;
        }
        function increment(orig) {
            return void 0 !== orig ? orig + 1 : 1;
        }
        function sanitizeKey(key) {
            if ('__proto__' === key) return '___proto___';
            return key;
        }
        function stripQuotes(val) {
            return 'string' == typeof val && ("'" === val[0] || '"' === val[0]) && val[val.length - 1] === val[0] ? val.substring(1, val.length - 1) : val;
        }
        var _a, _b, _c;
        const minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;
        const nodeVersion = null != (_b = null == (_a = null == process ? void 0 : process.versions) ? void 0 : _a.node) ? _b : null == (_c = null == process ? void 0 : process.version) ? void 0 : _c.slice(1);
        if (nodeVersion) {
            const major = Number(nodeVersion.match(/^([^.]+)/)[1]);
            if (major < minNodeVersion) throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);
        }
        const env = process ? process.env : {};
        const parser = new YargsParser({
            cwd: process.cwd,
            env: ()=>env,
            format: util.format,
            normalize: path.normalize,
            resolve: path.resolve,
            require: (path)=>require(path)
        });
        const yargsParser = function(args, opts) {
            const result = parser.parse(args.slice(), opts);
            return result.argv;
        };
        yargsParser.detailed = function(args, opts) {
            return parser.parse(args.slice(), opts);
        };
        yargsParser.camelCase = camelCase;
        yargsParser.decamelize = decamelize;
        yargsParser.looksLikeNumber = looksLikeNumber;
        module.exports = yargsParser;
    },
    "../../node_modules/.pnpm/yargs@17.7.2/node_modules/yargs/build/index.cjs": function(module, __unused_webpack_exports, __webpack_require__) {
        "use strict";
        var t1 = __webpack_require__("assert");
        class e1 extends Error {
            constructor(t1){
                super(t1 || "yargs error"), this.name = "YError", Error.captureStackTrace && Error.captureStackTrace(this, e1);
            }
        }
        let s, i = [];
        function n(t1, o, a, h) {
            s = h;
            let l = {};
            if (Object.prototype.hasOwnProperty.call(t1, "extends")) {
                if ("string" != typeof t1.extends) return l;
                const r = /\.json|\..*rc$/.test(t1.extends);
                let h = null;
                if (r) h = function(t1, e1) {
                    return s.path.resolve(t1, e1);
                }(o, t1.extends);
                else try {
                    h = require.resolve(t1.extends);
                } catch (e1) {
                    return t1;
                }
                (function(t1) {
                    if (i.indexOf(t1) > -1) throw new e1(`Circular extended configurations: '${t1}'.`);
                })(h), i.push(h), l = r ? JSON.parse(s.readFileSync(h, "utf8")) : require(t1.extends), delete t1.extends, l = n(l, s.path.dirname(h), a, s);
            }
            return i = [], a ? r(l, t1) : Object.assign({}, l, t1);
        }
        function r(t1, e1) {
            const s = {};
            function i(t1) {
                return t1 && "object" == typeof t1 && !Array.isArray(t1);
            }
            Object.assign(s, t1);
            for (const n of Object.keys(e1))i(e1[n]) && i(s[n]) ? s[n] = r(t1[n], e1[n]) : s[n] = e1[n];
            return s;
        }
        function o(t1) {
            const e1 = t1.replace(/\s{2,}/g, " ").split(/\s+(?![^[]*]|[^<]*>)/), s = /\.*[\][<>]/g, i = e1.shift();
            if (!i) throw new Error(`No command found in: ${t1}`);
            const n = {
                cmd: i.replace(s, ""),
                demanded: [],
                optional: []
            };
            return e1.forEach((t1, i)=>{
                let r = !1;
                t1 = t1.replace(/\s/g, ""), /\.+[\]>]/.test(t1) && i === e1.length - 1 && (r = !0), /^\[/.test(t1) ? n.optional.push({
                    cmd: t1.replace(s, "").split("|"),
                    variadic: r
                }) : n.demanded.push({
                    cmd: t1.replace(s, "").split("|"),
                    variadic: r
                });
            }), n;
        }
        const a = [
            "first",
            "second",
            "third",
            "fourth",
            "fifth",
            "sixth"
        ];
        function h(t1, s, i) {
            try {
                let n = 0;
                const [r, a, h] = "object" == typeof t1 ? [
                    {
                        demanded: [],
                        optional: []
                    },
                    t1,
                    s
                ] : [
                    o(`cmd ${t1}`),
                    s,
                    i
                ], f = [].slice.call(a);
                for(; f.length && void 0 === f[f.length - 1];)f.pop();
                const d = h || f.length;
                if (d < r.demanded.length) throw new e1(`Not enough arguments provided. Expected ${r.demanded.length} but received ${f.length}.`);
                const u = r.demanded.length + r.optional.length;
                if (d > u) throw new e1(`Too many arguments provided. Expected max ${u} but received ${d}.`);
                r.demanded.forEach((t1)=>{
                    const e1 = l(f.shift());
                    0 === t1.cmd.filter((t1)=>t1 === e1 || "*" === t1).length && c(e1, t1.cmd, n), n += 1;
                }), r.optional.forEach((t1)=>{
                    if (0 === f.length) return;
                    const e1 = l(f.shift());
                    0 === t1.cmd.filter((t1)=>t1 === e1 || "*" === t1).length && c(e1, t1.cmd, n), n += 1;
                });
            } catch (t1) {
                console.warn(t1.stack);
            }
        }
        function l(t1) {
            return Array.isArray(t1) ? "array" : null === t1 ? "null" : typeof t1;
        }
        function c(t1, s, i) {
            throw new e1(`Invalid ${a[i] || "manyith"} argument. Expected ${s.join(" or ")} but received ${t1}.`);
        }
        function f(t1) {
            return !!t1 && !!t1.then && "function" == typeof t1.then;
        }
        function d(t1, e1, s, i) {
            s.assert.notStrictEqual(t1, e1, i);
        }
        function u(t1, e1) {
            e1.assert.strictEqual(typeof t1, "string");
        }
        function p(t1) {
            return Object.keys(t1);
        }
        function g(t1 = {}, e1 = ()=>!0) {
            const s = {};
            return p(t1).forEach((i)=>{
                e1(i, t1[i]) && (s[i] = t1[i]);
            }), s;
        }
        function m() {
            return process.versions.electron && !process.defaultApp ? 0 : 1;
        }
        function y() {
            return process.argv[m()];
        }
        var b = Object.freeze({
            __proto__: null,
            hideBin: function(t1) {
                return t1.slice(m() + 1);
            },
            getProcessArgvBin: y
        });
        function v(t1, e1, s, i) {
            if ("a" === s && !i) throw new TypeError("Private accessor was defined without a getter");
            if ("function" == typeof e1 ? t1 !== e1 || !i : !e1.has(t1)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return "m" === s ? i : "a" === s ? i.call(t1) : i ? i.value : e1.get(t1);
        }
        function O(t1, e1, s, i, n) {
            if ("m" === i) throw new TypeError("Private method is not writable");
            if ("a" === i && !n) throw new TypeError("Private accessor was defined without a setter");
            if ("function" == typeof e1 ? t1 !== e1 || !n : !e1.has(t1)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return "a" === i ? n.call(t1, s) : n ? n.value = s : e1.set(t1, s), s;
        }
        class w {
            constructor(t1){
                this.globalMiddleware = [], this.frozens = [], this.yargs = t1;
            }
            addMiddleware(t1, e1, s = !0, i = !1) {
                if (h("<array|function> [boolean] [boolean] [boolean]", [
                    t1,
                    e1,
                    s
                ], arguments.length), Array.isArray(t1)) {
                    for(let i = 0; i < t1.length; i++){
                        if ("function" != typeof t1[i]) throw Error("middleware must be a function");
                        const n = t1[i];
                        n.applyBeforeValidation = e1, n.global = s;
                    }
                    Array.prototype.push.apply(this.globalMiddleware, t1);
                } else if ("function" == typeof t1) {
                    const n = t1;
                    n.applyBeforeValidation = e1, n.global = s, n.mutates = i, this.globalMiddleware.push(t1);
                }
                return this.yargs;
            }
            addCoerceMiddleware(t1, e1) {
                const s = this.yargs.getAliases();
                return this.globalMiddleware = this.globalMiddleware.filter((t1)=>{
                    const i = [
                        ...s[e1] || [],
                        e1
                    ];
                    return !t1.option || !i.includes(t1.option);
                }), t1.option = e1, this.addMiddleware(t1, !0, !0, !0);
            }
            getMiddleware() {
                return this.globalMiddleware;
            }
            freeze() {
                this.frozens.push([
                    ...this.globalMiddleware
                ]);
            }
            unfreeze() {
                const t1 = this.frozens.pop();
                void 0 !== t1 && (this.globalMiddleware = t1);
            }
            reset() {
                this.globalMiddleware = this.globalMiddleware.filter((t1)=>t1.global);
            }
        }
        function C(t1, e1, s, i) {
            return s.reduce((t1, s)=>{
                if (s.applyBeforeValidation !== i) return t1;
                if (s.mutates) {
                    if (s.applied) return t1;
                    s.applied = !0;
                }
                if (f(t1)) return t1.then((t1)=>Promise.all([
                        t1,
                        s(t1, e1)
                    ])).then(([t1, e1])=>Object.assign(t1, e1));
                {
                    const i = s(t1, e1);
                    return f(i) ? i.then((e1)=>Object.assign(t1, e1)) : Object.assign(t1, i);
                }
            }, t1);
        }
        function j(t1, e1, s = (t1)=>{
            throw t1;
        }) {
            try {
                const s = "function" == typeof t1 ? t1() : t1;
                return f(s) ? s.then((t1)=>e1(t1)) : e1(s);
            } catch (t1) {
                return s(t1);
            }
        }
        const M = /(^\*)|(^\$0)/;
        class _ {
            constructor(t1, e1, s, i){
                this.requireCache = new Set, this.handlers = {}, this.aliasMap = {}, this.frozens = [], this.shim = i, this.usage = t1, this.globalMiddleware = s, this.validation = e1;
            }
            addDirectory(t1, e1, s, i) {
                "boolean" != typeof (i = i || {}).recurse && (i.recurse = !1), Array.isArray(i.extensions) || (i.extensions = [
                    "js"
                ]);
                const n = "function" == typeof i.visit ? i.visit : (t1)=>t1;
                i.visit = (t1, e1, s)=>{
                    const i = n(t1, e1, s);
                    if (i) {
                        if (this.requireCache.has(e1)) return i;
                        this.requireCache.add(e1), this.addHandler(i);
                    }
                    return i;
                }, this.shim.requireDirectory({
                    require: e1,
                    filename: s
                }, t1, i);
            }
            addHandler(t1, e1, s, i, n, r) {
                let a = [];
                const h = function(t1) {
                    return t1 ? t1.map((t1)=>(t1.applyBeforeValidation = !1, t1)) : [];
                }(n);
                if (i = i || (()=>{}), Array.isArray(t1)) if (function(t1) {
                    return t1.every((t1)=>"string" == typeof t1);
                }(t1)) [t1, ...a] = t1;
                else for (const e1 of t1)this.addHandler(e1);
                else {
                    if (function(t1) {
                        return "object" == typeof t1 && !Array.isArray(t1);
                    }(t1)) {
                        let e1 = Array.isArray(t1.command) || "string" == typeof t1.command ? t1.command : this.moduleName(t1);
                        return t1.aliases && (e1 = [].concat(e1).concat(t1.aliases)), void this.addHandler(e1, this.extractDesc(t1), t1.builder, t1.handler, t1.middlewares, t1.deprecated);
                    }
                    if (k(s)) return void this.addHandler([
                        t1
                    ].concat(a), e1, s.builder, s.handler, s.middlewares, s.deprecated);
                }
                if ("string" == typeof t1) {
                    const n = o(t1);
                    a = a.map((t1)=>o(t1).cmd);
                    let l = !1;
                    const c = [
                        n.cmd
                    ].concat(a).filter((t1)=>!M.test(t1) || (l = !0, !1));
                    0 === c.length && l && c.push("$0"), l && (n.cmd = c[0], a = c.slice(1), t1 = t1.replace(M, n.cmd)), a.forEach((t1)=>{
                        this.aliasMap[t1] = n.cmd;
                    }), !1 !== e1 && this.usage.command(t1, e1, l, a, r), this.handlers[n.cmd] = {
                        original: t1,
                        description: e1,
                        handler: i,
                        builder: s || {},
                        middlewares: h,
                        deprecated: r,
                        demanded: n.demanded,
                        optional: n.optional
                    }, l && (this.defaultCommand = this.handlers[n.cmd]);
                }
            }
            getCommandHandlers() {
                return this.handlers;
            }
            getCommands() {
                return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));
            }
            hasDefaultCommand() {
                return !!this.defaultCommand;
            }
            runCommand(t1, e1, s, i, n, r) {
                const o = this.handlers[t1] || this.handlers[this.aliasMap[t1]] || this.defaultCommand, a = e1.getInternalMethods().getContext(), h = a.commands.slice(), l = !t1;
                t1 && (a.commands.push(t1), a.fullCommands.push(o.original));
                const c = this.applyBuilderUpdateUsageAndParse(l, o, e1, s.aliases, h, i, n, r);
                return f(c) ? c.then((t1)=>this.applyMiddlewareAndGetResult(l, o, t1.innerArgv, a, n, t1.aliases, e1)) : this.applyMiddlewareAndGetResult(l, o, c.innerArgv, a, n, c.aliases, e1);
            }
            applyBuilderUpdateUsageAndParse(t1, e1, s, i, n, r, o, a) {
                const h = e1.builder;
                let l = s;
                if (x(h)) {
                    s.getInternalMethods().getUsageInstance().freeze();
                    const c = h(s.getInternalMethods().reset(i), a);
                    if (f(c)) return c.then((i)=>{
                        var a;
                        return l = (a = i) && "function" == typeof a.getInternalMethods ? i : s, this.parseAndUpdateUsage(t1, e1, l, n, r, o);
                    });
                } else (function(t1) {
                    return "object" == typeof t1;
                })(h) && (s.getInternalMethods().getUsageInstance().freeze(), l = s.getInternalMethods().reset(i), Object.keys(e1.builder).forEach((t1)=>{
                    l.option(t1, h[t1]);
                }));
                return this.parseAndUpdateUsage(t1, e1, l, n, r, o);
            }
            parseAndUpdateUsage(t1, e1, s, i, n, r) {
                t1 && s.getInternalMethods().getUsageInstance().unfreeze(!0), this.shouldUpdateUsage(s) && s.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(i, e1), e1.description);
                const o = s.getInternalMethods().runYargsParserAndExecuteCommands(null, void 0, !0, n, r);
                return f(o) ? o.then((t1)=>({
                        aliases: s.parsed.aliases,
                        innerArgv: t1
                    })) : {
                    aliases: s.parsed.aliases,
                    innerArgv: o
                };
            }
            shouldUpdateUsage(t1) {
                return !t1.getInternalMethods().getUsageInstance().getUsageDisabled() && 0 === t1.getInternalMethods().getUsageInstance().getUsage().length;
            }
            usageFromParentCommandsCommandHandler(t1, e1) {
                const s = M.test(e1.original) ? e1.original.replace(M, "").trim() : e1.original, i = t1.filter((t1)=>!M.test(t1));
                return i.push(s), `$0 ${i.join(" ")}`;
            }
            handleValidationAndGetResult(t1, e1, s, i, n, r, o, a) {
                if (!r.getInternalMethods().getHasOutput()) {
                    const e1 = r.getInternalMethods().runValidation(n, a, r.parsed.error, t1);
                    s = j(s, (t1)=>(e1(t1), t1));
                }
                if (e1.handler && !r.getInternalMethods().getHasOutput()) {
                    r.getInternalMethods().setHasOutput();
                    const i = !!r.getOptions().configuration["populate--"];
                    r.getInternalMethods().postProcess(s, i, !1, !1), s = j(s = C(s, r, o, !1), (t1)=>{
                        const s = e1.handler(t1);
                        return f(s) ? s.then(()=>t1) : t1;
                    }), t1 || r.getInternalMethods().getUsageInstance().cacheHelpMessage(), f(s) && !r.getInternalMethods().hasParseCallback() && s.catch((t1)=>{
                        try {
                            r.getInternalMethods().getUsageInstance().fail(null, t1);
                        } catch (t1) {}
                    });
                }
                return t1 || (i.commands.pop(), i.fullCommands.pop()), s;
            }
            applyMiddlewareAndGetResult(t1, e1, s, i, n, r, o) {
                let a = {};
                if (n) return s;
                o.getInternalMethods().getHasOutput() || (a = this.populatePositionals(e1, s, i, o));
                const h = this.globalMiddleware.getMiddleware().slice(0).concat(e1.middlewares), l = C(s, o, h, !0);
                return f(l) ? l.then((s)=>this.handleValidationAndGetResult(t1, e1, s, i, r, o, h, a)) : this.handleValidationAndGetResult(t1, e1, l, i, r, o, h, a);
            }
            populatePositionals(t1, e1, s, i) {
                e1._ = e1._.slice(s.commands.length);
                const n = t1.demanded.slice(0), r = t1.optional.slice(0), o = {};
                for(this.validation.positionalCount(n.length, e1._.length); n.length;){
                    const t1 = n.shift();
                    this.populatePositional(t1, e1, o);
                }
                for(; r.length;){
                    const t1 = r.shift();
                    this.populatePositional(t1, e1, o);
                }
                return e1._ = s.commands.concat(e1._.map((t1)=>"" + t1)), this.postProcessPositionals(e1, o, this.cmdToParseOptions(t1.original), i), o;
            }
            populatePositional(t1, e1, s) {
                const i = t1.cmd[0];
                t1.variadic ? s[i] = e1._.splice(0).map(String) : e1._.length && (s[i] = [
                    String(e1._.shift())
                ]);
            }
            cmdToParseOptions(t1) {
                const e1 = {
                    array: [],
                    default: {},
                    alias: {},
                    demand: {}
                }, s = o(t1);
                return s.demanded.forEach((t1)=>{
                    const [s, ...i] = t1.cmd;
                    t1.variadic && (e1.array.push(s), e1.default[s] = []), e1.alias[s] = i, e1.demand[s] = !0;
                }), s.optional.forEach((t1)=>{
                    const [s, ...i] = t1.cmd;
                    t1.variadic && (e1.array.push(s), e1.default[s] = []), e1.alias[s] = i;
                }), e1;
            }
            postProcessPositionals(t1, e1, s, i) {
                const n = Object.assign({}, i.getOptions());
                n.default = Object.assign(s.default, n.default);
                for (const t1 of Object.keys(s.alias))n.alias[t1] = (n.alias[t1] || []).concat(s.alias[t1]);
                n.array = n.array.concat(s.array), n.config = {};
                const r = [];
                if (Object.keys(e1).forEach((t1)=>{
                    e1[t1].map((e1)=>{
                        n.configuration["unknown-options-as-args"] && (n.key[t1] = !0), r.push(`--${t1}`), r.push(e1);
                    });
                }), !r.length) return;
                const o = Object.assign({}, n.configuration, {
                    "populate--": !1
                }), a = this.shim.Parser.detailed(r, Object.assign({}, n, {
                    configuration: o
                }));
                if (a.error) i.getInternalMethods().getUsageInstance().fail(a.error.message, a.error);
                else {
                    const s = Object.keys(e1);
                    Object.keys(e1).forEach((t1)=>{
                        s.push(...a.aliases[t1]);
                    }), Object.keys(a.argv).forEach((n)=>{
                        s.includes(n) && (e1[n] || (e1[n] = a.argv[n]), !this.isInConfigs(i, n) && !this.isDefaulted(i, n) && Object.prototype.hasOwnProperty.call(t1, n) && Object.prototype.hasOwnProperty.call(a.argv, n) && (Array.isArray(t1[n]) || Array.isArray(a.argv[n])) ? t1[n] = [].concat(t1[n], a.argv[n]) : t1[n] = a.argv[n]);
                    });
                }
            }
            isDefaulted(t1, e1) {
                const { default: s } = t1.getOptions();
                return Object.prototype.hasOwnProperty.call(s, e1) || Object.prototype.hasOwnProperty.call(s, this.shim.Parser.camelCase(e1));
            }
            isInConfigs(t1, e1) {
                const { configObjects: s } = t1.getOptions();
                return s.some((t1)=>Object.prototype.hasOwnProperty.call(t1, e1)) || s.some((t1)=>Object.prototype.hasOwnProperty.call(t1, this.shim.Parser.camelCase(e1)));
            }
            runDefaultBuilderOn(t1) {
                if (!this.defaultCommand) return;
                if (this.shouldUpdateUsage(t1)) {
                    const e1 = M.test(this.defaultCommand.original) ? this.defaultCommand.original : this.defaultCommand.original.replace(/^[^[\]<>]*/, "$0 ");
                    t1.getInternalMethods().getUsageInstance().usage(e1, this.defaultCommand.description);
                }
                const e1 = this.defaultCommand.builder;
                if (x(e1)) return e1(t1, !0);
                k(e1) || Object.keys(e1).forEach((s)=>{
                    t1.option(s, e1[s]);
                });
            }
            moduleName(t1) {
                const e1 = function(t1) {
                    for(let e1, s = 0, i = Object.keys(require.cache); s < i.length; s++)if (e1 = require.cache[i[s]], e1.exports === t1) return e1;
                    return null;
                }(t1);
                if (!e1) throw new Error(`No command name given for module: ${this.shim.inspect(t1)}`);
                return this.commandFromFilename(e1.filename);
            }
            commandFromFilename(t1) {
                return this.shim.path.basename(t1, this.shim.path.extname(t1));
            }
            extractDesc({ describe: t1, description: e1, desc: s }) {
                for (const i of [
                    t1,
                    e1,
                    s
                ]){
                    if ("string" == typeof i || !1 === i) return i;
                    d(i, !0, this.shim);
                }
                return !1;
            }
            freeze() {
                this.frozens.push({
                    handlers: this.handlers,
                    aliasMap: this.aliasMap,
                    defaultCommand: this.defaultCommand
                });
            }
            unfreeze() {
                const t1 = this.frozens.pop();
                d(t1, void 0, this.shim), { handlers: this.handlers, aliasMap: this.aliasMap, defaultCommand: this.defaultCommand } = t1;
            }
            reset() {
                return this.handlers = {}, this.aliasMap = {}, this.defaultCommand = void 0, this.requireCache = new Set, this;
            }
        }
        function k(t1) {
            return "object" == typeof t1 && !!t1.builder && "function" == typeof t1.handler;
        }
        function x(t1) {
            return "function" == typeof t1;
        }
        function E(t1) {
            "undefined" != typeof process && [
                process.stdout,
                process.stderr
            ].forEach((e1)=>{
                const s = e1;
                s._handle && s.isTTY && "function" == typeof s._handle.setBlocking && s._handle.setBlocking(t1);
            });
        }
        function A(t1) {
            return "boolean" == typeof t1;
        }
        function P(t1, s) {
            const i = s.y18n.__, n = {}, r = [];
            n.failFn = function(t1) {
                r.push(t1);
            };
            let o = null, a = null, h = !0;
            n.showHelpOnFail = function(e1 = !0, s) {
                const [i, r] = "string" == typeof e1 ? [
                    !0,
                    e1
                ] : [
                    e1,
                    s
                ];
                return t1.getInternalMethods().isGlobalContext() && (a = r), o = r, h = i, n;
            };
            let l = !1;
            n.fail = function(s, i) {
                const c = t1.getInternalMethods().getLoggerInstance();
                if (!r.length) {
                    if (t1.getExitProcess() && E(!0), !l) {
                        l = !0, h && (t1.showHelp("error"), c.error()), (s || i) && c.error(s || i);
                        const e1 = o || a;
                        e1 && ((s || i) && c.error(""), c.error(e1));
                    }
                    if (i = i || new e1(s), t1.getExitProcess()) return t1.exit(1);
                    if (t1.getInternalMethods().hasParseCallback()) return t1.exit(1, i);
                    throw i;
                }
                for(let t1 = r.length - 1; t1 >= 0; --t1){
                    const e1 = r[t1];
                    if (A(e1)) {
                        if (i) throw i;
                        if (s) throw Error(s);
                    } else e1(s, i, n);
                }
            };
            let c = [], f = !1;
            n.usage = (t1, e1)=>null === t1 ? (f = !0, c = [], n) : (f = !1, c.push([
                    t1,
                    e1 || ""
                ]), n), n.getUsage = ()=>c, n.getUsageDisabled = ()=>f, n.getPositionalGroupName = ()=>i("Positionals:");
            let d = [];
            n.example = (t1, e1)=>{
                d.push([
                    t1,
                    e1 || ""
                ]);
            };
            let u = [];
            n.command = function(t1, e1, s, i, n = !1) {
                s && (u = u.map((t1)=>(t1[2] = !1, t1))), u.push([
                    t1,
                    e1 || "",
                    s,
                    i,
                    n
                ]);
            }, n.getCommands = ()=>u;
            let p = {};
            n.describe = function(t1, e1) {
                Array.isArray(t1) ? t1.forEach((t1)=>{
                    n.describe(t1, e1);
                }) : "object" == typeof t1 ? Object.keys(t1).forEach((e1)=>{
                    n.describe(e1, t1[e1]);
                }) : p[t1] = e1;
            }, n.getDescriptions = ()=>p;
            let m = [];
            n.epilog = (t1)=>{
                m.push(t1);
            };
            let y, b = !1;
            n.wrap = (t1)=>{
                b = !0, y = t1;
            }, n.getWrap = ()=>s.getEnv("YARGS_DISABLE_WRAP") ? null : (b || (y = function() {
                    const t1 = 80;
                    return s.process.stdColumns ? Math.min(t1, s.process.stdColumns) : t1;
                }(), b = !0), y);
            const v = "__yargsString__:";
            function O(t1, e1, i) {
                let n = 0;
                return Array.isArray(t1) || (t1 = Object.values(t1).map((t1)=>[
                        t1
                    ])), t1.forEach((t1)=>{
                    n = Math.max(s.stringWidth(i ? `${i} ${I(t1[0])}` : I(t1[0])) + $(t1[0]), n);
                }), e1 && (n = Math.min(n, parseInt((.5 * e1).toString(), 10))), n;
            }
            let w;
            function C(e1) {
                return t1.getOptions().hiddenOptions.indexOf(e1) < 0 || t1.parsed.argv[t1.getOptions().showHiddenOpt];
            }
            function j(t1, e1) {
                let s = `[${i("default:")} `;
                if (void 0 === t1 && !e1) return null;
                if (e1) s += e1;
                else switch(typeof t1){
                    case "string":
                        s += `"${t1}"`;
                        break;
                    case "object":
                        s += JSON.stringify(t1);
                        break;
                    default:
                        s += t1;
                }
                return `${s}]`;
            }
            n.deferY18nLookup = (t1)=>v + t1, n.help = function() {
                if (w) return w;
                !function() {
                    const e1 = t1.getDemandedOptions(), s = t1.getOptions();
                    (Object.keys(s.alias) || []).forEach((i)=>{
                        s.alias[i].forEach((r)=>{
                            p[r] && n.describe(i, p[r]), r in e1 && t1.demandOption(i, e1[r]), s.boolean.includes(r) && t1.boolean(i), s.count.includes(r) && t1.count(i), s.string.includes(r) && t1.string(i), s.normalize.includes(r) && t1.normalize(i), s.array.includes(r) && t1.array(i), s.number.includes(r) && t1.number(i);
                        });
                    });
                }();
                const e1 = t1.customScriptName ? t1.$0 : s.path.basename(t1.$0), r = t1.getDemandedOptions(), o = t1.getDemandedCommands(), a = t1.getDeprecatedOptions(), h = t1.getGroups(), l = t1.getOptions();
                let g = [];
                g = g.concat(Object.keys(p)), g = g.concat(Object.keys(r)), g = g.concat(Object.keys(o)), g = g.concat(Object.keys(l.default)), g = g.filter(C), g = Object.keys(g.reduce((t1, e1)=>("_" !== e1 && (t1[e1] = !0), t1), {}));
                const y = n.getWrap(), b = s.cliui({
                    width: y,
                    wrap: !!y
                });
                if (!f) {
                    if (c.length) c.forEach((t1)=>{
                        b.div({
                            text: `${t1[0].replace(/\$0/g, e1)}`
                        }), t1[1] && b.div({
                            text: `${t1[1]}`,
                            padding: [
                                1,
                                0,
                                0,
                                0
                            ]
                        });
                    }), b.div();
                    else if (u.length) {
                        let t1 = null;
                        t1 = o._ ? `${e1} <${i("command")}>\n` : `${e1} [${i("command")}]\n`, b.div(`${t1}`);
                    }
                }
                if (u.length > 1 || 1 === u.length && !u[0][2]) {
                    b.div(i("Commands:"));
                    const s = t1.getInternalMethods().getContext(), n = s.commands.length ? `${s.commands.join(" ")} ` : "";
                    !0 === t1.getInternalMethods().getParserConfiguration()["sort-commands"] && (u = u.sort((t1, e1)=>t1[0].localeCompare(e1[0])));
                    const r = e1 ? `${e1} ` : "";
                    u.forEach((t1)=>{
                        const s = `${r}${n}${t1[0].replace(/^\$0 ?/, "")}`;
                        b.span({
                            text: s,
                            padding: [
                                0,
                                2,
                                0,
                                2
                            ],
                            width: O(u, y, `${e1}${n}`) + 4
                        }, {
                            text: t1[1]
                        });
                        const o = [];
                        t1[2] && o.push(`[${i("default")}]`), t1[3] && t1[3].length && o.push(`[${i("aliases:")} ${t1[3].join(", ")}]`), t1[4] && ("string" == typeof t1[4] ? o.push(`[${i("deprecated: %s", t1[4])}]`) : o.push(`[${i("deprecated")}]`)), o.length ? b.div({
                            text: o.join(" "),
                            padding: [
                                0,
                                0,
                                0,
                                2
                            ],
                            align: "right"
                        }) : b.div();
                    }), b.div();
                }
                const M = (Object.keys(l.alias) || []).concat(Object.keys(t1.parsed.newAliases) || []);
                g = g.filter((e1)=>!t1.parsed.newAliases[e1] && M.every((t1)=>-1 === (l.alias[t1] || []).indexOf(e1)));
                const _ = i("Options:");
                h[_] || (h[_] = []), function(t1, e1, s, i) {
                    let n = [], r = null;
                    Object.keys(s).forEach((t1)=>{
                        n = n.concat(s[t1]);
                    }), t1.forEach((t1)=>{
                        r = [
                            t1
                        ].concat(e1[t1]), r.some((t1)=>-1 !== n.indexOf(t1)) || s[i].push(t1);
                    });
                }(g, l.alias, h, _);
                const k = (t1)=>/^--/.test(I(t1)), x = Object.keys(h).filter((t1)=>h[t1].length > 0).map((t1)=>({
                        groupName: t1,
                        normalizedKeys: h[t1].filter(C).map((t1)=>{
                            if (M.includes(t1)) return t1;
                            for(let e1, s = 0; void 0 !== (e1 = M[s]); s++)if ((l.alias[e1] || []).includes(t1)) return e1;
                            return t1;
                        })
                    })).filter(({ normalizedKeys: t1 })=>t1.length > 0).map(({ groupName: t1, normalizedKeys: e1 })=>{
                    const s = e1.reduce((e1, s)=>(e1[s] = [
                            s
                        ].concat(l.alias[s] || []).map((e1)=>t1 === n.getPositionalGroupName() ? e1 : (/^[0-9]$/.test(e1) ? l.boolean.includes(s) ? "-" : "--" : e1.length > 1 ? "--" : "-") + e1).sort((t1, e1)=>k(t1) === k(e1) ? 0 : k(t1) ? 1 : -1).join(", "), e1), {});
                    return {
                        groupName: t1,
                        normalizedKeys: e1,
                        switches: s
                    };
                });
                if (x.filter(({ groupName: t1 })=>t1 !== n.getPositionalGroupName()).some(({ normalizedKeys: t1, switches: e1 })=>!t1.every((t1)=>k(e1[t1]))) && x.filter(({ groupName: t1 })=>t1 !== n.getPositionalGroupName()).forEach(({ normalizedKeys: t1, switches: e1 })=>{
                    t1.forEach((t1)=>{
                        var s, i;
                        k(e1[t1]) && (e1[t1] = (s = e1[t1], i = 4, S(s) ? {
                            text: s.text,
                            indentation: s.indentation + i
                        } : {
                            text: s,
                            indentation: i
                        }));
                    });
                }), x.forEach(({ groupName: e1, normalizedKeys: s, switches: o })=>{
                    b.div(e1), s.forEach((e1)=>{
                        const s = o[e1];
                        let h = p[e1] || "", c = null;
                        h.includes(v) && (h = i(h.substring(16))), l.boolean.includes(e1) && (c = `[${i("boolean")}]`), l.count.includes(e1) && (c = `[${i("count")}]`), l.string.includes(e1) && (c = `[${i("string")}]`), l.normalize.includes(e1) && (c = `[${i("string")}]`), l.array.includes(e1) && (c = `[${i("array")}]`), l.number.includes(e1) && (c = `[${i("number")}]`);
                        const f = [
                            e1 in a ? (d = a[e1], "string" == typeof d ? `[${i("deprecated: %s", d)}]` : `[${i("deprecated")}]`) : null,
                            c,
                            e1 in r ? `[${i("required")}]` : null,
                            l.choices && l.choices[e1] ? `[${i("choices:")} ${n.stringifiedValues(l.choices[e1])}]` : null,
                            j(l.default[e1], l.defaultDescription[e1])
                        ].filter(Boolean).join(" ");
                        var d;
                        b.span({
                            text: I(s),
                            padding: [
                                0,
                                2,
                                0,
                                2 + $(s)
                            ],
                            width: O(o, y) + 4
                        }, h);
                        const u = !0 === t1.getInternalMethods().getUsageConfiguration()["hide-types"];
                        f && !u ? b.div({
                            text: f,
                            padding: [
                                0,
                                0,
                                0,
                                2
                            ],
                            align: "right"
                        }) : b.div();
                    }), b.div();
                }), d.length && (b.div(i("Examples:")), d.forEach((t1)=>{
                    t1[0] = t1[0].replace(/\$0/g, e1);
                }), d.forEach((t1)=>{
                    "" === t1[1] ? b.div({
                        text: t1[0],
                        padding: [
                            0,
                            2,
                            0,
                            2
                        ]
                    }) : b.div({
                        text: t1[0],
                        padding: [
                            0,
                            2,
                            0,
                            2
                        ],
                        width: O(d, y) + 4
                    }, {
                        text: t1[1]
                    });
                }), b.div()), m.length > 0) {
                    const t1 = m.map((t1)=>t1.replace(/\$0/g, e1)).join("\n");
                    b.div(`${t1}\n`);
                }
                return b.toString().replace(/\s*$/, "");
            }, n.cacheHelpMessage = function() {
                w = this.help();
            }, n.clearCachedHelpMessage = function() {
                w = void 0;
            }, n.hasCachedHelpMessage = function() {
                return !!w;
            }, n.showHelp = (e1)=>{
                const s = t1.getInternalMethods().getLoggerInstance();
                e1 || (e1 = "error");
                ("function" == typeof e1 ? e1 : s[e1])(n.help());
            }, n.functionDescription = (t1)=>[
                    "(",
                    t1.name ? s.Parser.decamelize(t1.name, "-") : i("generated-value"),
                    ")"
                ].join(""), n.stringifiedValues = function(t1, e1) {
                let s = "";
                const i = e1 || ", ", n = [].concat(t1);
                return t1 && n.length ? (n.forEach((t1)=>{
                    s.length && (s += i), s += JSON.stringify(t1);
                }), s) : s;
            };
            let M = null;
            n.version = (t1)=>{
                M = t1;
            }, n.showVersion = (e1)=>{
                const s = t1.getInternalMethods().getLoggerInstance();
                e1 || (e1 = "error");
                ("function" == typeof e1 ? e1 : s[e1])(M);
            }, n.reset = function(t1) {
                return o = null, l = !1, c = [], f = !1, m = [], d = [], u = [], p = g(p, (e1)=>!t1[e1]), n;
            };
            const _ = [];
            return n.freeze = function() {
                _.push({
                    failMessage: o,
                    failureOutput: l,
                    usages: c,
                    usageDisabled: f,
                    epilogs: m,
                    examples: d,
                    commands: u,
                    descriptions: p
                });
            }, n.unfreeze = function(t1 = !1) {
                const e1 = _.pop();
                e1 && (t1 ? (p = {
                    ...e1.descriptions,
                    ...p
                }, u = [
                    ...e1.commands,
                    ...u
                ], c = [
                    ...e1.usages,
                    ...c
                ], d = [
                    ...e1.examples,
                    ...d
                ], m = [
                    ...e1.epilogs,
                    ...m
                ]) : { failMessage: o, failureOutput: l, usages: c, usageDisabled: f, epilogs: m, examples: d, commands: u, descriptions: p } = e1);
            }, n;
        }
        function S(t1) {
            return "object" == typeof t1;
        }
        function $(t1) {
            return S(t1) ? t1.indentation : 0;
        }
        function I(t1) {
            return S(t1) ? t1.text : t1;
        }
        class D {
            constructor(t1, e1, s, i){
                var n, r, o;
                this.yargs = t1, this.usage = e1, this.command = s, this.shim = i, this.completionKey = "get-yargs-completions", this.aliases = null, this.customCompletionFunction = null, this.indexAfterLastReset = 0, this.zshShell = null != (o = (null == (n = this.shim.getEnv("SHELL")) ? void 0 : n.includes("zsh")) || (null == (r = this.shim.getEnv("ZSH_NAME")) ? void 0 : r.includes("zsh"))) && o;
            }
            defaultCompletion(t1, e1, s, i) {
                const n = this.command.getCommandHandlers();
                for(let e1 = 0, s = t1.length; e1 < s; ++e1)if (n[t1[e1]] && n[t1[e1]].builder) {
                    const s = n[t1[e1]].builder;
                    if (x(s)) {
                        this.indexAfterLastReset = e1 + 1;
                        const t1 = this.yargs.getInternalMethods().reset();
                        return s(t1, !0), t1.argv;
                    }
                }
                const r = [];
                this.commandCompletions(r, t1, s), this.optionCompletions(r, t1, e1, s), this.choicesFromOptionsCompletions(r, t1, e1, s), this.choicesFromPositionalsCompletions(r, t1, e1, s), i(null, r);
            }
            commandCompletions(t1, e1, s) {
                const i = this.yargs.getInternalMethods().getContext().commands;
                s.match(/^-/) || i[i.length - 1] === s || this.previousArgHasChoices(e1) || this.usage.getCommands().forEach((s)=>{
                    const i = o(s[0]).cmd;
                    if (-1 === e1.indexOf(i)) if (this.zshShell) {
                        const e1 = s[1] || "";
                        t1.push(i.replace(/:/g, "\\:") + ":" + e1);
                    } else t1.push(i);
                });
            }
            optionCompletions(t1, e1, s, i) {
                if ((i.match(/^-/) || "" === i && 0 === t1.length) && !this.previousArgHasChoices(e1)) {
                    const s = this.yargs.getOptions(), n = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [];
                    Object.keys(s.key).forEach((r)=>{
                        const o = !!s.configuration["boolean-negation"] && s.boolean.includes(r);
                        n.includes(r) || s.hiddenOptions.includes(r) || this.argsContainKey(e1, r, o) || this.completeOptionKey(r, t1, i, o && !!s.default[r]);
                    });
                }
            }
            choicesFromOptionsCompletions(t1, e1, s, i) {
                if (this.previousArgHasChoices(e1)) {
                    const s = this.getPreviousArgChoices(e1);
                    s && s.length > 0 && t1.push(...s.map((t1)=>t1.replace(/:/g, "\\:")));
                }
            }
            choicesFromPositionalsCompletions(t1, e1, s, i) {
                if ("" === i && t1.length > 0 && this.previousArgHasChoices(e1)) return;
                const n = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [], r = Math.max(this.indexAfterLastReset, this.yargs.getInternalMethods().getContext().commands.length + 1), o = n[s._.length - r - 1];
                if (!o) return;
                const a = this.yargs.getOptions().choices[o] || [];
                for (const e1 of a)e1.startsWith(i) && t1.push(e1.replace(/:/g, "\\:"));
            }
            getPreviousArgChoices(t1) {
                if (t1.length < 1) return;
                let e1 = t1[t1.length - 1], s = "";
                if (!e1.startsWith("-") && t1.length > 1 && (s = e1, e1 = t1[t1.length - 2]), !e1.startsWith("-")) return;
                const i = e1.replace(/^-+/, ""), n = this.yargs.getOptions(), r = [
                    i,
                    ...this.yargs.getAliases()[i] || []
                ];
                let o;
                for (const t1 of r)if (Object.prototype.hasOwnProperty.call(n.key, t1) && Array.isArray(n.choices[t1])) {
                    o = n.choices[t1];
                    break;
                }
                return o ? o.filter((t1)=>!s || t1.startsWith(s)) : void 0;
            }
            previousArgHasChoices(t1) {
                const e1 = this.getPreviousArgChoices(t1);
                return void 0 !== e1 && e1.length > 0;
            }
            argsContainKey(t1, e1, s) {
                const i = (e1)=>-1 !== t1.indexOf((/^[^0-9]$/.test(e1) ? "-" : "--") + e1);
                if (i(e1)) return !0;
                if (s && i(`no-${e1}`)) return !0;
                if (this.aliases) {
                    for (const t1 of this.aliases[e1])if (i(t1)) return !0;
                }
                return !1;
            }
            completeOptionKey(t1, e1, s, i) {
                var n, r, o, a;
                let h = t1;
                if (this.zshShell) {
                    const e1 = this.usage.getDescriptions(), s = null == (r = null == (n = null == this ? void 0 : this.aliases) ? void 0 : n[t1]) ? void 0 : r.find((t1)=>{
                        const s = e1[t1];
                        return "string" == typeof s && s.length > 0;
                    }), i = s ? e1[s] : void 0, l = null != (a = null != (o = e1[t1]) ? o : i) ? a : "";
                    h = `${t1.replace(/:/g, "\\:")}:${l.replace("__yargsString__:", "").replace(/(\r\n|\n|\r)/gm, " ")}`;
                }
                const l = !/^--/.test(s) && ((t1)=>/^[^0-9]$/.test(t1))(t1) ? "-" : "--";
                e1.push(l + h), i && e1.push(l + "no-" + h);
            }
            customCompletion(t1, e1, s, i) {
                if (d(this.customCompletionFunction, null, this.shim), this.customCompletionFunction.length < 3) {
                    const t1 = this.customCompletionFunction(s, e1);
                    return f(t1) ? t1.then((t1)=>{
                        this.shim.process.nextTick(()=>{
                            i(null, t1);
                        });
                    }).catch((t1)=>{
                        this.shim.process.nextTick(()=>{
                            i(t1, void 0);
                        });
                    }) : i(null, t1);
                }
                return function(t1) {
                    return t1.length > 3;
                }(this.customCompletionFunction) ? this.customCompletionFunction(s, e1, (n = i)=>this.defaultCompletion(t1, e1, s, n), (t1)=>{
                    i(null, t1);
                }) : this.customCompletionFunction(s, e1, (t1)=>{
                    i(null, t1);
                });
            }
            getCompletion(t1, e1) {
                const s = t1.length ? t1[t1.length - 1] : "", i = this.yargs.parse(t1, !0), n = this.customCompletionFunction ? (i)=>this.customCompletion(t1, i, s, e1) : (i)=>this.defaultCompletion(t1, i, s, e1);
                return f(i) ? i.then(n) : n(i);
            }
            generateCompletionScript(t1, e1) {
                let s = this.zshShell ? '#compdef {{app_name}}\n###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$\'\n\' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "${words[@]}"))\n  IFS=$si\n  _describe \'values\' reply\n}\ncompdef _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n' : '###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word="${COMP_WORDS[COMP_CWORD]}"\n    args=("${COMP_WORDS[@]}")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions "${args[@]}")\n\n    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ ${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n';
                const i = this.shim.path.basename(t1);
                return t1.match(/\.js$/) && (t1 = `./${t1}`), s = s.replace(/{{app_name}}/g, i), s = s.replace(/{{completion_command}}/g, e1), s.replace(/{{app_path}}/g, t1);
            }
            registerFunction(t1) {
                this.customCompletionFunction = t1;
            }
            setParsed(t1) {
                this.aliases = t1.aliases;
            }
        }
        function N(t1, e1) {
            if (0 === t1.length) return e1.length;
            if (0 === e1.length) return t1.length;
            const s = [];
            let i, n;
            for(i = 0; i <= e1.length; i++)s[i] = [
                i
            ];
            for(n = 0; n <= t1.length; n++)s[0][n] = n;
            for(i = 1; i <= e1.length; i++)for(n = 1; n <= t1.length; n++)e1.charAt(i - 1) === t1.charAt(n - 1) ? s[i][n] = s[i - 1][n - 1] : i > 1 && n > 1 && e1.charAt(i - 2) === t1.charAt(n - 1) && e1.charAt(i - 1) === t1.charAt(n - 2) ? s[i][n] = s[i - 2][n - 2] + 1 : s[i][n] = Math.min(s[i - 1][n - 1] + 1, Math.min(s[i][n - 1] + 1, s[i - 1][n] + 1));
            return s[e1.length][t1.length];
        }
        const H = [
            "$0",
            "--",
            "_"
        ];
        var z, W, q, U, F, L, V, G, R, T, B, Y, K, J, Z, X, Q, tt, et, st, it, nt, rt, ot, at, ht, lt, ct, ft, dt, ut, pt, gt, mt, yt;
        const bt = Symbol("copyDoubleDash"), vt = Symbol("copyDoubleDash"), Ot = Symbol("deleteFromParserHintObject"), wt = Symbol("emitWarning"), Ct = Symbol("freeze"), jt = Symbol("getDollarZero"), Mt = Symbol("getParserConfiguration"), _t = Symbol("getUsageConfiguration"), kt = Symbol("guessLocale"), xt = Symbol("guessVersion"), Et = Symbol("parsePositionalNumbers"), At = Symbol("pkgUp"), Pt = Symbol("populateParserHintArray"), St = Symbol("populateParserHintSingleValueDictionary"), $t = Symbol("populateParserHintArrayDictionary"), It = Symbol("populateParserHintDictionary"), Dt = Symbol("sanitizeKey"), Nt = Symbol("setKey"), Ht = Symbol("unfreeze"), zt = Symbol("validateAsync"), Wt = Symbol("getCommandInstance"), qt = Symbol("getContext"), Ut = Symbol("getHasOutput"), Ft = Symbol("getLoggerInstance"), Lt = Symbol("getParseContext"), Vt = Symbol("getUsageInstance"), Gt = Symbol("getValidationInstance"), Rt = Symbol("hasParseCallback"), Tt = Symbol("isGlobalContext"), Bt = Symbol("postProcess"), Yt = Symbol("rebase"), Kt = Symbol("reset"), Jt = Symbol("runYargsParserAndExecuteCommands"), Zt = Symbol("runValidation"), Xt = Symbol("setHasOutput"), Qt = Symbol("kTrackManuallySetKeys");
        class te {
            constructor(t1 = [], e1, s, i){
                this.customScriptName = !1, this.parsed = !1, z.set(this, void 0), W.set(this, void 0), q.set(this, {
                    commands: [],
                    fullCommands: []
                }), U.set(this, null), F.set(this, null), L.set(this, "show-hidden"), V.set(this, null), G.set(this, !0), R.set(this, {}), T.set(this, !0), B.set(this, []), Y.set(this, void 0), K.set(this, {}), J.set(this, !1), Z.set(this, null), X.set(this, !0), Q.set(this, void 0), tt.set(this, ""), et.set(this, void 0), st.set(this, void 0), it.set(this, {}), nt.set(this, null), rt.set(this, null), ot.set(this, {}), at.set(this, {}), ht.set(this, void 0), lt.set(this, !1), ct.set(this, void 0), ft.set(this, !1), dt.set(this, !1), ut.set(this, !1), pt.set(this, void 0), gt.set(this, {}), mt.set(this, null), yt.set(this, void 0), O(this, ct, i, "f"), O(this, ht, t1, "f"), O(this, W, e1, "f"), O(this, st, s, "f"), O(this, Y, new w(this), "f"), this.$0 = this[jt](), this[Kt](), O(this, z, v(this, z, "f"), "f"), O(this, pt, v(this, pt, "f"), "f"), O(this, yt, v(this, yt, "f"), "f"), O(this, et, v(this, et, "f"), "f"), v(this, et, "f").showHiddenOpt = v(this, L, "f"), O(this, Q, this[vt](), "f");
            }
            addHelpOpt(t1, e1) {
                return h("[string|boolean] [string]", [
                    t1,
                    e1
                ], arguments.length), v(this, Z, "f") && (this[Ot](v(this, Z, "f")), O(this, Z, null, "f")), !1 === t1 && void 0 === e1 || (O(this, Z, "string" == typeof t1 ? t1 : "help", "f"), this.boolean(v(this, Z, "f")), this.describe(v(this, Z, "f"), e1 || v(this, pt, "f").deferY18nLookup("Show help"))), this;
            }
            help(t1, e1) {
                return this.addHelpOpt(t1, e1);
            }
            addShowHiddenOpt(t1, e1) {
                if (h("[string|boolean] [string]", [
                    t1,
                    e1
                ], arguments.length), !1 === t1 && void 0 === e1) return this;
                const s = "string" == typeof t1 ? t1 : v(this, L, "f");
                return this.boolean(s), this.describe(s, e1 || v(this, pt, "f").deferY18nLookup("Show hidden options")), v(this, et, "f").showHiddenOpt = s, this;
            }
            showHidden(t1, e1) {
                return this.addShowHiddenOpt(t1, e1);
            }
            alias(t1, e1) {
                return h("<object|string|array> [string|array]", [
                    t1,
                    e1
                ], arguments.length), this[$t](this.alias.bind(this), "alias", t1, e1), this;
            }
            array(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("array", t1), this[Qt](t1), this;
            }
            boolean(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("boolean", t1), this[Qt](t1), this;
            }
            check(t1, e1) {
                return h("<function> [boolean]", [
                    t1,
                    e1
                ], arguments.length), this.middleware((e1, s)=>j(()=>t1(e1, s.getOptions()), (s)=>(s ? ("string" == typeof s || s instanceof Error) && v(this, pt, "f").fail(s.toString(), s) : v(this, pt, "f").fail(v(this, ct, "f").y18n.__("Argument check failed: %s", t1.toString())), e1), (t1)=>(v(this, pt, "f").fail(t1.message ? t1.message : t1.toString(), t1), e1)), !1, e1), this;
            }
            choices(t1, e1) {
                return h("<object|string|array> [string|array]", [
                    t1,
                    e1
                ], arguments.length), this[$t](this.choices.bind(this), "choices", t1, e1), this;
            }
            coerce(t1, s) {
                if (h("<object|string|array> [function]", [
                    t1,
                    s
                ], arguments.length), Array.isArray(t1)) {
                    if (!s) throw new e1("coerce callback must be provided");
                    for (const e1 of t1)this.coerce(e1, s);
                    return this;
                }
                if ("object" == typeof t1) {
                    for (const e1 of Object.keys(t1))this.coerce(e1, t1[e1]);
                    return this;
                }
                if (!s) throw new e1("coerce callback must be provided");
                return v(this, et, "f").key[t1] = !0, v(this, Y, "f").addCoerceMiddleware((i, n)=>{
                    let r;
                    return Object.prototype.hasOwnProperty.call(i, t1) ? j(()=>(r = n.getAliases(), s(i[t1])), (e1)=>{
                        i[t1] = e1;
                        const s = n.getInternalMethods().getParserConfiguration()["strip-aliased"];
                        if (r[t1] && !0 !== s) for (const s of r[t1])i[s] = e1;
                        return i;
                    }, (t1)=>{
                        throw new e1(t1.message);
                    }) : i;
                }, t1), this;
            }
            conflicts(t1, e1) {
                return h("<string|object> [string|array]", [
                    t1,
                    e1
                ], arguments.length), v(this, yt, "f").conflicts(t1, e1), this;
            }
            config(t1 = "config", e1, s) {
                return h("[object|string] [string|function] [function]", [
                    t1,
                    e1,
                    s
                ], arguments.length), "object" != typeof t1 || Array.isArray(t1) ? ("function" == typeof e1 && (s = e1, e1 = void 0), this.describe(t1, e1 || v(this, pt, "f").deferY18nLookup("Path to JSON config file")), (Array.isArray(t1) ? t1 : [
                    t1
                ]).forEach((t1)=>{
                    v(this, et, "f").config[t1] = s || !0;
                }), this) : (t1 = n(t1, v(this, W, "f"), this[Mt]()["deep-merge-config"] || !1, v(this, ct, "f")), v(this, et, "f").configObjects = (v(this, et, "f").configObjects || []).concat(t1), this);
            }
            completion(t1, e1, s) {
                return h("[string] [string|boolean|function] [function]", [
                    t1,
                    e1,
                    s
                ], arguments.length), "function" == typeof e1 && (s = e1, e1 = void 0), O(this, F, t1 || v(this, F, "f") || "completion", "f"), e1 || !1 === e1 || (e1 = "generate completion script"), this.command(v(this, F, "f"), e1), s && v(this, U, "f").registerFunction(s), this;
            }
            command(t1, e1, s, i, n, r) {
                return h("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]", [
                    t1,
                    e1,
                    s,
                    i,
                    n,
                    r
                ], arguments.length), v(this, z, "f").addHandler(t1, e1, s, i, n, r), this;
            }
            commands(t1, e1, s, i, n, r) {
                return this.command(t1, e1, s, i, n, r);
            }
            commandDir(t1, e1) {
                h("<string> [object]", [
                    t1,
                    e1
                ], arguments.length);
                const s = v(this, st, "f") || v(this, ct, "f").require;
                return v(this, z, "f").addDirectory(t1, s, v(this, ct, "f").getCallerFile(), e1), this;
            }
            count(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("count", t1), this[Qt](t1), this;
            }
            default(t1, e1, s) {
                return h("<object|string|array> [*] [string]", [
                    t1,
                    e1,
                    s
                ], arguments.length), s && (u(t1, v(this, ct, "f")), v(this, et, "f").defaultDescription[t1] = s), "function" == typeof e1 && (u(t1, v(this, ct, "f")), v(this, et, "f").defaultDescription[t1] || (v(this, et, "f").defaultDescription[t1] = v(this, pt, "f").functionDescription(e1)), e1 = e1.call()), this[St](this.default.bind(this), "default", t1, e1), this;
            }
            defaults(t1, e1, s) {
                return this.default(t1, e1, s);
            }
            demandCommand(t1 = 1, e1, s, i) {
                return h("[number] [number|string] [string|null|undefined] [string|null|undefined]", [
                    t1,
                    e1,
                    s,
                    i
                ], arguments.length), "number" != typeof e1 && (s = e1, e1 = 1 / 0), this.global("_", !1), v(this, et, "f").demandedCommands._ = {
                    min: t1,
                    max: e1,
                    minMsg: s,
                    maxMsg: i
                }, this;
            }
            demand(t1, e1, s) {
                return Array.isArray(e1) ? (e1.forEach((t1)=>{
                    d(s, !0, v(this, ct, "f")), this.demandOption(t1, s);
                }), e1 = 1 / 0) : "number" != typeof e1 && (s = e1, e1 = 1 / 0), "number" == typeof t1 ? (d(s, !0, v(this, ct, "f")), this.demandCommand(t1, e1, s, s)) : Array.isArray(t1) ? t1.forEach((t1)=>{
                    d(s, !0, v(this, ct, "f")), this.demandOption(t1, s);
                }) : "string" == typeof s ? this.demandOption(t1, s) : !0 !== s && void 0 !== s || this.demandOption(t1), this;
            }
            demandOption(t1, e1) {
                return h("<object|string|array> [string]", [
                    t1,
                    e1
                ], arguments.length), this[St](this.demandOption.bind(this), "demandedOptions", t1, e1), this;
            }
            deprecateOption(t1, e1) {
                return h("<string> [string|boolean]", [
                    t1,
                    e1
                ], arguments.length), v(this, et, "f").deprecatedOptions[t1] = e1, this;
            }
            describe(t1, e1) {
                return h("<object|string|array> [string]", [
                    t1,
                    e1
                ], arguments.length), this[Nt](t1, !0), v(this, pt, "f").describe(t1, e1), this;
            }
            detectLocale(t1) {
                return h("<boolean>", [
                    t1
                ], arguments.length), O(this, G, t1, "f"), this;
            }
            env(t1) {
                return h("[string|boolean]", [
                    t1
                ], arguments.length), !1 === t1 ? delete v(this, et, "f").envPrefix : v(this, et, "f").envPrefix = t1 || "", this;
            }
            epilogue(t1) {
                return h("<string>", [
                    t1
                ], arguments.length), v(this, pt, "f").epilog(t1), this;
            }
            epilog(t1) {
                return this.epilogue(t1);
            }
            example(t1, e1) {
                return h("<string|array> [string]", [
                    t1,
                    e1
                ], arguments.length), Array.isArray(t1) ? t1.forEach((t1)=>this.example(...t1)) : v(this, pt, "f").example(t1, e1), this;
            }
            exit(t1, e1) {
                O(this, J, !0, "f"), O(this, V, e1, "f"), v(this, T, "f") && v(this, ct, "f").process.exit(t1);
            }
            exitProcess(t1 = !0) {
                return h("[boolean]", [
                    t1
                ], arguments.length), O(this, T, t1, "f"), this;
            }
            fail(t1) {
                if (h("<function|boolean>", [
                    t1
                ], arguments.length), "boolean" == typeof t1 && !1 !== t1) throw new e1("Invalid first argument. Expected function or boolean 'false'");
                return v(this, pt, "f").failFn(t1), this;
            }
            getAliases() {
                return this.parsed ? this.parsed.aliases : {};
            }
            async getCompletion(t1, e1) {
                return h("<array> [function]", [
                    t1,
                    e1
                ], arguments.length), e1 ? v(this, U, "f").getCompletion(t1, e1) : new Promise((e1, s)=>{
                    v(this, U, "f").getCompletion(t1, (t1, i)=>{
                        t1 ? s(t1) : e1(i);
                    });
                });
            }
            getDemandedOptions() {
                return h([], 0), v(this, et, "f").demandedOptions;
            }
            getDemandedCommands() {
                return h([], 0), v(this, et, "f").demandedCommands;
            }
            getDeprecatedOptions() {
                return h([], 0), v(this, et, "f").deprecatedOptions;
            }
            getDetectLocale() {
                return v(this, G, "f");
            }
            getExitProcess() {
                return v(this, T, "f");
            }
            getGroups() {
                return Object.assign({}, v(this, K, "f"), v(this, at, "f"));
            }
            getHelp() {
                if (O(this, J, !0, "f"), !v(this, pt, "f").hasCachedHelpMessage()) {
                    if (!this.parsed) {
                        const t1 = this[Jt](v(this, ht, "f"), void 0, void 0, 0, !0);
                        if (f(t1)) return t1.then(()=>v(this, pt, "f").help());
                    }
                    const t1 = v(this, z, "f").runDefaultBuilderOn(this);
                    if (f(t1)) return t1.then(()=>v(this, pt, "f").help());
                }
                return Promise.resolve(v(this, pt, "f").help());
            }
            getOptions() {
                return v(this, et, "f");
            }
            getStrict() {
                return v(this, ft, "f");
            }
            getStrictCommands() {
                return v(this, dt, "f");
            }
            getStrictOptions() {
                return v(this, ut, "f");
            }
            global(t1, e1) {
                return h("<string|array> [boolean]", [
                    t1,
                    e1
                ], arguments.length), t1 = [].concat(t1), !1 !== e1 ? v(this, et, "f").local = v(this, et, "f").local.filter((e1)=>-1 === t1.indexOf(e1)) : t1.forEach((t1)=>{
                    v(this, et, "f").local.includes(t1) || v(this, et, "f").local.push(t1);
                }), this;
            }
            group(t1, e1) {
                h("<string|array> <string>", [
                    t1,
                    e1
                ], arguments.length);
                const s = v(this, at, "f")[e1] || v(this, K, "f")[e1];
                v(this, at, "f")[e1] && delete v(this, at, "f")[e1];
                const i = {};
                return v(this, K, "f")[e1] = (s || []).concat(t1).filter((t1)=>!i[t1] && (i[t1] = !0)), this;
            }
            hide(t1) {
                return h("<string>", [
                    t1
                ], arguments.length), v(this, et, "f").hiddenOptions.push(t1), this;
            }
            implies(t1, e1) {
                return h("<string|object> [number|string|array]", [
                    t1,
                    e1
                ], arguments.length), v(this, yt, "f").implies(t1, e1), this;
            }
            locale(t1) {
                return h("[string]", [
                    t1
                ], arguments.length), void 0 === t1 ? (this[kt](), v(this, ct, "f").y18n.getLocale()) : (O(this, G, !1, "f"), v(this, ct, "f").y18n.setLocale(t1), this);
            }
            middleware(t1, e1, s) {
                return v(this, Y, "f").addMiddleware(t1, !!e1, s);
            }
            nargs(t1, e1) {
                return h("<string|object|array> [number]", [
                    t1,
                    e1
                ], arguments.length), this[St](this.nargs.bind(this), "narg", t1, e1), this;
            }
            normalize(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("normalize", t1), this;
            }
            number(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("number", t1), this[Qt](t1), this;
            }
            option(t1, e1) {
                if (h("<string|object> [object]", [
                    t1,
                    e1
                ], arguments.length), "object" == typeof t1) Object.keys(t1).forEach((e1)=>{
                    this.options(e1, t1[e1]);
                });
                else {
                    "object" != typeof e1 && (e1 = {}), this[Qt](t1), v(this, mt, "f") && ("version" === t1 || "version" === (null == e1 ? void 0 : e1.alias)) && this[wt]('"version" is a reserved word.\nPlease do one of the following:\n- Disable version with `yargs.version(false)` if using "version" as an option\n- Use the built-in `yargs.version` method instead (if applicable)\n- Use a different option key\nhttps://yargs.js.org/docs/#api-reference-version', void 0, "versionWarning"), v(this, et, "f").key[t1] = !0, e1.alias && this.alias(t1, e1.alias);
                    const s = e1.deprecate || e1.deprecated;
                    s && this.deprecateOption(t1, s);
                    const i = e1.demand || e1.required || e1.require;
                    i && this.demand(t1, i), e1.demandOption && this.demandOption(t1, "string" == typeof e1.demandOption ? e1.demandOption : void 0), e1.conflicts && this.conflicts(t1, e1.conflicts), "default" in e1 && this.default(t1, e1.default), void 0 !== e1.implies && this.implies(t1, e1.implies), void 0 !== e1.nargs && this.nargs(t1, e1.nargs), e1.config && this.config(t1, e1.configParser), e1.normalize && this.normalize(t1), e1.choices && this.choices(t1, e1.choices), e1.coerce && this.coerce(t1, e1.coerce), e1.group && this.group(t1, e1.group), (e1.boolean || "boolean" === e1.type) && (this.boolean(t1), e1.alias && this.boolean(e1.alias)), (e1.array || "array" === e1.type) && (this.array(t1), e1.alias && this.array(e1.alias)), (e1.number || "number" === e1.type) && (this.number(t1), e1.alias && this.number(e1.alias)), (e1.string || "string" === e1.type) && (this.string(t1), e1.alias && this.string(e1.alias)), (e1.count || "count" === e1.type) && this.count(t1), "boolean" == typeof e1.global && this.global(t1, e1.global), e1.defaultDescription && (v(this, et, "f").defaultDescription[t1] = e1.defaultDescription), e1.skipValidation && this.skipValidation(t1);
                    const n = e1.describe || e1.description || e1.desc, r = v(this, pt, "f").getDescriptions();
                    Object.prototype.hasOwnProperty.call(r, t1) && "string" != typeof n || this.describe(t1, n), e1.hidden && this.hide(t1), e1.requiresArg && this.requiresArg(t1);
                }
                return this;
            }
            options(t1, e1) {
                return this.option(t1, e1);
            }
            parse(t1, e1, s) {
                h("[string|array] [function|boolean|object] [function]", [
                    t1,
                    e1,
                    s
                ], arguments.length), this[Ct](), void 0 === t1 && (t1 = v(this, ht, "f")), "object" == typeof e1 && (O(this, rt, e1, "f"), e1 = s), "function" == typeof e1 && (O(this, nt, e1, "f"), e1 = !1), e1 || O(this, ht, t1, "f"), v(this, nt, "f") && O(this, T, !1, "f");
                const i = this[Jt](t1, !!e1), n = this.parsed;
                return v(this, U, "f").setParsed(this.parsed), f(i) ? i.then((t1)=>(v(this, nt, "f") && v(this, nt, "f").call(this, v(this, V, "f"), t1, v(this, tt, "f")), t1)).catch((t1)=>{
                    throw v(this, nt, "f") && v(this, nt, "f")(t1, this.parsed.argv, v(this, tt, "f")), t1;
                }).finally(()=>{
                    this[Ht](), this.parsed = n;
                }) : (v(this, nt, "f") && v(this, nt, "f").call(this, v(this, V, "f"), i, v(this, tt, "f")), this[Ht](), this.parsed = n, i);
            }
            parseAsync(t1, e1, s) {
                const i = this.parse(t1, e1, s);
                return f(i) ? i : Promise.resolve(i);
            }
            parseSync(t1, s, i) {
                const n = this.parse(t1, s, i);
                if (f(n)) throw new e1(".parseSync() must not be used with asynchronous builders, handlers, or middleware");
                return n;
            }
            parserConfiguration(t1) {
                return h("<object>", [
                    t1
                ], arguments.length), O(this, it, t1, "f"), this;
            }
            pkgConf(t1, e1) {
                h("<string> [string]", [
                    t1,
                    e1
                ], arguments.length);
                let s = null;
                const i = this[At](e1 || v(this, W, "f"));
                return i[t1] && "object" == typeof i[t1] && (s = n(i[t1], e1 || v(this, W, "f"), this[Mt]()["deep-merge-config"] || !1, v(this, ct, "f")), v(this, et, "f").configObjects = (v(this, et, "f").configObjects || []).concat(s)), this;
            }
            positional(t1, e1) {
                h("<string> <object>", [
                    t1,
                    e1
                ], arguments.length);
                const s = [
                    "default",
                    "defaultDescription",
                    "implies",
                    "normalize",
                    "choices",
                    "conflicts",
                    "coerce",
                    "type",
                    "describe",
                    "desc",
                    "description",
                    "alias"
                ];
                e1 = g(e1, (t1, e1)=>!("type" === t1 && ![
                        "string",
                        "number",
                        "boolean"
                    ].includes(e1)) && s.includes(t1));
                const i = v(this, q, "f").fullCommands[v(this, q, "f").fullCommands.length - 1], n = i ? v(this, z, "f").cmdToParseOptions(i) : {
                    array: [],
                    alias: {},
                    default: {},
                    demand: {}
                };
                return p(n).forEach((s)=>{
                    const i = n[s];
                    Array.isArray(i) ? -1 !== i.indexOf(t1) && (e1[s] = !0) : !i[t1] || s in e1 || (e1[s] = i[t1]);
                }), this.group(t1, v(this, pt, "f").getPositionalGroupName()), this.option(t1, e1);
            }
            recommendCommands(t1 = !0) {
                return h("[boolean]", [
                    t1
                ], arguments.length), O(this, lt, t1, "f"), this;
            }
            required(t1, e1, s) {
                return this.demand(t1, e1, s);
            }
            require(t1, e1, s) {
                return this.demand(t1, e1, s);
            }
            requiresArg(t1) {
                return h("<array|string|object> [number]", [
                    t1
                ], arguments.length), "string" == typeof t1 && v(this, et, "f").narg[t1] || this[St](this.requiresArg.bind(this), "narg", t1, NaN), this;
            }
            showCompletionScript(t1, e1) {
                return h("[string] [string]", [
                    t1,
                    e1
                ], arguments.length), t1 = t1 || this.$0, v(this, Q, "f").log(v(this, U, "f").generateCompletionScript(t1, e1 || v(this, F, "f") || "completion")), this;
            }
            showHelp(t1) {
                if (h("[string|function]", [
                    t1
                ], arguments.length), O(this, J, !0, "f"), !v(this, pt, "f").hasCachedHelpMessage()) {
                    if (!this.parsed) {
                        const e1 = this[Jt](v(this, ht, "f"), void 0, void 0, 0, !0);
                        if (f(e1)) return e1.then(()=>{
                            v(this, pt, "f").showHelp(t1);
                        }), this;
                    }
                    const e1 = v(this, z, "f").runDefaultBuilderOn(this);
                    if (f(e1)) return e1.then(()=>{
                        v(this, pt, "f").showHelp(t1);
                    }), this;
                }
                return v(this, pt, "f").showHelp(t1), this;
            }
            scriptName(t1) {
                return this.customScriptName = !0, this.$0 = t1, this;
            }
            showHelpOnFail(t1, e1) {
                return h("[boolean|string] [string]", [
                    t1,
                    e1
                ], arguments.length), v(this, pt, "f").showHelpOnFail(t1, e1), this;
            }
            showVersion(t1) {
                return h("[string|function]", [
                    t1
                ], arguments.length), v(this, pt, "f").showVersion(t1), this;
            }
            skipValidation(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("skipValidation", t1), this;
            }
            strict(t1) {
                return h("[boolean]", [
                    t1
                ], arguments.length), O(this, ft, !1 !== t1, "f"), this;
            }
            strictCommands(t1) {
                return h("[boolean]", [
                    t1
                ], arguments.length), O(this, dt, !1 !== t1, "f"), this;
            }
            strictOptions(t1) {
                return h("[boolean]", [
                    t1
                ], arguments.length), O(this, ut, !1 !== t1, "f"), this;
            }
            string(t1) {
                return h("<array|string>", [
                    t1
                ], arguments.length), this[Pt]("string", t1), this[Qt](t1), this;
            }
            terminalWidth() {
                return h([], 0), v(this, ct, "f").process.stdColumns;
            }
            updateLocale(t1) {
                return this.updateStrings(t1);
            }
            updateStrings(t1) {
                return h("<object>", [
                    t1
                ], arguments.length), O(this, G, !1, "f"), v(this, ct, "f").y18n.updateLocale(t1), this;
            }
            usage(t1, s, i, n) {
                if (h("<string|null|undefined> [string|boolean] [function|object] [function]", [
                    t1,
                    s,
                    i,
                    n
                ], arguments.length), void 0 !== s) {
                    if (d(t1, null, v(this, ct, "f")), (t1 || "").match(/^\$0( |$)/)) return this.command(t1, s, i, n);
                    throw new e1(".usage() description must start with $0 if being used as alias for .command()");
                }
                return v(this, pt, "f").usage(t1), this;
            }
            usageConfiguration(t1) {
                return h("<object>", [
                    t1
                ], arguments.length), O(this, gt, t1, "f"), this;
            }
            version(t1, e1, s) {
                const i = "version";
                if (h("[boolean|string] [string] [string]", [
                    t1,
                    e1,
                    s
                ], arguments.length), v(this, mt, "f") && (this[Ot](v(this, mt, "f")), v(this, pt, "f").version(void 0), O(this, mt, null, "f")), 0 === arguments.length) s = this[xt](), t1 = i;
                else if (1 === arguments.length) {
                    if (!1 === t1) return this;
                    s = t1, t1 = i;
                } else 2 === arguments.length && (s = e1, e1 = void 0);
                return O(this, mt, "string" == typeof t1 ? t1 : i, "f"), e1 = e1 || v(this, pt, "f").deferY18nLookup("Show version number"), v(this, pt, "f").version(s || void 0), this.boolean(v(this, mt, "f")), this.describe(v(this, mt, "f"), e1), this;
            }
            wrap(t1) {
                return h("<number|null|undefined>", [
                    t1
                ], arguments.length), v(this, pt, "f").wrap(t1), this;
            }
            [(z = new WeakMap, W = new WeakMap, q = new WeakMap, U = new WeakMap, F = new WeakMap, L = new WeakMap, V = new WeakMap, G = new WeakMap, R = new WeakMap, T = new WeakMap, B = new WeakMap, Y = new WeakMap, K = new WeakMap, J = new WeakMap, Z = new WeakMap, X = new WeakMap, Q = new WeakMap, tt = new WeakMap, et = new WeakMap, st = new WeakMap, it = new WeakMap, nt = new WeakMap, rt = new WeakMap, ot = new WeakMap, at = new WeakMap, ht = new WeakMap, lt = new WeakMap, ct = new WeakMap, ft = new WeakMap, dt = new WeakMap, ut = new WeakMap, pt = new WeakMap, gt = new WeakMap, mt = new WeakMap, yt = new WeakMap, bt)](t1) {
                if (!t1._ || !t1["--"]) return t1;
                t1._.push.apply(t1._, t1["--"]);
                try {
                    delete t1["--"];
                } catch (t1) {}
                return t1;
            }
            [vt]() {
                return {
                    log: (...t1)=>{
                        this[Rt]() || console.log(...t1), O(this, J, !0, "f"), v(this, tt, "f").length && O(this, tt, v(this, tt, "f") + "\n", "f"), O(this, tt, v(this, tt, "f") + t1.join(" "), "f");
                    },
                    error: (...t1)=>{
                        this[Rt]() || console.error(...t1), O(this, J, !0, "f"), v(this, tt, "f").length && O(this, tt, v(this, tt, "f") + "\n", "f"), O(this, tt, v(this, tt, "f") + t1.join(" "), "f");
                    }
                };
            }
            [Ot](t1) {
                p(v(this, et, "f")).forEach((e1)=>{
                    if ("configObjects" === e1) return;
                    const s = v(this, et, "f")[e1];
                    Array.isArray(s) ? s.includes(t1) && s.splice(s.indexOf(t1), 1) : "object" == typeof s && delete s[t1];
                }), delete v(this, pt, "f").getDescriptions()[t1];
            }
            [wt](t1, e1, s) {
                v(this, R, "f")[s] || (v(this, ct, "f").process.emitWarning(t1, e1), v(this, R, "f")[s] = !0);
            }
            [Ct]() {
                v(this, B, "f").push({
                    options: v(this, et, "f"),
                    configObjects: v(this, et, "f").configObjects.slice(0),
                    exitProcess: v(this, T, "f"),
                    groups: v(this, K, "f"),
                    strict: v(this, ft, "f"),
                    strictCommands: v(this, dt, "f"),
                    strictOptions: v(this, ut, "f"),
                    completionCommand: v(this, F, "f"),
                    output: v(this, tt, "f"),
                    exitError: v(this, V, "f"),
                    hasOutput: v(this, J, "f"),
                    parsed: this.parsed,
                    parseFn: v(this, nt, "f"),
                    parseContext: v(this, rt, "f")
                }), v(this, pt, "f").freeze(), v(this, yt, "f").freeze(), v(this, z, "f").freeze(), v(this, Y, "f").freeze();
            }
            [jt]() {
                let t1, e1 = "";
                return t1 = /\b(node|iojs|electron)(\.exe)?$/.test(v(this, ct, "f").process.argv()[0]) ? v(this, ct, "f").process.argv().slice(1, 2) : v(this, ct, "f").process.argv().slice(0, 1), e1 = t1.map((t1)=>{
                    const e1 = this[Yt](v(this, W, "f"), t1);
                    return t1.match(/^(\/|([a-zA-Z]:)?\\)/) && e1.length < t1.length ? e1 : t1;
                }).join(" ").trim(), v(this, ct, "f").getEnv("_") && v(this, ct, "f").getProcessArgvBin() === v(this, ct, "f").getEnv("_") && (e1 = v(this, ct, "f").getEnv("_").replace(`${v(this, ct, "f").path.dirname(v(this, ct, "f").process.execPath())}/`, "")), e1;
            }
            [Mt]() {
                return v(this, it, "f");
            }
            [_t]() {
                return v(this, gt, "f");
            }
            [kt]() {
                if (!v(this, G, "f")) return;
                const t1 = v(this, ct, "f").getEnv("LC_ALL") || v(this, ct, "f").getEnv("LC_MESSAGES") || v(this, ct, "f").getEnv("LANG") || v(this, ct, "f").getEnv("LANGUAGE") || "en_US";
                this.locale(t1.replace(/[.:].*/, ""));
            }
            [xt]() {
                return this[At]().version || "unknown";
            }
            [Et](t1) {
                const e1 = t1["--"] ? t1["--"] : t1._;
                for(let t1, s = 0; void 0 !== (t1 = e1[s]); s++)v(this, ct, "f").Parser.looksLikeNumber(t1) && Number.isSafeInteger(Math.floor(parseFloat(`${t1}`))) && (e1[s] = Number(t1));
                return t1;
            }
            [At](t1) {
                const e1 = t1 || "*";
                if (v(this, ot, "f")[e1]) return v(this, ot, "f")[e1];
                let s = {};
                try {
                    let e1 = t1 || v(this, ct, "f").mainFilename;
                    !t1 && v(this, ct, "f").path.extname(e1) && (e1 = v(this, ct, "f").path.dirname(e1));
                    const i = v(this, ct, "f").findUp(e1, (t1, e1)=>e1.includes("package.json") ? "package.json" : void 0);
                    d(i, void 0, v(this, ct, "f")), s = JSON.parse(v(this, ct, "f").readFileSync(i, "utf8"));
                } catch (t1) {}
                return v(this, ot, "f")[e1] = s || {}, v(this, ot, "f")[e1];
            }
            [Pt](t1, e1) {
                (e1 = [].concat(e1)).forEach((e1)=>{
                    e1 = this[Dt](e1), v(this, et, "f")[t1].push(e1);
                });
            }
            [St](t1, e1, s, i) {
                this[It](t1, e1, s, i, (t1, e1, s)=>{
                    v(this, et, "f")[t1][e1] = s;
                });
            }
            [$t](t1, e1, s, i) {
                this[It](t1, e1, s, i, (t1, e1, s)=>{
                    v(this, et, "f")[t1][e1] = (v(this, et, "f")[t1][e1] || []).concat(s);
                });
            }
            [It](t1, e1, s, i, n) {
                if (Array.isArray(s)) s.forEach((e1)=>{
                    t1(e1, i);
                });
                else if (((t1)=>"object" == typeof t1)(s)) for (const e1 of p(s))t1(e1, s[e1]);
                else n(e1, this[Dt](s), i);
            }
            [Dt](t1) {
                return "__proto__" === t1 ? "___proto___" : t1;
            }
            [Nt](t1, e1) {
                return this[St](this[Nt].bind(this), "key", t1, e1), this;
            }
            [Ht]() {
                var t1, e1, s, i, n, r, o, a, h, l, c, f;
                const u = v(this, B, "f").pop();
                let p;
                d(u, void 0, v(this, ct, "f")), t1 = this, e1 = this, s = this, i = this, n = this, r = this, o = this, a = this, h = this, l = this, c = this, f = this, ({ options: ({
                    set value (e){
                        O(t1, et, e, "f");
                    }
                }).value, configObjects: p, exitProcess: ({
                    set value (t){
                        O(e1, T, t, "f");
                    }
                }).value, groups: ({
                    set value (t){
                        O(s, K, t, "f");
                    }
                }).value, output: ({
                    set value (t){
                        O(i, tt, t, "f");
                    }
                }).value, exitError: ({
                    set value (t){
                        O(n, V, t, "f");
                    }
                }).value, hasOutput: ({
                    set value (t){
                        O(r, J, t, "f");
                    }
                }).value, parsed: this.parsed, strict: ({
                    set value (t){
                        O(o, ft, t, "f");
                    }
                }).value, strictCommands: ({
                    set value (t){
                        O(a, dt, t, "f");
                    }
                }).value, strictOptions: ({
                    set value (t){
                        O(h, ut, t, "f");
                    }
                }).value, completionCommand: ({
                    set value (t){
                        O(l, F, t, "f");
                    }
                }).value, parseFn: ({
                    set value (t){
                        O(c, nt, t, "f");
                    }
                }).value, parseContext: ({
                    set value (t){
                        O(f, rt, t, "f");
                    }
                }).value } = u), v(this, et, "f").configObjects = p, v(this, pt, "f").unfreeze(), v(this, yt, "f").unfreeze(), v(this, z, "f").unfreeze(), v(this, Y, "f").unfreeze();
            }
            [zt](t1, e1) {
                return j(e1, (e1)=>(t1(e1), e1));
            }
            getInternalMethods() {
                return {
                    getCommandInstance: this[Wt].bind(this),
                    getContext: this[qt].bind(this),
                    getHasOutput: this[Ut].bind(this),
                    getLoggerInstance: this[Ft].bind(this),
                    getParseContext: this[Lt].bind(this),
                    getParserConfiguration: this[Mt].bind(this),
                    getUsageConfiguration: this[_t].bind(this),
                    getUsageInstance: this[Vt].bind(this),
                    getValidationInstance: this[Gt].bind(this),
                    hasParseCallback: this[Rt].bind(this),
                    isGlobalContext: this[Tt].bind(this),
                    postProcess: this[Bt].bind(this),
                    reset: this[Kt].bind(this),
                    runValidation: this[Zt].bind(this),
                    runYargsParserAndExecuteCommands: this[Jt].bind(this),
                    setHasOutput: this[Xt].bind(this)
                };
            }
            [Wt]() {
                return v(this, z, "f");
            }
            [qt]() {
                return v(this, q, "f");
            }
            [Ut]() {
                return v(this, J, "f");
            }
            [Ft]() {
                return v(this, Q, "f");
            }
            [Lt]() {
                return v(this, rt, "f") || {};
            }
            [Vt]() {
                return v(this, pt, "f");
            }
            [Gt]() {
                return v(this, yt, "f");
            }
            [Rt]() {
                return !!v(this, nt, "f");
            }
            [Tt]() {
                return v(this, X, "f");
            }
            [Bt](t1, e1, s, i) {
                if (s) return t1;
                if (f(t1)) return t1;
                e1 || (t1 = this[bt](t1));
                return (this[Mt]()["parse-positional-numbers"] || void 0 === this[Mt]()["parse-positional-numbers"]) && (t1 = this[Et](t1)), i && (t1 = C(t1, this, v(this, Y, "f").getMiddleware(), !1)), t1;
            }
            [Kt](t1 = {}) {
                O(this, et, v(this, et, "f") || {}, "f");
                const e1 = {};
                e1.local = v(this, et, "f").local || [], e1.configObjects = v(this, et, "f").configObjects || [];
                const s = {};
                e1.local.forEach((e1)=>{
                    s[e1] = !0, (t1[e1] || []).forEach((t1)=>{
                        s[t1] = !0;
                    });
                }), Object.assign(v(this, at, "f"), Object.keys(v(this, K, "f")).reduce((t1, e1)=>{
                    const i = v(this, K, "f")[e1].filter((t1)=>!(t1 in s));
                    return i.length > 0 && (t1[e1] = i), t1;
                }, {})), O(this, K, {}, "f");
                return [
                    "array",
                    "boolean",
                    "string",
                    "skipValidation",
                    "count",
                    "normalize",
                    "number",
                    "hiddenOptions"
                ].forEach((t1)=>{
                    e1[t1] = (v(this, et, "f")[t1] || []).filter((t1)=>!s[t1]);
                }), [
                    "narg",
                    "key",
                    "alias",
                    "default",
                    "defaultDescription",
                    "config",
                    "choices",
                    "demandedOptions",
                    "demandedCommands",
                    "deprecatedOptions"
                ].forEach((t1)=>{
                    e1[t1] = g(v(this, et, "f")[t1], (t1)=>!s[t1]);
                }), e1.envPrefix = v(this, et, "f").envPrefix, O(this, et, e1, "f"), O(this, pt, v(this, pt, "f") ? v(this, pt, "f").reset(s) : P(this, v(this, ct, "f")), "f"), O(this, yt, v(this, yt, "f") ? v(this, yt, "f").reset(s) : function(t1, e1, s) {
                    const i = s.y18n.__, n = s.y18n.__n, r = {
                        nonOptionCount: function(s) {
                            const i = t1.getDemandedCommands(), r = s._.length + (s["--"] ? s["--"].length : 0) - t1.getInternalMethods().getContext().commands.length;
                            i._ && (r < i._.min || r > i._.max) && (r < i._.min ? void 0 !== i._.minMsg ? e1.fail(i._.minMsg ? i._.minMsg.replace(/\$0/g, r.toString()).replace(/\$1/, i._.min.toString()) : null) : e1.fail(n("Not enough non-option arguments: got %s, need at least %s", "Not enough non-option arguments: got %s, need at least %s", r, r.toString(), i._.min.toString())) : r > i._.max && (void 0 !== i._.maxMsg ? e1.fail(i._.maxMsg ? i._.maxMsg.replace(/\$0/g, r.toString()).replace(/\$1/, i._.max.toString()) : null) : e1.fail(n("Too many non-option arguments: got %s, maximum of %s", "Too many non-option arguments: got %s, maximum of %s", r, r.toString(), i._.max.toString()))));
                        },
                        positionalCount: function(t1, s) {
                            s < t1 && e1.fail(n("Not enough non-option arguments: got %s, need at least %s", "Not enough non-option arguments: got %s, need at least %s", s, s + "", t1 + ""));
                        },
                        requiredArguments: function(t1, s) {
                            let i = null;
                            for (const e1 of Object.keys(s))Object.prototype.hasOwnProperty.call(t1, e1) && void 0 !== t1[e1] || (i = i || {}, i[e1] = s[e1]);
                            if (i) {
                                const t1 = [];
                                for (const e1 of Object.keys(i)){
                                    const s = i[e1];
                                    s && t1.indexOf(s) < 0 && t1.push(s);
                                }
                                const s = t1.length ? `\n${t1.join("\n")}` : "";
                                e1.fail(n("Missing required argument: %s", "Missing required arguments: %s", Object.keys(i).length, Object.keys(i).join(", ") + s));
                            }
                        },
                        unknownArguments: function(s, i, o, a, h = !0) {
                            var l;
                            const c = t1.getInternalMethods().getCommandInstance().getCommands(), f = [], d = t1.getInternalMethods().getContext();
                            if (Object.keys(s).forEach((e1)=>{
                                H.includes(e1) || Object.prototype.hasOwnProperty.call(o, e1) || Object.prototype.hasOwnProperty.call(t1.getInternalMethods().getParseContext(), e1) || r.isValidAndSomeAliasIsNotNew(e1, i) || f.push(e1);
                            }), h && (d.commands.length > 0 || c.length > 0 || a) && s._.slice(d.commands.length).forEach((t1)=>{
                                c.includes("" + t1) || f.push("" + t1);
                            }), h) {
                                const e1 = (null == (l = t1.getDemandedCommands()._) ? void 0 : l.max) || 0, i = d.commands.length + e1;
                                i < s._.length && s._.slice(i).forEach((t1)=>{
                                    t1 = String(t1), d.commands.includes(t1) || f.includes(t1) || f.push(t1);
                                });
                            }
                            f.length && e1.fail(n("Unknown argument: %s", "Unknown arguments: %s", f.length, f.map((t1)=>t1.trim() ? t1 : `"${t1}"`).join(", ")));
                        },
                        unknownCommands: function(s) {
                            const i = t1.getInternalMethods().getCommandInstance().getCommands(), r = [], o = t1.getInternalMethods().getContext();
                            return (o.commands.length > 0 || i.length > 0) && s._.slice(o.commands.length).forEach((t1)=>{
                                i.includes("" + t1) || r.push("" + t1);
                            }), r.length > 0 && (e1.fail(n("Unknown command: %s", "Unknown commands: %s", r.length, r.join(", "))), !0);
                        },
                        isValidAndSomeAliasIsNotNew: function(e1, s) {
                            if (!Object.prototype.hasOwnProperty.call(s, e1)) return !1;
                            const i = t1.parsed.newAliases;
                            return [
                                e1,
                                ...s[e1]
                            ].some((t1)=>!Object.prototype.hasOwnProperty.call(i, t1) || !i[e1]);
                        },
                        limitedChoices: function(s) {
                            const n = t1.getOptions(), r = {};
                            if (!Object.keys(n.choices).length) return;
                            Object.keys(s).forEach((t1)=>{
                                -1 === H.indexOf(t1) && Object.prototype.hasOwnProperty.call(n.choices, t1) && [].concat(s[t1]).forEach((e1)=>{
                                    -1 === n.choices[t1].indexOf(e1) && void 0 !== e1 && (r[t1] = (r[t1] || []).concat(e1));
                                });
                            });
                            const o = Object.keys(r);
                            if (!o.length) return;
                            let a = i("Invalid values:");
                            o.forEach((t1)=>{
                                a += `\n  ${i("Argument: %s, Given: %s, Choices: %s", t1, e1.stringifiedValues(r[t1]), e1.stringifiedValues(n.choices[t1]))}`;
                            }), e1.fail(a);
                        }
                    };
                    let o = {};
                    function a(t1, e1) {
                        const s = Number(e1);
                        return "number" == typeof (e1 = isNaN(s) ? e1 : s) ? e1 = t1._.length >= e1 : e1.match(/^--no-.+/) ? (e1 = e1.match(/^--no-(.+)/)[1], e1 = !Object.prototype.hasOwnProperty.call(t1, e1)) : e1 = Object.prototype.hasOwnProperty.call(t1, e1), e1;
                    }
                    r.implies = function(e1, i) {
                        h("<string|object> [array|number|string]", [
                            e1,
                            i
                        ], arguments.length), "object" == typeof e1 ? Object.keys(e1).forEach((t1)=>{
                            r.implies(t1, e1[t1]);
                        }) : (t1.global(e1), o[e1] || (o[e1] = []), Array.isArray(i) ? i.forEach((t1)=>r.implies(e1, t1)) : (d(i, void 0, s), o[e1].push(i)));
                    }, r.getImplied = function() {
                        return o;
                    }, r.implications = function(t1) {
                        const s = [];
                        if (Object.keys(o).forEach((e1)=>{
                            const i = e1;
                            (o[e1] || []).forEach((e1)=>{
                                let n = i;
                                const r = e1;
                                n = a(t1, n), e1 = a(t1, e1), n && !e1 && s.push(` ${i} -> ${r}`);
                            });
                        }), s.length) {
                            let t1 = `${i("Implications failed:")}\n`;
                            s.forEach((e1)=>{
                                t1 += e1;
                            }), e1.fail(t1);
                        }
                    };
                    let l = {};
                    r.conflicts = function(e1, s) {
                        h("<string|object> [array|string]", [
                            e1,
                            s
                        ], arguments.length), "object" == typeof e1 ? Object.keys(e1).forEach((t1)=>{
                            r.conflicts(t1, e1[t1]);
                        }) : (t1.global(e1), l[e1] || (l[e1] = []), Array.isArray(s) ? s.forEach((t1)=>r.conflicts(e1, t1)) : l[e1].push(s));
                    }, r.getConflicting = ()=>l, r.conflicting = function(n) {
                        Object.keys(n).forEach((t1)=>{
                            l[t1] && l[t1].forEach((s)=>{
                                s && void 0 !== n[t1] && void 0 !== n[s] && e1.fail(i("Arguments %s and %s are mutually exclusive", t1, s));
                            });
                        }), t1.getInternalMethods().getParserConfiguration()["strip-dashed"] && Object.keys(l).forEach((t1)=>{
                            l[t1].forEach((r)=>{
                                r && void 0 !== n[s.Parser.camelCase(t1)] && void 0 !== n[s.Parser.camelCase(r)] && e1.fail(i("Arguments %s and %s are mutually exclusive", t1, r));
                            });
                        });
                    }, r.recommendCommands = function(t1, s) {
                        s = s.sort((t1, e1)=>e1.length - t1.length);
                        let n = null, r = 1 / 0;
                        for(let e1, i = 0; void 0 !== (e1 = s[i]); i++){
                            const s = N(t1, e1);
                            s <= 3 && s < r && (r = s, n = e1);
                        }
                        n && e1.fail(i("Did you mean %s?", n));
                    }, r.reset = function(t1) {
                        return o = g(o, (e1)=>!t1[e1]), l = g(l, (e1)=>!t1[e1]), r;
                    };
                    const c = [];
                    return r.freeze = function() {
                        c.push({
                            implied: o,
                            conflicting: l
                        });
                    }, r.unfreeze = function() {
                        const t1 = c.pop();
                        d(t1, void 0, s), { implied: o, conflicting: l } = t1;
                    }, r;
                }(this, v(this, pt, "f"), v(this, ct, "f")), "f"), O(this, z, v(this, z, "f") ? v(this, z, "f").reset() : function(t1, e1, s, i) {
                    return new _(t1, e1, s, i);
                }(v(this, pt, "f"), v(this, yt, "f"), v(this, Y, "f"), v(this, ct, "f")), "f"), v(this, U, "f") || O(this, U, function(t1, e1, s, i) {
                    return new D(t1, e1, s, i);
                }(this, v(this, pt, "f"), v(this, z, "f"), v(this, ct, "f")), "f"), v(this, Y, "f").reset(), O(this, F, null, "f"), O(this, tt, "", "f"), O(this, V, null, "f"), O(this, J, !1, "f"), this.parsed = !1, this;
            }
            [Yt](t1, e1) {
                return v(this, ct, "f").path.relative(t1, e1);
            }
            [Jt](t1, s, i, n = 0, r = !1) {
                let o = !!i || r;
                t1 = t1 || v(this, ht, "f"), v(this, et, "f").__ = v(this, ct, "f").y18n.__, v(this, et, "f").configuration = this[Mt]();
                const a = !!v(this, et, "f").configuration["populate--"], h = Object.assign({}, v(this, et, "f").configuration, {
                    "populate--": !0
                }), l = v(this, ct, "f").Parser.detailed(t1, Object.assign({}, v(this, et, "f"), {
                    configuration: {
                        "parse-positional-numbers": !1,
                        ...h
                    }
                })), c = Object.assign(l.argv, v(this, rt, "f"));
                let d;
                const u = l.aliases;
                let p = !1, g = !1;
                Object.keys(c).forEach((t1)=>{
                    t1 === v(this, Z, "f") && c[t1] ? p = !0 : t1 === v(this, mt, "f") && c[t1] && (g = !0);
                }), c.$0 = this.$0, this.parsed = l, 0 === n && v(this, pt, "f").clearCachedHelpMessage();
                try {
                    if (this[kt](), s) return this[Bt](c, a, !!i, !1);
                    if (v(this, Z, "f")) [
                        v(this, Z, "f")
                    ].concat(u[v(this, Z, "f")] || []).filter((t1)=>t1.length > 1).includes("" + c._[c._.length - 1]) && (c._.pop(), p = !0);
                    O(this, X, !1, "f");
                    const h = v(this, z, "f").getCommands(), m = v(this, U, "f").completionKey in c, y = p || m || r;
                    if (c._.length) {
                        if (h.length) {
                            let t1;
                            for(let e1, s = n || 0; void 0 !== c._[s]; s++){
                                if (e1 = String(c._[s]), h.includes(e1) && e1 !== v(this, F, "f")) {
                                    const t1 = v(this, z, "f").runCommand(e1, this, l, s + 1, r, p || g || r);
                                    return this[Bt](t1, a, !!i, !1);
                                }
                                if (!t1 && e1 !== v(this, F, "f")) {
                                    t1 = e1;
                                    break;
                                }
                            }
                            !v(this, z, "f").hasDefaultCommand() && v(this, lt, "f") && t1 && !y && v(this, yt, "f").recommendCommands(t1, h);
                        }
                        v(this, F, "f") && c._.includes(v(this, F, "f")) && !m && (v(this, T, "f") && E(!0), this.showCompletionScript(), this.exit(0));
                    }
                    if (v(this, z, "f").hasDefaultCommand() && !y) {
                        const t1 = v(this, z, "f").runCommand(null, this, l, 0, r, p || g || r);
                        return this[Bt](t1, a, !!i, !1);
                    }
                    if (m) {
                        v(this, T, "f") && E(!0);
                        const s = (t1 = [].concat(t1)).slice(t1.indexOf(`--${v(this, U, "f").completionKey}`) + 1);
                        return v(this, U, "f").getCompletion(s, (t1, s)=>{
                            if (t1) throw new e1(t1.message);
                            (s || []).forEach((t1)=>{
                                v(this, Q, "f").log(t1);
                            }), this.exit(0);
                        }), this[Bt](c, !a, !!i, !1);
                    }
                    if (v(this, J, "f") || (p ? (v(this, T, "f") && E(!0), o = !0, this.showHelp("log"), this.exit(0)) : g && (v(this, T, "f") && E(!0), o = !0, v(this, pt, "f").showVersion("log"), this.exit(0))), !o && v(this, et, "f").skipValidation.length > 0 && (o = Object.keys(c).some((t1)=>v(this, et, "f").skipValidation.indexOf(t1) >= 0 && !0 === c[t1])), !o) {
                        if (l.error) throw new e1(l.error.message);
                        if (!m) {
                            const t1 = this[Zt](u, {}, l.error);
                            i || (d = C(c, this, v(this, Y, "f").getMiddleware(), !0)), d = this[zt](t1, null != d ? d : c), f(d) && !i && (d = d.then(()=>C(c, this, v(this, Y, "f").getMiddleware(), !1)));
                        }
                    }
                } catch (t1) {
                    if (!(t1 instanceof e1)) throw t1;
                    v(this, pt, "f").fail(t1.message, t1);
                }
                return this[Bt](null != d ? d : c, a, !!i, !0);
            }
            [Zt](t1, s, i, n) {
                const r = {
                    ...this.getDemandedOptions()
                };
                return (o)=>{
                    if (i) throw new e1(i.message);
                    v(this, yt, "f").nonOptionCount(o), v(this, yt, "f").requiredArguments(o, r);
                    let a = !1;
                    v(this, dt, "f") && (a = v(this, yt, "f").unknownCommands(o)), v(this, ft, "f") && !a ? v(this, yt, "f").unknownArguments(o, t1, s, !!n) : v(this, ut, "f") && v(this, yt, "f").unknownArguments(o, t1, {}, !1, !1), v(this, yt, "f").limitedChoices(o), v(this, yt, "f").implications(o), v(this, yt, "f").conflicting(o);
                };
            }
            [Xt]() {
                O(this, J, !0, "f");
            }
            [Qt](t1) {
                if ("string" == typeof t1) v(this, et, "f").key[t1] = !0;
                else for (const e1 of t1)v(this, et, "f").key[e1] = !0;
            }
        }
        var ee, se;
        const { readFileSync: ie } = __webpack_require__("fs"), { inspect: ne } = __webpack_require__("util"), { resolve: re } = __webpack_require__("path"), oe = __webpack_require__("../../node_modules/.pnpm/y18n@5.0.8/node_modules/y18n/build/index.cjs"), ae = __webpack_require__("../../node_modules/.pnpm/yargs-parser@21.1.1/node_modules/yargs-parser/build/index.cjs");
        var he, le = {
            assert: {
                notStrictEqual: t1.notStrictEqual,
                strictEqual: t1.strictEqual
            },
            cliui: __webpack_require__("../../node_modules/.pnpm/cliui@8.0.1/node_modules/cliui/build/index.cjs"),
            findUp: __webpack_require__("../../node_modules/.pnpm/escalade@3.2.0/node_modules/escalade/sync/index.js"),
            getEnv: (t1)=>process.env[t1],
            getCallerFile: __webpack_require__("../../node_modules/.pnpm/get-caller-file@2.0.5/node_modules/get-caller-file/index.js"),
            getProcessArgvBin: y,
            inspect: ne,
            mainFilename: null != (se = null == (ee = void 0 === require ? void 0 : __webpack_require__.c[__webpack_require__.s]) ? void 0 : ee.filename) ? se : process.cwd(),
            Parser: ae,
            path: __webpack_require__("path"),
            process: {
                argv: ()=>process.argv,
                cwd: process.cwd,
                emitWarning: (t1, e1)=>process.emitWarning(t1, e1),
                execPath: ()=>process.execPath,
                exit: (t1)=>{
                    process.exit(t1);
                },
                nextTick: process.nextTick,
                stdColumns: void 0 !== process.stdout.columns ? process.stdout.columns : null
            },
            readFileSync: ie,
            require: require,
            requireDirectory: __webpack_require__("../../node_modules/.pnpm/require-directory@2.1.1/node_modules/require-directory/index.js"),
            stringWidth: __webpack_require__("../../node_modules/.pnpm/string-width@4.2.3/node_modules/string-width/index.js"),
            y18n: oe({
                directory: re(__dirname, "../locales"),
                updateFiles: !1
            })
        };
        const ce = (null == (he = null == process ? void 0 : process.env) ? void 0 : he.YARGS_MIN_NODE_VERSION) ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;
        if (process && process.version) {
            if (Number(process.version.match(/v([^.]+)/)[1]) < ce) throw Error(`yargs supports a minimum Node.js version of ${ce}. Read our version support policy: https://github.com/yargs/yargs#supported-nodejs-versions`);
        }
        const fe = __webpack_require__("../../node_modules/.pnpm/yargs-parser@21.1.1/node_modules/yargs-parser/build/index.cjs");
        var de, ue = {
            applyExtends: n,
            cjsPlatformShim: le,
            Yargs: (de = le, (t1 = [], e1 = de.process.cwd(), s)=>{
                const i = new te(t1, e1, s, de);
                return Object.defineProperty(i, "argv", {
                    get: ()=>i.parse(),
                    enumerable: !0
                }), i.help(), i.version(), i;
            }),
            argsert: h,
            isPromise: f,
            objFilter: g,
            parseCommand: o,
            Parser: fe,
            processArgv: b,
            YError: e1
        };
        module.exports = ue;
    },
    "../../node_modules/.pnpm/dotenv@16.4.5/node_modules/dotenv/package.json": function(module) {
        "use strict";
        module.exports = JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        id: moduleId,
        loaded: false,
        exports: {}
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    module.loaded = true;
    return module.exports;
}
__webpack_require__.c = __webpack_module_cache__;
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    var getProto = Object.getPrototypeOf ? (obj)=>Object.getPrototypeOf(obj) : (obj)=>obj.__proto__;
    var leafPrototypes;
    __webpack_require__.t = function(value, mode) {
        if (1 & mode) value = this(value);
        if (8 & mode) return value;
        if ('object' == typeof value && value) {
            if (4 & mode && value.__esModule) return value;
            if (16 & mode && 'function' == typeof value.then) return value;
        }
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        var def = {};
        leafPrototypes = leafPrototypes || [
            null,
            getProto({}),
            getProto([]),
            getProto(getProto)
        ];
        for(var current = 2 & mode && value; 'object' == typeof current && !~leafPrototypes.indexOf(current); current = getProto(current))Object.getOwnPropertyNames(current).forEach((key)=>{
            def[key] = ()=>value[key];
        });
        def['default'] = ()=>value;
        __webpack_require__.d(ns, def);
        return ns;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
(()=>{
    __webpack_require__.nmd = (module)=>{
        module.paths = [];
        if (!module.children) module.children = [];
        return module;
    };
})();
var __webpack_exports__ = __webpack_require__(__webpack_require__.s = "./src/index.ts");
for(var __webpack_i__ in __webpack_exports__)exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=index.js.map