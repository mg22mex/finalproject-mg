import { sha256 } from "js-sha256";
var _process_versions;
const ifInBrowser = 'undefined' != typeof window;
const ifInWorker = 'undefined' != typeof WorkerGlobalScope;
const ifInNode = 'undefined' != typeof process && (null == (_process_versions = process.versions) ? void 0 : _process_versions.node);
function uuid() {
    return Math.random().toString(36).substring(2, 15);
}
const hashMap = {};
function generateHashId(rect, content = '') {
    const combined = JSON.stringify({
        content,
        rect
    });
    let sliceLength = 5;
    let slicedHash = '';
    const hashHex = sha256.create().update(combined).hex();
    const toLetters = (hex)=>hex.split('').map((char)=>{
            const code = Number.parseInt(char, 16);
            return String.fromCharCode(97 + code % 26);
        }).join('');
    const hashLetters = toLetters(hashHex);
    while(sliceLength < hashLetters.length - 1){
        slicedHash = hashLetters.slice(0, sliceLength);
        if (hashMap[slicedHash] && hashMap[slicedHash] !== combined) {
            sliceLength++;
            continue;
        }
        hashMap[slicedHash] = combined;
        break;
    }
    return slicedHash;
}
function assert(condition, message) {
    if (!condition) throw new Error(message || 'Assertion failed');
}
function getGlobalScope() {
    if ('undefined' != typeof window) return window;
    if ('undefined' != typeof globalThis) return globalThis;
    if ('undefined' != typeof self) return self;
}
let isMcp = false;
function setIsMcp(value) {
    isMcp = value;
}
function logMsg(...message) {
    if (!isMcp) console.log(...message);
}
async function repeat(times, fn) {
    for(let i = 0; i < times; i++)await fn(i);
}
const utils_REGEXP_LT = /</g;
const utils_REGEXP_GT = />/g;
const REGEXP_LT_ESCAPE = '__midscene_lt__';
const REGEXP_GT_ESCAPE = '__midscene_gt__';
const escapeScriptTag = (html)=>html.replace(utils_REGEXP_LT, REGEXP_LT_ESCAPE).replace(utils_REGEXP_GT, REGEXP_GT_ESCAPE);
const antiEscapeScriptTag = (html)=>{
    const REGEXP_LT = new RegExp(REGEXP_LT_ESCAPE, 'g');
    const REGEXP_GT = new RegExp(REGEXP_GT_ESCAPE, 'g');
    return html.replace(REGEXP_LT, '<').replace(REGEXP_GT, '>');
};
function replaceIllegalPathCharsAndSpace(str) {
    return str.replace(/[:*?"<>| ]/g, '-');
}
export { antiEscapeScriptTag, assert, escapeScriptTag, generateHashId, getGlobalScope, ifInBrowser, ifInNode, ifInWorker, logMsg, repeat, replaceIllegalPathCharsAndSpace, setIsMcp, uuid };
