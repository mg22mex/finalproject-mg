import { GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG, GlobalConfigManager } from "./global-config.mjs";
import { MIDSCENE_PREFERRED_LANGUAGE } from "./types.mjs";
const globalConfigManager = new GlobalConfigManager();
const uiTarsModelVersion = (modelPreferences)=>{
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return result.uiTarsVersion;
    } catch (e) {
        if (null == e ? void 0 : e[GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call uiTarsModelVersion before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
};
const vlLocateMode = (modelPreferences)=>{
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return result.vlMode;
    } catch (e) {
        if (null == e ? void 0 : e[GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call vlLocateMode before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
};
const getIsUseQwenVl = (modelPreferences)=>{
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return 'qwen-vl' === result.vlMode;
    } catch (e) {
        if (null == e ? void 0 : e[GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) {
            console.warn("Call getIsUseQwenVl before globalConfig init, will return false. This warning should only appear in midscene's own unit tests.");
            return false;
        }
        throw e;
    }
};
function getModelName(modelPreferences) {
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return null == result ? void 0 : result.modelName;
    } catch (e) {
        if (null == e ? void 0 : e[GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call getModelName before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
}
const getPreferredLanguage = ()=>{
    const prefer = globalConfigManager.getEnvConfigValue(MIDSCENE_PREFERRED_LANGUAGE);
    if (prefer) return prefer;
    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const isChina = 'Asia/Shanghai' === timeZone;
    return isChina ? 'Chinese' : 'English';
};
const getUploadTestServerUrl = ()=>{
    try {
        const { openaiExtraConfig } = globalConfigManager.getModelConfigByIntent('default');
        const serverUrl = null == openaiExtraConfig ? void 0 : openaiExtraConfig.REPORT_SERVER_URL;
        return serverUrl;
    } catch (e) {
        if (null == e ? void 0 : e[GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call getUploadTestServerUrl before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
};
const overrideAIConfig = (newConfig, extendMode = false)=>{
    globalConfigManager.registerOverride(newConfig, extendMode);
};
export { getIsUseQwenVl, getModelName, getPreferredLanguage, getUploadTestServerUrl, globalConfigManager, overrideAIConfig, uiTarsModelVersion, vlLocateMode };
