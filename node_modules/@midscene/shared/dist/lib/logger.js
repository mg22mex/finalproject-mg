"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    enableDebug: ()=>enableDebug,
    getDebug: ()=>getDebug,
    cleanupLogStreams: ()=>cleanupLogStreams
});
const external_node_fs_namespaceObject = require("node:fs");
var external_node_fs_default = /*#__PURE__*/ __webpack_require__.n(external_node_fs_namespaceObject);
const external_node_path_namespaceObject = require("node:path");
var external_node_path_default = /*#__PURE__*/ __webpack_require__.n(external_node_path_namespaceObject);
const external_node_util_namespaceObject = require("node:util");
var external_node_util_default = /*#__PURE__*/ __webpack_require__.n(external_node_util_namespaceObject);
const external_debug_namespaceObject = require("debug");
var external_debug_default = /*#__PURE__*/ __webpack_require__.n(external_debug_namespaceObject);
const external_common_js_namespaceObject = require("./common.js");
const external_utils_js_namespaceObject = require("./utils.js");
const topicPrefix = 'midscene';
const logStreams = new Map();
const debugInstances = new Map();
function getLogStream(topic) {
    const topicFileName = topic.replace(/:/g, '-');
    if (!logStreams.has(topicFileName)) {
        const logFile = external_node_path_default().join((0, external_common_js_namespaceObject.getMidsceneRunSubDir)('log'), `${topicFileName}.log`);
        const stream = external_node_fs_default().createWriteStream(logFile, {
            flags: 'a'
        });
        logStreams.set(topicFileName, stream);
    }
    return logStreams.get(topicFileName);
}
function writeLogToFile(topic, message) {
    if (!external_utils_js_namespaceObject.ifInNode) return;
    const stream = getLogStream(topic);
    const now = new Date();
    const isoDate = now.toLocaleDateString('sv-SE');
    const isoTime = now.toLocaleTimeString('sv-SE');
    const milliseconds = now.getMilliseconds().toString().padStart(3, '0');
    const timezoneOffsetMinutes = now.getTimezoneOffset();
    const sign = timezoneOffsetMinutes <= 0 ? '+' : '-';
    const hours = Math.floor(Math.abs(timezoneOffsetMinutes) / 60).toString().padStart(2, '0');
    const minutes = (Math.abs(timezoneOffsetMinutes) % 60).toString().padStart(2, '0');
    const timezoneString = `${sign}${hours}:${minutes}`;
    const localISOTime = `${isoDate}T${isoTime}.${milliseconds}${timezoneString}`;
    stream.write(`[${localISOTime}] ${message}\n`);
}
function getDebug(topic) {
    const fullTopic = `${topicPrefix}:${topic}`;
    if (!debugInstances.has(fullTopic)) {
        const debugFn = external_debug_default()(fullTopic);
        const wrapper = (...args)=>{
            if (external_utils_js_namespaceObject.ifInNode) {
                const message = external_node_util_default().format(...args);
                writeLogToFile(topic, message);
            }
            debugFn(...args);
        };
        debugInstances.set(fullTopic, wrapper);
    }
    return debugInstances.get(fullTopic);
}
function enableDebug(topic) {
    if (external_utils_js_namespaceObject.ifInNode) return;
    external_debug_default().enable(`${topicPrefix}:${topic}`);
}
function cleanupLogStreams() {
    if (!external_utils_js_namespaceObject.ifInNode) return;
    for (const stream of logStreams.values())stream.end();
    logStreams.clear();
    debugInstances.clear();
}
exports.cleanupLogStreams = __webpack_exports__.cleanupLogStreams;
exports.enableDebug = __webpack_exports__.enableDebug;
exports.getDebug = __webpack_exports__.getDebug;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "cleanupLogStreams",
    "enableDebug",
    "getDebug"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
