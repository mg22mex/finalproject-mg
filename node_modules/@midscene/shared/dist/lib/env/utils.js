"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getIsUseQwenVl: ()=>getIsUseQwenVl,
    uiTarsModelVersion: ()=>uiTarsModelVersion,
    overrideAIConfig: ()=>overrideAIConfig,
    vlLocateMode: ()=>vlLocateMode,
    getUploadTestServerUrl: ()=>getUploadTestServerUrl,
    globalConfigManager: ()=>globalConfigManager,
    getPreferredLanguage: ()=>getPreferredLanguage,
    getModelName: ()=>getModelName
});
const external_global_config_js_namespaceObject = require("./global-config.js");
const external_types_js_namespaceObject = require("./types.js");
const globalConfigManager = new external_global_config_js_namespaceObject.GlobalConfigManager();
const uiTarsModelVersion = (modelPreferences)=>{
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return result.uiTarsVersion;
    } catch (e) {
        if (null == e ? void 0 : e[external_global_config_js_namespaceObject.GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call uiTarsModelVersion before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
};
const vlLocateMode = (modelPreferences)=>{
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return result.vlMode;
    } catch (e) {
        if (null == e ? void 0 : e[external_global_config_js_namespaceObject.GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call vlLocateMode before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
};
const getIsUseQwenVl = (modelPreferences)=>{
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return 'qwen-vl' === result.vlMode;
    } catch (e) {
        if (null == e ? void 0 : e[external_global_config_js_namespaceObject.GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) {
            console.warn("Call getIsUseQwenVl before globalConfig init, will return false. This warning should only appear in midscene's own unit tests.");
            return false;
        }
        throw e;
    }
};
function getModelName(modelPreferences) {
    try {
        const result = globalConfigManager.getModelConfigByIntent(modelPreferences.intent);
        return null == result ? void 0 : result.modelName;
    } catch (e) {
        if (null == e ? void 0 : e[external_global_config_js_namespaceObject.GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call getModelName before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
}
const getPreferredLanguage = ()=>{
    const prefer = globalConfigManager.getEnvConfigValue(external_types_js_namespaceObject.MIDSCENE_PREFERRED_LANGUAGE);
    if (prefer) return prefer;
    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const isChina = 'Asia/Shanghai' === timeZone;
    return isChina ? 'Chinese' : 'English';
};
const getUploadTestServerUrl = ()=>{
    try {
        const { openaiExtraConfig } = globalConfigManager.getModelConfigByIntent('default');
        const serverUrl = null == openaiExtraConfig ? void 0 : openaiExtraConfig.REPORT_SERVER_URL;
        return serverUrl;
    } catch (e) {
        if (null == e ? void 0 : e[external_global_config_js_namespaceObject.GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG]) return void console.warn("Call getUploadTestServerUrl before globalConfig init, will return undefined. This warning should only appear in midscene's own unit tests.");
        throw e;
    }
};
const overrideAIConfig = (newConfig, extendMode = false)=>{
    globalConfigManager.registerOverride(newConfig, extendMode);
};
exports.getIsUseQwenVl = __webpack_exports__.getIsUseQwenVl;
exports.getModelName = __webpack_exports__.getModelName;
exports.getPreferredLanguage = __webpack_exports__.getPreferredLanguage;
exports.getUploadTestServerUrl = __webpack_exports__.getUploadTestServerUrl;
exports.globalConfigManager = __webpack_exports__.globalConfigManager;
exports.overrideAIConfig = __webpack_exports__.overrideAIConfig;
exports.uiTarsModelVersion = __webpack_exports__.uiTarsModelVersion;
exports.vlLocateMode = __webpack_exports__.vlLocateMode;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "getIsUseQwenVl",
    "getModelName",
    "getPreferredLanguage",
    "getUploadTestServerUrl",
    "globalConfigManager",
    "overrideAIConfig",
    "uiTarsModelVersion",
    "vlLocateMode"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
