import { type IModelConfig } from './model-config';
import { BOOLEAN_ENV_KEYS, GLOBAL_ENV_KEYS, NUMBER_ENV_KEYS, STRING_ENV_KEYS } from './types';
import { MODEL_ENV_KEYS, type TIntent, type TModelConfigFn } from './types';
export declare const GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG = "GLOBAL_CONFIG_MANAGER_UNINITIALIZED_FLAG";
declare global {
    const chrome: {
        runtime: {
            id: string;
        };
    };
}
/**
 * Collect global configs from process.env, overrideAIConfig, modelConfig, etc.
 * And provider methods to get merged config value
 */
export declare class GlobalConfigManager {
    private override;
    private initialized;
    private debugLog;
    private modelConfigByIntent;
    private allEnvConfig;
    private keysHaveBeenRead;
    private latestModelConfigFn?;
    private modelConfigForChromeExtension;
    constructor();
    private initAllEnvConfig;
    private initIntentConfigFromFn;
    private createUninitializedError;
    reset(): void;
    private initModelConfigForIntent;
    private initModelConfigForChromeExtension;
    /**
     * init and decide all global config value,
     * should be called at Agent.constructor
     */
    init(modelConfigFn?: TModelConfigFn): void;
    getModelConfigByIntent(intent: TIntent): IModelConfig;
    getEnvConfigValue(key: (typeof STRING_ENV_KEYS)[number]): string | undefined;
    /**
     * read number only from process.env
     */
    getEnvConfigInNumber(key: (typeof NUMBER_ENV_KEYS)[number]): number;
    /**
     * read boolean only from process.env
     */
    getEnvConfigInBoolean(key: (typeof BOOLEAN_ENV_KEYS)[number]): boolean;
    /**
     * for overrideAIConfig
     * can only override keys in MODEL_ENV_KEYS
     */
    registerOverride(newConfig: Partial<Record<(typeof GLOBAL_ENV_KEYS)[number] | (typeof MODEL_ENV_KEYS)[number], string>>, extendMode?: boolean): void;
}
