import type { TIntent } from './types';
import { DEFAULT_MODEL_CONFIG_KEYS, DEFAULT_MODEL_CONFIG_KEYS_LEGACY, GROUNDING_MODEL_CONFIG_KEYS, PLANNING_MODEL_CONFIG_KEYS, VQA_MODEL_CONFIG_KEYS } from './constants';
import { type UITarsModelVersion } from './parse';
export interface IModelConfig {
    /**
     * proxy
     */
    socksProxy?: string;
    httpProxy?: string;
    /**
     * model
     */
    modelName: string;
    /**
     * OpenAI
     */
    openaiBaseURL?: string;
    openaiApiKey?: string;
    openaiExtraConfig?: Record<string, unknown>;
    /**
     * Azure
     */
    openaiUseAzureDeprecated?: boolean;
    useAzureOpenai?: boolean;
    azureOpenaiScope?: string;
    azureOpenaiKey?: string;
    azureOpenaiEndpoint?: string;
    azureOpenaiApiVersion?: string;
    azureOpenaiDeployment?: string;
    azureExtraConfig?: Record<string, unknown>;
    /**
     * Anthropic
     */
    useAnthropicSdk?: boolean;
    anthropicApiKey?: string;
    /**
     * - vlModeRaw: exists only in non-legacy logic. value can be 'doubao-vision', 'gemini', 'qwen-vl', 'vlm-ui-tars', 'vlm-ui-tars-doubao', 'vlm-ui-tars-doubao-1.5'
     * - vlMode: based on the results of the vlModoRaw classificationï¼Œvalue can be 'doubao-vision', 'gemini', 'qwen-vl', 'vlm-ui-tars'
     */
    vlModeRaw?: string;
    vlMode?: string;
    uiTarsVersion?: UITarsModelVersion;
    modelDescription: string;
    /**
     * for debug
     */
    from: 'modelConfig' | 'env' | 'legacy-env';
}
type TModelConfigKeys = typeof VQA_MODEL_CONFIG_KEYS | typeof GROUNDING_MODEL_CONFIG_KEYS | typeof PLANNING_MODEL_CONFIG_KEYS | typeof DEFAULT_MODEL_CONFIG_KEYS | typeof DEFAULT_MODEL_CONFIG_KEYS_LEGACY;
/**
 * Choose OpenAI SDK config, such as OpenAI, AzureOpenAI, AnthropicSDK, etc.
 */
export declare const decideOpenaiSdkConfig: ({ keys, provider, valueAssert, }: {
    keys: TModelConfigKeys;
    provider: Record<string, string | undefined>;
    valueAssert: (value: string | undefined, key: string, modelVendorFlag?: string) => void;
}) => Omit<IModelConfig, "modelName" | "from" | "vlMode" | "uiTarsVersion" | "modelDescription">;
/**
 * get and validate model config for model client
 * priority order:
 * - modelConfigFn result
 * - process.env.MIDSCENE_${intent}_MODEL_NAME
 * - PROCESS.ENV.MIDSCENE_MODEL_NAME
 */
export declare const decideModelConfig: ({ intent, modelConfigFromFn, allConfig, }: {
    intent: TIntent;
    modelConfigFromFn: Record<string, string | undefined> | undefined;
    allConfig: Record<string, string | undefined>;
}) => IModelConfig;
export {};
