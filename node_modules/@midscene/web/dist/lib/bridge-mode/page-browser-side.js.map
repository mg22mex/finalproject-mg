{"version":3,"file":"bridge-mode/page-browser-side.js","sources":["webpack://@midscene/web/webpack/runtime/compat_get_default_export","webpack://@midscene/web/webpack/runtime/define_property_getters","webpack://@midscene/web/webpack/runtime/has_own_property","webpack://@midscene/web/webpack/runtime/make_namespace_object","webpack://@midscene/web/./src/bridge-mode/page-browser-side.ts"],"sourcesContent":["// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { assert } from '@midscene/shared/utils';\nimport ChromeExtensionProxyPage from '../chrome-extension/page';\nimport type {\n  ChromePageDestroyOptions,\n  KeyboardAction,\n  MouseAction,\n} from '../web-page';\nimport {\n  type BridgeConnectTabOptions,\n  BridgeEvent,\n  DefaultBridgeServerPort,\n  KeyboardEvent,\n  MouseEvent,\n} from './common';\nimport { BridgeClient } from './io-client';\n\ndeclare const __VERSION__: string;\n\nexport class ExtensionBridgePageBrowserSide extends ChromeExtensionProxyPage {\n  public bridgeClient: BridgeClient | null = null;\n\n  private destroyOptions?: ChromePageDestroyOptions;\n\n  private newlyCreatedTabIds: number[] = [];\n\n  constructor(\n    public onDisconnect: () => void = () => {},\n    public onLogMessage: (\n      message: string,\n      type: 'log' | 'status',\n    ) => void = () => {},\n    forceSameTabNavigation = true,\n  ) {\n    super(forceSameTabNavigation);\n  }\n\n  private async setupBridgeClient() {\n    this.bridgeClient = new BridgeClient(\n      `ws://localhost:${DefaultBridgeServerPort}`,\n      async (method, args: any[]) => {\n        console.log('bridge call from cli side', method, args);\n        if (method === BridgeEvent.ConnectNewTabWithUrl) {\n          return this.connectNewTabWithUrl.apply(\n            this,\n            args as unknown as [string],\n          );\n        }\n\n        if (method === BridgeEvent.GetBrowserTabList) {\n          return this.getBrowserTabList.apply(this, args as any);\n        }\n\n        if (method === BridgeEvent.SetActiveTabId) {\n          return this.setActiveTabId.apply(this, args as any);\n        }\n\n        if (method === BridgeEvent.ConnectCurrentTab) {\n          return this.connectCurrentTab.apply(this, args as any);\n        }\n\n        if (method === BridgeEvent.UpdateAgentStatus) {\n          return this.onLogMessage(args[0] as string, 'status');\n        }\n\n        const tabId = await this.getActiveTabId();\n        if (!tabId || tabId === 0) {\n          throw new Error('no tab is connected');\n        }\n\n        // this.onLogMessage(`calling method: ${method}`);\n\n        if (method.startsWith(MouseEvent.PREFIX)) {\n          const actionName = method.split('.')[1] as keyof MouseAction;\n          if (actionName === 'drag') {\n            return this.mouse[actionName].apply(this.mouse, args as any);\n          }\n          return this.mouse[actionName].apply(this.mouse, args as any);\n        }\n\n        if (method.startsWith(KeyboardEvent.PREFIX)) {\n          const actionName = method.split('.')[1] as keyof KeyboardAction;\n          if (actionName === 'press') {\n            return this.keyboard[actionName].apply(this.keyboard, args as any);\n          }\n          return this.keyboard[actionName].apply(this.keyboard, args as any);\n        }\n\n        if (!this[method as keyof ChromeExtensionProxyPage]) {\n          console.warn('method not found', method);\n          return undefined;\n        }\n\n        try {\n          // @ts-expect-error\n          const result = await this[method as keyof ChromeExtensionProxyPage](\n            ...args,\n          );\n          return result;\n        } catch (e) {\n          const errorMessage = e instanceof Error ? e.message : 'Unknown error';\n          console.error('error calling method', method, args, e);\n          this.onLogMessage(\n            `Error calling method: ${method}, ${errorMessage}`,\n            'log',\n          );\n          throw new Error(errorMessage, { cause: e });\n        }\n      },\n      // on disconnect\n      () => {\n        return this.destroy();\n      },\n    );\n    await this.bridgeClient.connect();\n    this.onLogMessage(\n      `Bridge connected, cli-side version v${this.bridgeClient.serverVersion}, browser-side version v${__VERSION__}`,\n      'log',\n    );\n  }\n\n  public async connect() {\n    return await this.setupBridgeClient();\n  }\n\n  public async connectNewTabWithUrl(\n    url: string,\n    options: BridgeConnectTabOptions = {\n      forceSameTabNavigation: true,\n    },\n  ) {\n    const tab = await chrome.tabs.create({ url });\n    const tabId = tab.id;\n    assert(tabId, 'failed to get tabId after creating a new tab');\n\n    // new tab\n    this.onLogMessage(`Creating new tab: ${url}`, 'log');\n    this.newlyCreatedTabIds.push(tabId);\n\n    if (options?.forceSameTabNavigation) {\n      this.forceSameTabNavigation = true;\n    }\n\n    await this.setActiveTabId(tabId);\n  }\n\n  public async connectCurrentTab(\n    options: BridgeConnectTabOptions = {\n      forceSameTabNavigation: true,\n    },\n  ) {\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n    const tabId = tabs[0]?.id;\n    assert(tabId, 'failed to get tabId');\n\n    this.onLogMessage(`Connected to current tab: ${tabs[0]?.url}`, 'log');\n\n    if (options?.forceSameTabNavigation) {\n      this.forceSameTabNavigation = true;\n    }\n\n    await this.setActiveTabId(tabId);\n  }\n\n  public async setDestroyOptions(options: ChromePageDestroyOptions) {\n    this.destroyOptions = options;\n  }\n\n  async destroy() {\n    if (this.destroyOptions?.closeTab && this.newlyCreatedTabIds.length > 0) {\n      this.onLogMessage('Closing all newly created tabs by bridge...', 'log');\n      for (const tabId of this.newlyCreatedTabIds) {\n        await chrome.tabs.remove(tabId);\n      }\n      this.newlyCreatedTabIds = [];\n    }\n\n    await super.destroy();\n\n    if (this.bridgeClient) {\n      this.bridgeClient.disconnect();\n      this.bridgeClient = null;\n      this.onDisconnect();\n    }\n  }\n}\n"],"names":["__webpack_require__","module","getter","definition","key","Object","obj","prop","Symbol","ExtensionBridgePageBrowserSide","ChromeExtensionProxyPage","BridgeClient","DefaultBridgeServerPort","method","args","console","BridgeEvent","tabId","Error","MouseEvent","actionName","KeyboardEvent","result","e","errorMessage","url","options","tab","chrome","assert","_tabs_","_tabs_1","tabs","_this_destroyOptions","onDisconnect","onLogMessage","forceSameTabNavigation"],"mappings":"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"}