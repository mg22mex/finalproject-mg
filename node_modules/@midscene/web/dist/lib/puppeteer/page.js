"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    PuppeteerWebPage: ()=>PuppeteerWebPage
});
const constants_namespaceObject = require("@midscene/shared/constants");
const external_base_page_js_namespaceObject = require("./base-page.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class PuppeteerWebPage extends external_base_page_js_namespaceObject.Page {
    async beforeAction() {
        try {
            await this.waitUntilNetworkIdle();
        } catch (error) {
            console.warn('[midscene:warning] Waiting for network idle has timed out, but Midscene will continue execution. Please check https://midscenejs.com/faq.html#customize-the-network-timeout for more information on customizing the network timeout');
        }
    }
    async waitUntilNetworkIdle() {
        if (0 === this.waitForNetworkIdleTimeout) return void (0, external_base_page_js_namespaceObject.debugPage)('waitUntilNetworkIdle timeout is 0, skip waiting');
        await this.underlyingPage.waitForNetworkIdle({
            idleTime: this.waitForNetworkIdleTimeout,
            concurrency: constants_namespaceObject.DEFAULT_WAIT_FOR_NETWORK_IDLE_CONCURRENCY,
            timeout: this.waitForNetworkIdleTimeout
        });
    }
    constructor(page, opts){
        super(page, 'puppeteer', opts), _define_property(this, "waitForNavigationTimeout", void 0), _define_property(this, "waitForNetworkIdleTimeout", void 0);
        const { waitForNavigationTimeout = constants_namespaceObject.DEFAULT_WAIT_FOR_NAVIGATION_TIMEOUT, waitForNetworkIdleTimeout = constants_namespaceObject.DEFAULT_WAIT_FOR_NETWORK_IDLE_TIMEOUT } = opts ?? {};
        this.waitForNavigationTimeout = waitForNavigationTimeout;
        this.waitForNetworkIdleTimeout = waitForNetworkIdleTimeout;
    }
}
exports.PuppeteerWebPage = __webpack_exports__.PuppeteerWebPage;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "PuppeteerWebPage"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=page.js.map