import { DEFAULT_WAIT_FOR_NAVIGATION_TIMEOUT, DEFAULT_WAIT_FOR_NETWORK_IDLE_CONCURRENCY, DEFAULT_WAIT_FOR_NETWORK_IDLE_TIMEOUT } from "@midscene/shared/constants";
import { Page, debugPage } from "./base-page.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class PuppeteerWebPage extends Page {
    async beforeAction() {
        try {
            await this.waitUntilNetworkIdle();
        } catch (error) {
            console.warn('[midscene:warning] Waiting for network idle has timed out, but Midscene will continue execution. Please check https://midscenejs.com/faq.html#customize-the-network-timeout for more information on customizing the network timeout');
        }
    }
    async waitUntilNetworkIdle() {
        if (0 === this.waitForNetworkIdleTimeout) return void debugPage('waitUntilNetworkIdle timeout is 0, skip waiting');
        await this.underlyingPage.waitForNetworkIdle({
            idleTime: this.waitForNetworkIdleTimeout,
            concurrency: DEFAULT_WAIT_FOR_NETWORK_IDLE_CONCURRENCY,
            timeout: this.waitForNetworkIdleTimeout
        });
    }
    constructor(page, opts){
        super(page, 'puppeteer', opts), _define_property(this, "waitForNavigationTimeout", void 0), _define_property(this, "waitForNetworkIdleTimeout", void 0);
        const { waitForNavigationTimeout = DEFAULT_WAIT_FOR_NAVIGATION_TIMEOUT, waitForNetworkIdleTimeout = DEFAULT_WAIT_FOR_NETWORK_IDLE_TIMEOUT } = opts ?? {};
        this.waitForNavigationTimeout = waitForNavigationTimeout;
        this.waitForNetworkIdleTimeout = waitForNetworkIdleTimeout;
    }
}
export { PuppeteerWebPage };

//# sourceMappingURL=page.mjs.map