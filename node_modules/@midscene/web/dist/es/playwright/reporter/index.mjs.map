{"version":3,"file":"playwright/reporter/index.mjs","sources":["webpack://@midscene/web/./src/playwright/reporter/index.ts"],"sourcesContent":["import { readFileSync, rmSync } from 'node:fs';\nimport type { ReportDumpWithAttributes } from '@midscene/core';\nimport { getReportFileName, printReportMsg } from '@midscene/core/agent';\nimport { writeDumpReport } from '@midscene/core/utils';\nimport { replaceIllegalPathCharsAndSpace } from '@midscene/shared/utils';\nimport type {\n  FullConfig,\n  Reporter,\n  Suite,\n  TestCase,\n  TestResult,\n} from '@playwright/test/reporter';\n\ninterface MidsceneReporterOptions {\n  type?: 'merged' | 'separate';\n}\n\nclass MidsceneReporter implements Reporter {\n  private mergedFilename?: string;\n  private testTitleToFilename = new Map<string, string>();\n  mode?: 'merged' | 'separate';\n\n  constructor(options: MidsceneReporterOptions = {}) {\n    // Set mode from constructor options (official Playwright way)\n    this.mode = MidsceneReporter.getMode(options.type ?? 'merged');\n  }\n\n  private static getMode(reporterType: string): 'merged' | 'separate' {\n    if (!reporterType) {\n      return 'merged';\n    }\n    if (reporterType !== 'merged' && reporterType !== 'separate') {\n      throw new Error(\n        `Unknown reporter type in playwright config: ${reporterType}, only support 'merged' or 'separate'`,\n      );\n    }\n    return reporterType;\n  }\n\n  private getSeparatedFilename(testTitle: string): string {\n    if (!this.testTitleToFilename.has(testTitle)) {\n      const baseTag = `playwright-${replaceIllegalPathCharsAndSpace(testTitle)}`;\n      const generatedFilename = getReportFileName(baseTag);\n      this.testTitleToFilename.set(testTitle, generatedFilename);\n    }\n    return this.testTitleToFilename.get(testTitle)!;\n  }\n\n  private getReportFilename(testTitle?: string): string {\n    if (this.mode === 'merged') {\n      if (!this.mergedFilename) {\n        this.mergedFilename = getReportFileName('playwright-merged');\n      }\n      return this.mergedFilename;\n    } else if (this.mode === 'separate') {\n      if (!testTitle) throw new Error('testTitle is required in separate mode');\n      return this.getSeparatedFilename(testTitle);\n    }\n    throw new Error(`Unknown mode: ${this.mode}`);\n  }\n\n  private updateReport(testData: ReportDumpWithAttributes) {\n    if (!testData || !this.mode) return;\n    const fileName = this.getReportFilename(\n      testData.attributes?.playwright_test_title,\n    );\n    const reportPath = writeDumpReport(\n      fileName,\n      testData,\n      this.mode === 'merged',\n    );\n    reportPath && printReportMsg(reportPath);\n  }\n\n  async onBegin(config: FullConfig, suite: Suite) {}\n\n  onTestBegin(_test: TestCase, _result: TestResult) {\n    // logger(`Starting test ${test.title}`);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    const dumpAnnotation = test.annotations.find((annotation) => {\n      return annotation.type === 'MIDSCENE_DUMP_ANNOTATION';\n    });\n    if (!dumpAnnotation?.description) return;\n\n    const tempFilePath = dumpAnnotation.description;\n    let dumpString: string;\n\n    try {\n      dumpString = readFileSync(tempFilePath, 'utf-8');\n    } catch (error) {\n      console.error(\n        `Failed to read Midscene dump file: ${tempFilePath}`,\n        error,\n      );\n      return;\n    }\n\n    const retry = result.retry ? `(retry #${result.retry})` : '';\n    const testId = `${test.id}${retry}`;\n    const testData: ReportDumpWithAttributes = {\n      dumpString,\n      attributes: {\n        playwright_test_id: testId,\n        playwright_test_title: `${test.title}${retry}`,\n        playwright_test_status: result.status,\n        playwright_test_duration: result.duration,\n      },\n    };\n\n    this.updateReport(testData);\n\n    // Clean up: delete temp file\n    try {\n      rmSync(tempFilePath, { force: true });\n    } catch (error) {\n      console.warn(\n        `Failed to delete Midscene temp file: ${tempFilePath}`,\n        error,\n      );\n    }\n  }\n}\n\nexport default MidsceneReporter;\n"],"names":["MidsceneReporter","reporterType","Error","testTitle","baseTag","replaceIllegalPathCharsAndSpace","generatedFilename","getReportFileName","testData","_testData_attributes","fileName","reportPath","writeDumpReport","printReportMsg","config","suite","_test","_result","test","result","dumpAnnotation","annotation","tempFilePath","dumpString","readFileSync","error","console","retry","testId","rmSync","options","Map"],"mappings":"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"}