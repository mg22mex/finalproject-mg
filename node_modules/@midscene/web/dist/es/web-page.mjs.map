{"version":3,"file":"web-page.mjs","sources":["webpack://@midscene/web/./src/web-page.ts"],"sourcesContent":["import assert from 'node:assert';\nimport type { Point } from '@midscene/core';\nimport {\n  AbstractInterface,\n  type DeviceAction,\n  defineActionDragAndDrop,\n  defineActionHover,\n  defineActionInput,\n  defineActionKeyboardPress,\n  defineActionRightClick,\n  defineActionScroll,\n  defineActionTap,\n} from '@midscene/core/device';\n\nimport { sleep } from '@midscene/core/utils';\nimport type { ElementInfo } from '@midscene/shared/extractor';\n\nexport function getKeyCommands(\n  value: string | string[],\n): Array<{ key: string; command?: string }> {\n  // Ensure value is an array of keys\n  const keys = Array.isArray(value) ? value : [value];\n\n  // Process each key to attach a corresponding command if needed, based on the presence of 'Meta' or 'Control' in the keys array.\n  // ref: https://github.com/puppeteer/puppeteer/pull/9357/files#diff-32cf475237b000f980eb214a0a823e45a902bddb7d2426d677cae96397aa0ae4R94\n  return keys.reduce((acc: Array<{ key: string; command?: string }>, k) => {\n    const includeMeta = keys.includes('Meta') || keys.includes('Control');\n    if (includeMeta && (k === 'a' || k === 'A')) {\n      return acc.concat([{ key: k, command: 'SelectAll' }]);\n    }\n    if (includeMeta && (k === 'c' || k === 'C')) {\n      return acc.concat([{ key: k, command: 'Copy' }]);\n    }\n    if (includeMeta && (k === 'v' || k === 'V')) {\n      return acc.concat([{ key: k, command: 'Paste' }]);\n    }\n    return acc.concat([{ key: k }]);\n  }, []);\n}\n\n// this is copied from puppeteer, but we don't want to import puppeteer here\nexport declare type KeyInput =\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'Power'\n  | 'Eject'\n  | 'Abort'\n  | 'Help'\n  | 'Backspace'\n  | 'Tab'\n  | 'Numpad5'\n  | 'NumpadEnter'\n  | 'Enter'\n  | '\\r'\n  | '\\n'\n  | 'ShiftLeft'\n  | 'ShiftRight'\n  | 'ControlLeft'\n  | 'ControlRight'\n  | 'AltLeft'\n  | 'AltRight'\n  | 'Pause'\n  | 'CapsLock'\n  | 'Escape'\n  | 'Convert'\n  | 'NonConvert'\n  | 'Space'\n  | 'Numpad9'\n  | 'PageUp'\n  | 'Numpad3'\n  | 'PageDown'\n  | 'End'\n  | 'Numpad1'\n  | 'Home'\n  | 'Numpad7'\n  | 'ArrowLeft'\n  | 'Numpad4'\n  | 'Numpad8'\n  | 'ArrowUp'\n  | 'ArrowRight'\n  | 'Numpad6'\n  | 'Numpad2'\n  | 'ArrowDown'\n  | 'Select'\n  | 'Open'\n  | 'PrintScreen'\n  | 'Insert'\n  | 'Numpad0'\n  | 'Delete'\n  | 'NumpadDecimal'\n  | 'Digit0'\n  | 'Digit1'\n  | 'Digit2'\n  | 'Digit3'\n  | 'Digit4'\n  | 'Digit5'\n  | 'Digit6'\n  | 'Digit7'\n  | 'Digit8'\n  | 'Digit9'\n  | 'KeyA'\n  | 'KeyB'\n  | 'KeyC'\n  | 'KeyD'\n  | 'KeyE'\n  | 'KeyF'\n  | 'KeyG'\n  | 'KeyH'\n  | 'KeyI'\n  | 'KeyJ'\n  | 'KeyK'\n  | 'KeyL'\n  | 'KeyM'\n  | 'KeyN'\n  | 'KeyO'\n  | 'KeyP'\n  | 'KeyQ'\n  | 'KeyR'\n  | 'KeyS'\n  | 'KeyT'\n  | 'KeyU'\n  | 'KeyV'\n  | 'KeyW'\n  | 'KeyX'\n  | 'KeyY'\n  | 'KeyZ'\n  | 'MetaLeft'\n  | 'MetaRight'\n  | 'ContextMenu'\n  | 'NumpadMultiply'\n  | 'NumpadAdd'\n  | 'NumpadSubtract'\n  | 'NumpadDivide'\n  | 'F1'\n  | 'F2'\n  | 'F3'\n  | 'F4'\n  | 'F5'\n  | 'F6'\n  | 'F7'\n  | 'F8'\n  | 'F9'\n  | 'F10'\n  | 'F11'\n  | 'F12'\n  | 'F13'\n  | 'F14'\n  | 'F15'\n  | 'F16'\n  | 'F17'\n  | 'F18'\n  | 'F19'\n  | 'F20'\n  | 'F21'\n  | 'F22'\n  | 'F23'\n  | 'F24'\n  | 'NumLock'\n  | 'ScrollLock'\n  | 'AudioVolumeMute'\n  | 'AudioVolumeDown'\n  | 'AudioVolumeUp'\n  | 'MediaTrackNext'\n  | 'MediaTrackPrevious'\n  | 'MediaStop'\n  | 'MediaPlayPause'\n  | 'Semicolon'\n  | 'Equal'\n  | 'NumpadEqual'\n  | 'Comma'\n  | 'Minus'\n  | 'Period'\n  | 'Slash'\n  | 'Backquote'\n  | 'BracketLeft'\n  | 'Backslash'\n  | 'BracketRight'\n  | 'Quote'\n  | 'AltGraph'\n  | 'Props'\n  | 'Cancel'\n  | 'Clear'\n  | 'Shift'\n  | 'Control'\n  | 'Alt'\n  | 'Accept'\n  | 'ModeChange'\n  | ' '\n  | 'Print'\n  | 'Execute'\n  | '\\u0000'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'g'\n  | 'h'\n  | 'i'\n  | 'j'\n  | 'k'\n  | 'l'\n  | 'm'\n  | 'n'\n  | 'o'\n  | 'p'\n  | 'q'\n  | 'r'\n  | 's'\n  | 't'\n  | 'u'\n  | 'v'\n  | 'w'\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'Meta'\n  | '*'\n  | '+'\n  | '-'\n  | '/'\n  | ';'\n  | '='\n  | ','\n  | '.'\n  | '`'\n  | '['\n  | '\\\\'\n  | ']'\n  | \"'\"\n  | 'Attn'\n  | 'CrSel'\n  | 'ExSel'\n  | 'EraseEof'\n  | 'Play'\n  | 'ZoomOut'\n  | ')'\n  | '!'\n  | '@'\n  | '#'\n  | '$'\n  | '%'\n  | '^'\n  | '&'\n  | '('\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F'\n  | 'G'\n  | 'H'\n  | 'I'\n  | 'J'\n  | 'K'\n  | 'L'\n  | 'M'\n  | 'N'\n  | 'O'\n  | 'P'\n  | 'Q'\n  | 'R'\n  | 'S'\n  | 'T'\n  | 'U'\n  | 'V'\n  | 'W'\n  | 'X'\n  | 'Y'\n  | 'Z'\n  | ':'\n  | '<'\n  | '_'\n  | '>'\n  | '?'\n  | '~'\n  | '{'\n  | '|'\n  | '}'\n  | '\"'\n  | 'SoftLeft'\n  | 'SoftRight'\n  | 'Camera'\n  | 'Call'\n  | 'EndCall'\n  | 'VolumeDown'\n  | 'VolumeUp';\n\nexport type MouseButton = 'left' | 'right' | 'middle';\n\nexport interface MouseAction {\n  click: (\n    x: number,\n    y: number,\n    options: { button: MouseButton },\n  ) => Promise<void>;\n  wheel: (deltaX: number, deltaY: number) => Promise<void>;\n  move: (x: number, y: number) => Promise<void>;\n  drag: (\n    from: { x: number; y: number },\n    to: { x: number; y: number },\n  ) => Promise<void>;\n}\n\nexport interface KeyboardAction {\n  type: (text: string) => Promise<void>;\n  press: (\n    action:\n      | { key: KeyInput; command?: string }\n      | { key: KeyInput; command?: string }[],\n  ) => Promise<void>;\n}\n\nexport interface ChromePageDestroyOptions {\n  closeTab?: boolean; // should close the tab when the page object is destroyed\n}\n\nexport abstract class AbstractWebPage extends AbstractInterface {\n  get mouse(): MouseAction {\n    return {\n      click: async (\n        x: number,\n        y: number,\n        options: { button: MouseButton },\n      ) => {},\n      wheel: async (deltaX: number, deltaY: number) => {},\n      move: async (x: number, y: number) => {},\n      drag: async (\n        from: { x: number; y: number },\n        to: { x: number; y: number },\n      ) => {},\n    };\n  }\n\n  get keyboard(): KeyboardAction {\n    return {\n      type: async (text: string) => {},\n      press: async (\n        action:\n          | { key: KeyInput; command?: string }\n          | { key: KeyInput; command?: string }[],\n      ) => {},\n    };\n  }\n\n  async clearInput(element: ElementInfo): Promise<void> {}\n\n  abstract scrollUntilTop(startingPoint?: Point): Promise<void>;\n  abstract scrollUntilBottom(startingPoint?: Point): Promise<void>;\n  abstract scrollUntilLeft(startingPoint?: Point): Promise<void>;\n  abstract scrollUntilRight(startingPoint?: Point): Promise<void>;\n  abstract scrollUp(distance?: number, startingPoint?: Point): Promise<void>;\n  abstract scrollDown(distance?: number, startingPoint?: Point): Promise<void>;\n  abstract scrollLeft(distance?: number, startingPoint?: Point): Promise<void>;\n  abstract scrollRight(distance?: number, startingPoint?: Point): Promise<void>;\n}\n\nexport const commonWebActionsForWebPage = <T extends AbstractWebPage>(\n  page: T,\n): DeviceAction<any>[] => [\n  defineActionTap(async (param) => {\n    const element = param.locate;\n    assert(element, 'Element not found, cannot tap');\n    await page.mouse.click(element.center[0], element.center[1], {\n      button: 'left',\n    });\n  }),\n  defineActionRightClick(async (param) => {\n    const element = param.locate;\n    assert(element, 'Element not found, cannot right click');\n    await page.mouse.click(element.center[0], element.center[1], {\n      button: 'right',\n    });\n  }),\n  defineActionHover(async (param) => {\n    const element = param.locate;\n    assert(element, 'Element not found, cannot hover');\n    await page.mouse.move(element.center[0], element.center[1]);\n  }),\n  defineActionInput(async (param) => {\n    const element = param.locate;\n    if (element) {\n      await page.clearInput(element as unknown as ElementInfo);\n\n      if (!param || !param.value) {\n        return;\n      }\n    }\n\n    // Note: there is another implementation in AndroidDevicePage, which is more complex\n    await page.keyboard.type(param.value);\n  }),\n  defineActionKeyboardPress(async (param) => {\n    const element = param.locate;\n    if (element) {\n      await page.mouse.click(element.center[0], element.center[1], {\n        button: 'left',\n      });\n    }\n\n    const keys = getKeyCommands(param.keyName);\n    await page.keyboard.press(keys as any); // TODO: fix this type error\n  }),\n  defineActionScroll(async (param) => {\n    const element = param.locate;\n    const startingPoint = element\n      ? {\n          left: element.center[0],\n          top: element.center[1],\n        }\n      : undefined;\n    const scrollToEventName = param?.scrollType;\n    if (scrollToEventName === 'untilTop') {\n      await page.scrollUntilTop(startingPoint);\n    } else if (scrollToEventName === 'untilBottom') {\n      await page.scrollUntilBottom(startingPoint);\n    } else if (scrollToEventName === 'untilRight') {\n      await page.scrollUntilRight(startingPoint);\n    } else if (scrollToEventName === 'untilLeft') {\n      await page.scrollUntilLeft(startingPoint);\n    } else if (scrollToEventName === 'once' || !scrollToEventName) {\n      if (param?.direction === 'down' || !param || !param.direction) {\n        await page.scrollDown(param?.distance || undefined, startingPoint);\n      } else if (param.direction === 'up') {\n        await page.scrollUp(param.distance || undefined, startingPoint);\n      } else if (param.direction === 'left') {\n        await page.scrollLeft(param.distance || undefined, startingPoint);\n      } else if (param.direction === 'right') {\n        await page.scrollRight(param.distance || undefined, startingPoint);\n      } else {\n        throw new Error(`Unknown scroll direction: ${param.direction}`);\n      }\n      // until mouse event is done\n      await sleep(500);\n    } else {\n      throw new Error(\n        `Unknown scroll event type: ${scrollToEventName}, param: ${JSON.stringify(\n          param,\n        )}`,\n      );\n    }\n  }),\n  defineActionDragAndDrop(async (param) => {\n    const from = param.from;\n    const to = param.to;\n    assert(from, 'missing \"from\" param for drag and drop');\n    assert(to, 'missing \"to\" param for drag and drop');\n    await page.mouse.drag(\n      {\n        x: from.center[0],\n        y: from.center[1],\n      },\n      {\n        x: to.center[0],\n        y: to.center[1],\n      },\n    );\n  }),\n];\n"],"names":["getKeyCommands","value","keys","Array","acc","k","includeMeta","AbstractWebPage","AbstractInterface","x","y","options","deltaX","deltaY","from","to","text","action","element","commonWebActionsForWebPage","page","defineActionTap","param","assert","defineActionRightClick","defineActionHover","defineActionInput","defineActionKeyboardPress","defineActionScroll","startingPoint","undefined","scrollToEventName","Error","JSON","sleep","defineActionDragAndDrop"],"mappings":"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"}